
Lab_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d98  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002ea4  08002ea4  00003ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ec8  08002ec8  00004068  2**0
                  CONTENTS
  4 .ARM          00000000  08002ec8  08002ec8  00004068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ec8  08002ec8  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ec8  08002ec8  00003ec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ecc  08002ecc  00003ecc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08002ed0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  20000068  08002f38  00004068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  08002f38  00004108  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008e57  00000000  00000000  00004091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020f1  00000000  00000000  0000cee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b00  00000000  00000000  0000efe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000083b  00000000  00000000  0000fae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000177fe  00000000  00000000  0001031b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eb7c  00000000  00000000  00027b19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000828d5  00000000  00000000  00036695  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b8f6a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a08  00000000  00000000  000b8fb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000bb9b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08002e8c 	.word	0x08002e8c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08002e8c 	.word	0x08002e8c

0800014c <display7SEG>:
int led_buffer[] = { 0, 0, 0, 0 };
int index_led = 0;


void display7SEG(int index)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	switch(index)
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b03      	cmp	r3, #3
 8000158:	f200 844d 	bhi.w	80009f6 <display7SEG+0x8aa>
 800015c:	a201      	add	r2, pc, #4	@ (adr r2, 8000164 <display7SEG+0x18>)
 800015e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000162:	bf00      	nop
 8000164:	08000175 	.word	0x08000175
 8000168:	08000381 	.word	0x08000381
 800016c:	080005ad 	.word	0x080005ad
 8000170:	080007d9 	.word	0x080007d9
   	{

   	    case 0:
   	      if(index_led >= 0 && index_led <= 3)
 8000174:	4bc5      	ldr	r3, [pc, #788]	@ (800048c <display7SEG+0x340>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b00      	cmp	r3, #0
 800017a:	f2c0 843e 	blt.w	80009fa <display7SEG+0x8ae>
 800017e:	4bc3      	ldr	r3, [pc, #780]	@ (800048c <display7SEG+0x340>)
 8000180:	681b      	ldr	r3, [r3, #0]
 8000182:	2b03      	cmp	r3, #3
 8000184:	f300 8439 	bgt.w	80009fa <display7SEG+0x8ae>
   	      {
   	    	switch(led_buffer[index_led])
 8000188:	4bc0      	ldr	r3, [pc, #768]	@ (800048c <display7SEG+0x340>)
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	4ac0      	ldr	r2, [pc, #768]	@ (8000490 <display7SEG+0x344>)
 800018e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000192:	2b09      	cmp	r3, #9
 8000194:	f200 80ef 	bhi.w	8000376 <display7SEG+0x22a>
 8000198:	a201      	add	r2, pc, #4	@ (adr r2, 80001a0 <display7SEG+0x54>)
 800019a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800019e:	bf00      	nop
 80001a0:	080001c9 	.word	0x080001c9
 80001a4:	080001f5 	.word	0x080001f5
 80001a8:	08000221 	.word	0x08000221
 80001ac:	0800024d 	.word	0x0800024d
 80001b0:	08000279 	.word	0x08000279
 80001b4:	080002a5 	.word	0x080002a5
 80001b8:	080002d1 	.word	0x080002d1
 80001bc:	080002fd 	.word	0x080002fd
 80001c0:	08000329 	.word	0x08000329
 80001c4:	0800034b 	.word	0x0800034b
   	    	{
   	    	    case 0:
   	    	    	 HAL_GPIO_WritePin(GPIOB, EN0_Pin, RESET);
 80001c8:	2200      	movs	r2, #0
 80001ca:	2180      	movs	r1, #128	@ 0x80
 80001cc:	48b1      	ldr	r0, [pc, #708]	@ (8000494 <display7SEG+0x348>)
 80001ce:	f001 fe46 	bl	8001e5e <HAL_GPIO_WritePin>
   	    	    	 HAL_GPIO_WritePin(GPIOB, EN1_Pin | EN2_Pin | EN3_Pin, SET);
 80001d2:	2201      	movs	r2, #1
 80001d4:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 80001d8:	48ae      	ldr	r0, [pc, #696]	@ (8000494 <display7SEG+0x348>)
 80001da:	f001 fe40 	bl	8001e5e <HAL_GPIO_WritePin>
   	    	    	 HAL_GPIO_WritePin(GPIOB, SEG_6_Pin, SET);
 80001de:	2201      	movs	r2, #1
 80001e0:	2140      	movs	r1, #64	@ 0x40
 80001e2:	48ac      	ldr	r0, [pc, #688]	@ (8000494 <display7SEG+0x348>)
 80001e4:	f001 fe3b 	bl	8001e5e <HAL_GPIO_WritePin>
   	    	    	 HAL_GPIO_WritePin(GPIOB, SEG_0_Pin | SEG_1_Pin | SEG_2_Pin | SEG_3_Pin | SEG_4_Pin | SEG_5_Pin , RESET);
 80001e8:	2200      	movs	r2, #0
 80001ea:	213f      	movs	r1, #63	@ 0x3f
 80001ec:	48a9      	ldr	r0, [pc, #676]	@ (8000494 <display7SEG+0x348>)
 80001ee:	f001 fe36 	bl	8001e5e <HAL_GPIO_WritePin>
   	    	         break;
 80001f2:	e0c1      	b.n	8000378 <display7SEG+0x22c>
   	    	    case 1:
   	    	    	 HAL_GPIO_WritePin(GPIOB, EN0_Pin, RESET);
 80001f4:	2200      	movs	r2, #0
 80001f6:	2180      	movs	r1, #128	@ 0x80
 80001f8:	48a6      	ldr	r0, [pc, #664]	@ (8000494 <display7SEG+0x348>)
 80001fa:	f001 fe30 	bl	8001e5e <HAL_GPIO_WritePin>
   	    	    	 HAL_GPIO_WritePin(GPIOB, EN1_Pin | EN2_Pin | EN3_Pin, SET);
 80001fe:	2201      	movs	r2, #1
 8000200:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8000204:	48a3      	ldr	r0, [pc, #652]	@ (8000494 <display7SEG+0x348>)
 8000206:	f001 fe2a 	bl	8001e5e <HAL_GPIO_WritePin>
   	    	    	 HAL_GPIO_WritePin(GPIOB, SEG_0_Pin | SEG_3_Pin | SEG_4_Pin | SEG_5_Pin | SEG_6_Pin, SET);
 800020a:	2201      	movs	r2, #1
 800020c:	2179      	movs	r1, #121	@ 0x79
 800020e:	48a1      	ldr	r0, [pc, #644]	@ (8000494 <display7SEG+0x348>)
 8000210:	f001 fe25 	bl	8001e5e <HAL_GPIO_WritePin>
   	    	    	 HAL_GPIO_WritePin(GPIOB, SEG_1_Pin | SEG_2_Pin, RESET);
 8000214:	2200      	movs	r2, #0
 8000216:	2106      	movs	r1, #6
 8000218:	489e      	ldr	r0, [pc, #632]	@ (8000494 <display7SEG+0x348>)
 800021a:	f001 fe20 	bl	8001e5e <HAL_GPIO_WritePin>
   	    	    	 break;
 800021e:	e0ab      	b.n	8000378 <display7SEG+0x22c>
   	    	    case 2:
   	    	    	HAL_GPIO_WritePin(GPIOB, EN0_Pin, RESET);
 8000220:	2200      	movs	r2, #0
 8000222:	2180      	movs	r1, #128	@ 0x80
 8000224:	489b      	ldr	r0, [pc, #620]	@ (8000494 <display7SEG+0x348>)
 8000226:	f001 fe1a 	bl	8001e5e <HAL_GPIO_WritePin>
   	    	        HAL_GPIO_WritePin(GPIOB, EN1_Pin | EN2_Pin | EN3_Pin, SET);
 800022a:	2201      	movs	r2, #1
 800022c:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8000230:	4898      	ldr	r0, [pc, #608]	@ (8000494 <display7SEG+0x348>)
 8000232:	f001 fe14 	bl	8001e5e <HAL_GPIO_WritePin>
   	    	    	HAL_GPIO_WritePin(GPIOB, SEG_2_Pin | SEG_5_Pin , SET);
 8000236:	2201      	movs	r2, #1
 8000238:	2124      	movs	r1, #36	@ 0x24
 800023a:	4896      	ldr	r0, [pc, #600]	@ (8000494 <display7SEG+0x348>)
 800023c:	f001 fe0f 	bl	8001e5e <HAL_GPIO_WritePin>
   	    	        HAL_GPIO_WritePin(GPIOB, SEG_0_Pin | SEG_1_Pin |SEG_3_Pin | SEG_4_Pin | SEG_6_Pin, RESET);
 8000240:	2200      	movs	r2, #0
 8000242:	215b      	movs	r1, #91	@ 0x5b
 8000244:	4893      	ldr	r0, [pc, #588]	@ (8000494 <display7SEG+0x348>)
 8000246:	f001 fe0a 	bl	8001e5e <HAL_GPIO_WritePin>
   	    	        break;
 800024a:	e095      	b.n	8000378 <display7SEG+0x22c>
   	    	    case 3:
   	    	    	HAL_GPIO_WritePin(GPIOB, EN0_Pin, RESET);
 800024c:	2200      	movs	r2, #0
 800024e:	2180      	movs	r1, #128	@ 0x80
 8000250:	4890      	ldr	r0, [pc, #576]	@ (8000494 <display7SEG+0x348>)
 8000252:	f001 fe04 	bl	8001e5e <HAL_GPIO_WritePin>
   	    	    	HAL_GPIO_WritePin(GPIOB, EN1_Pin | EN2_Pin | EN3_Pin, SET);
 8000256:	2201      	movs	r2, #1
 8000258:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 800025c:	488d      	ldr	r0, [pc, #564]	@ (8000494 <display7SEG+0x348>)
 800025e:	f001 fdfe 	bl	8001e5e <HAL_GPIO_WritePin>
   	    	        HAL_GPIO_WritePin(GPIOB, SEG_4_Pin | SEG_5_Pin , SET);
 8000262:	2201      	movs	r2, #1
 8000264:	2130      	movs	r1, #48	@ 0x30
 8000266:	488b      	ldr	r0, [pc, #556]	@ (8000494 <display7SEG+0x348>)
 8000268:	f001 fdf9 	bl	8001e5e <HAL_GPIO_WritePin>
   	    	    	HAL_GPIO_WritePin(GPIOB, SEG_0_Pin | SEG_1_Pin |SEG_2_Pin | SEG_3_Pin | SEG_6_Pin, RESET);
 800026c:	2200      	movs	r2, #0
 800026e:	214f      	movs	r1, #79	@ 0x4f
 8000270:	4888      	ldr	r0, [pc, #544]	@ (8000494 <display7SEG+0x348>)
 8000272:	f001 fdf4 	bl	8001e5e <HAL_GPIO_WritePin>
   	    	    	break;
 8000276:	e07f      	b.n	8000378 <display7SEG+0x22c>
   	    	    case 4:
   	    	    	HAL_GPIO_WritePin(GPIOB, EN0_Pin, RESET);
 8000278:	2200      	movs	r2, #0
 800027a:	2180      	movs	r1, #128	@ 0x80
 800027c:	4885      	ldr	r0, [pc, #532]	@ (8000494 <display7SEG+0x348>)
 800027e:	f001 fdee 	bl	8001e5e <HAL_GPIO_WritePin>
   	    	    	HAL_GPIO_WritePin(GPIOB, EN1_Pin | EN2_Pin | EN3_Pin, SET);
 8000282:	2201      	movs	r2, #1
 8000284:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8000288:	4882      	ldr	r0, [pc, #520]	@ (8000494 <display7SEG+0x348>)
 800028a:	f001 fde8 	bl	8001e5e <HAL_GPIO_WritePin>
   	    	    	HAL_GPIO_WritePin(GPIOB, SEG_0_Pin | SEG_3_Pin | SEG_4_Pin , SET);
 800028e:	2201      	movs	r2, #1
 8000290:	2119      	movs	r1, #25
 8000292:	4880      	ldr	r0, [pc, #512]	@ (8000494 <display7SEG+0x348>)
 8000294:	f001 fde3 	bl	8001e5e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_1_Pin |SEG_2_Pin | SEG_5_Pin | SEG_6_Pin, RESET);
 8000298:	2200      	movs	r2, #0
 800029a:	2166      	movs	r1, #102	@ 0x66
 800029c:	487d      	ldr	r0, [pc, #500]	@ (8000494 <display7SEG+0x348>)
 800029e:	f001 fdde 	bl	8001e5e <HAL_GPIO_WritePin>
   	    	    	break;
 80002a2:	e069      	b.n	8000378 <display7SEG+0x22c>
   	    	    case 5:
   	    	    	HAL_GPIO_WritePin(GPIOB, EN0_Pin, RESET);
 80002a4:	2200      	movs	r2, #0
 80002a6:	2180      	movs	r1, #128	@ 0x80
 80002a8:	487a      	ldr	r0, [pc, #488]	@ (8000494 <display7SEG+0x348>)
 80002aa:	f001 fdd8 	bl	8001e5e <HAL_GPIO_WritePin>
   	    	    	HAL_GPIO_WritePin(GPIOB, EN1_Pin | EN2_Pin | EN3_Pin, SET);
 80002ae:	2201      	movs	r2, #1
 80002b0:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 80002b4:	4877      	ldr	r0, [pc, #476]	@ (8000494 <display7SEG+0x348>)
 80002b6:	f001 fdd2 	bl	8001e5e <HAL_GPIO_WritePin>
   	    	        HAL_GPIO_WritePin(GPIOB, SEG_1_Pin | SEG_4_Pin , SET);
 80002ba:	2201      	movs	r2, #1
 80002bc:	2112      	movs	r1, #18
 80002be:	4875      	ldr	r0, [pc, #468]	@ (8000494 <display7SEG+0x348>)
 80002c0:	f001 fdcd 	bl	8001e5e <HAL_GPIO_WritePin>
   	    	    	HAL_GPIO_WritePin(GPIOB, SEG_0_Pin |SEG_2_Pin | SEG_3_Pin | SEG_5_Pin | SEG_6_Pin, RESET);
 80002c4:	2200      	movs	r2, #0
 80002c6:	216d      	movs	r1, #109	@ 0x6d
 80002c8:	4872      	ldr	r0, [pc, #456]	@ (8000494 <display7SEG+0x348>)
 80002ca:	f001 fdc8 	bl	8001e5e <HAL_GPIO_WritePin>
   	    	        break;
 80002ce:	e053      	b.n	8000378 <display7SEG+0x22c>
   	    	    case 6:
   	    	    	HAL_GPIO_WritePin(GPIOB, EN0_Pin, RESET);
 80002d0:	2200      	movs	r2, #0
 80002d2:	2180      	movs	r1, #128	@ 0x80
 80002d4:	486f      	ldr	r0, [pc, #444]	@ (8000494 <display7SEG+0x348>)
 80002d6:	f001 fdc2 	bl	8001e5e <HAL_GPIO_WritePin>
   	    	        HAL_GPIO_WritePin(GPIOB, EN1_Pin | EN2_Pin | EN3_Pin, SET);
 80002da:	2201      	movs	r2, #1
 80002dc:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 80002e0:	486c      	ldr	r0, [pc, #432]	@ (8000494 <display7SEG+0x348>)
 80002e2:	f001 fdbc 	bl	8001e5e <HAL_GPIO_WritePin>
   	    	        HAL_GPIO_WritePin(GPIOB, SEG_1_Pin , SET);
 80002e6:	2201      	movs	r2, #1
 80002e8:	2102      	movs	r1, #2
 80002ea:	486a      	ldr	r0, [pc, #424]	@ (8000494 <display7SEG+0x348>)
 80002ec:	f001 fdb7 	bl	8001e5e <HAL_GPIO_WritePin>
   	    	        HAL_GPIO_WritePin(GPIOB, SEG_0_Pin |SEG_2_Pin | SEG_3_Pin | SEG_4_Pin | SEG_5_Pin | SEG_6_Pin, RESET);
 80002f0:	2200      	movs	r2, #0
 80002f2:	217d      	movs	r1, #125	@ 0x7d
 80002f4:	4867      	ldr	r0, [pc, #412]	@ (8000494 <display7SEG+0x348>)
 80002f6:	f001 fdb2 	bl	8001e5e <HAL_GPIO_WritePin>
   	    	        break;
 80002fa:	e03d      	b.n	8000378 <display7SEG+0x22c>
   	    	    case 7:
   	    	    	HAL_GPIO_WritePin(GPIOB, EN0_Pin, RESET);
 80002fc:	2200      	movs	r2, #0
 80002fe:	2180      	movs	r1, #128	@ 0x80
 8000300:	4864      	ldr	r0, [pc, #400]	@ (8000494 <display7SEG+0x348>)
 8000302:	f001 fdac 	bl	8001e5e <HAL_GPIO_WritePin>
   	    	    	HAL_GPIO_WritePin(GPIOB, EN1_Pin | EN2_Pin | EN3_Pin, SET);
 8000306:	2201      	movs	r2, #1
 8000308:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 800030c:	4861      	ldr	r0, [pc, #388]	@ (8000494 <display7SEG+0x348>)
 800030e:	f001 fda6 	bl	8001e5e <HAL_GPIO_WritePin>
   	    	    	HAL_GPIO_WritePin(GPIOB, SEG_3_Pin | SEG_4_Pin | SEG_5_Pin | SEG_6_Pin, SET);
 8000312:	2201      	movs	r2, #1
 8000314:	2178      	movs	r1, #120	@ 0x78
 8000316:	485f      	ldr	r0, [pc, #380]	@ (8000494 <display7SEG+0x348>)
 8000318:	f001 fda1 	bl	8001e5e <HAL_GPIO_WritePin>
   	    	        HAL_GPIO_WritePin(GPIOB, SEG_0_Pin | SEG_1_Pin | SEG_2_Pin, RESET);
 800031c:	2200      	movs	r2, #0
 800031e:	2107      	movs	r1, #7
 8000320:	485c      	ldr	r0, [pc, #368]	@ (8000494 <display7SEG+0x348>)
 8000322:	f001 fd9c 	bl	8001e5e <HAL_GPIO_WritePin>
   	    	        break;
 8000326:	e027      	b.n	8000378 <display7SEG+0x22c>
   	    	    case 8:
   	    	    	HAL_GPIO_WritePin(GPIOB, EN0_Pin, RESET);
 8000328:	2200      	movs	r2, #0
 800032a:	2180      	movs	r1, #128	@ 0x80
 800032c:	4859      	ldr	r0, [pc, #356]	@ (8000494 <display7SEG+0x348>)
 800032e:	f001 fd96 	bl	8001e5e <HAL_GPIO_WritePin>
   	    	    	HAL_GPIO_WritePin(GPIOB, EN1_Pin | EN2_Pin | EN3_Pin, SET);
 8000332:	2201      	movs	r2, #1
 8000334:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8000338:	4856      	ldr	r0, [pc, #344]	@ (8000494 <display7SEG+0x348>)
 800033a:	f001 fd90 	bl	8001e5e <HAL_GPIO_WritePin>
   	    	        HAL_GPIO_WritePin(GPIOB, SEG_0_Pin | SEG_1_Pin | SEG_2_Pin | SEG_3_Pin | SEG_4_Pin | SEG_5_Pin | SEG_6_Pin , RESET);
 800033e:	2200      	movs	r2, #0
 8000340:	217f      	movs	r1, #127	@ 0x7f
 8000342:	4854      	ldr	r0, [pc, #336]	@ (8000494 <display7SEG+0x348>)
 8000344:	f001 fd8b 	bl	8001e5e <HAL_GPIO_WritePin>
   	    	        break;
 8000348:	e016      	b.n	8000378 <display7SEG+0x22c>
   	    	    case 9:
   	    	    	HAL_GPIO_WritePin(GPIOB, EN0_Pin, RESET);
 800034a:	2200      	movs	r2, #0
 800034c:	2180      	movs	r1, #128	@ 0x80
 800034e:	4851      	ldr	r0, [pc, #324]	@ (8000494 <display7SEG+0x348>)
 8000350:	f001 fd85 	bl	8001e5e <HAL_GPIO_WritePin>
   	    	    	HAL_GPIO_WritePin(GPIOB, EN1_Pin | EN2_Pin | EN3_Pin, SET);
 8000354:	2201      	movs	r2, #1
 8000356:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 800035a:	484e      	ldr	r0, [pc, #312]	@ (8000494 <display7SEG+0x348>)
 800035c:	f001 fd7f 	bl	8001e5e <HAL_GPIO_WritePin>
   	    	    	HAL_GPIO_WritePin(GPIOB, SEG_4_Pin, SET);
 8000360:	2201      	movs	r2, #1
 8000362:	2110      	movs	r1, #16
 8000364:	484b      	ldr	r0, [pc, #300]	@ (8000494 <display7SEG+0x348>)
 8000366:	f001 fd7a 	bl	8001e5e <HAL_GPIO_WritePin>
   	    	    	HAL_GPIO_WritePin(GPIOB, SEG_0_Pin | SEG_1_Pin | SEG_2_Pin | SEG_3_Pin | SEG_5_Pin | SEG_6_Pin , RESET);
 800036a:	2200      	movs	r2, #0
 800036c:	216f      	movs	r1, #111	@ 0x6f
 800036e:	4849      	ldr	r0, [pc, #292]	@ (8000494 <display7SEG+0x348>)
 8000370:	f001 fd75 	bl	8001e5e <HAL_GPIO_WritePin>
   	    	    	break;
 8000374:	e000      	b.n	8000378 <display7SEG+0x22c>
                   default:
                   	break;
 8000376:	bf00      	nop
   	    	}
   	    	index_led = 1;
 8000378:	4b44      	ldr	r3, [pc, #272]	@ (800048c <display7SEG+0x340>)
 800037a:	2201      	movs	r2, #1
 800037c:	601a      	str	r2, [r3, #0]
   	      }
   	      break;
 800037e:	e33c      	b.n	80009fa <display7SEG+0x8ae>
   	    case 1:
   	       if(index_led >= 0 && index_led <= 3)
 8000380:	4b42      	ldr	r3, [pc, #264]	@ (800048c <display7SEG+0x340>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	2b00      	cmp	r3, #0
 8000386:	f2c0 833a 	blt.w	80009fe <display7SEG+0x8b2>
 800038a:	4b40      	ldr	r3, [pc, #256]	@ (800048c <display7SEG+0x340>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	2b03      	cmp	r3, #3
 8000390:	f300 8335 	bgt.w	80009fe <display7SEG+0x8b2>
   	       {
   	    	  switch(led_buffer[index_led])
 8000394:	4b3d      	ldr	r3, [pc, #244]	@ (800048c <display7SEG+0x340>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	4a3d      	ldr	r2, [pc, #244]	@ (8000490 <display7SEG+0x344>)
 800039a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800039e:	2b09      	cmp	r3, #9
 80003a0:	f200 80ff 	bhi.w	80005a2 <display7SEG+0x456>
 80003a4:	a201      	add	r2, pc, #4	@ (adr r2, 80003ac <display7SEG+0x260>)
 80003a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003aa:	bf00      	nop
 80003ac:	080003d5 	.word	0x080003d5
 80003b0:	08000403 	.word	0x08000403
 80003b4:	08000431 	.word	0x08000431
 80003b8:	0800045f 	.word	0x0800045f
 80003bc:	08000499 	.word	0x08000499
 80003c0:	080004c7 	.word	0x080004c7
 80003c4:	080004f5 	.word	0x080004f5
 80003c8:	08000523 	.word	0x08000523
 80003cc:	08000551 	.word	0x08000551
 80003d0:	08000575 	.word	0x08000575
   	    	  {
   	    	    case 0:
   	    		    HAL_GPIO_WritePin(GPIOB, EN1_Pin, RESET);
 80003d4:	2200      	movs	r2, #0
 80003d6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80003da:	482e      	ldr	r0, [pc, #184]	@ (8000494 <display7SEG+0x348>)
 80003dc:	f001 fd3f 	bl	8001e5e <HAL_GPIO_WritePin>
   	    		    HAL_GPIO_WritePin(GPIOB, EN0_Pin | EN2_Pin | EN3_Pin, SET);
 80003e0:	2201      	movs	r2, #1
 80003e2:	f44f 61d0 	mov.w	r1, #1664	@ 0x680
 80003e6:	482b      	ldr	r0, [pc, #172]	@ (8000494 <display7SEG+0x348>)
 80003e8:	f001 fd39 	bl	8001e5e <HAL_GPIO_WritePin>
   	    		    HAL_GPIO_WritePin(GPIOB, SEG_6_Pin, SET);
 80003ec:	2201      	movs	r2, #1
 80003ee:	2140      	movs	r1, #64	@ 0x40
 80003f0:	4828      	ldr	r0, [pc, #160]	@ (8000494 <display7SEG+0x348>)
 80003f2:	f001 fd34 	bl	8001e5e <HAL_GPIO_WritePin>
   	    		    HAL_GPIO_WritePin(GPIOB, SEG_0_Pin | SEG_1_Pin | SEG_2_Pin | SEG_3_Pin | SEG_4_Pin | SEG_5_Pin , RESET);
 80003f6:	2200      	movs	r2, #0
 80003f8:	213f      	movs	r1, #63	@ 0x3f
 80003fa:	4826      	ldr	r0, [pc, #152]	@ (8000494 <display7SEG+0x348>)
 80003fc:	f001 fd2f 	bl	8001e5e <HAL_GPIO_WritePin>
   	    		    break;
 8000400:	e0d0      	b.n	80005a4 <display7SEG+0x458>
   	    		case 1:
   	    			HAL_GPIO_WritePin(GPIOB, EN1_Pin, RESET);
 8000402:	2200      	movs	r2, #0
 8000404:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000408:	4822      	ldr	r0, [pc, #136]	@ (8000494 <display7SEG+0x348>)
 800040a:	f001 fd28 	bl	8001e5e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, EN0_Pin | EN2_Pin | EN3_Pin, SET);
 800040e:	2201      	movs	r2, #1
 8000410:	f44f 61d0 	mov.w	r1, #1664	@ 0x680
 8000414:	481f      	ldr	r0, [pc, #124]	@ (8000494 <display7SEG+0x348>)
 8000416:	f001 fd22 	bl	8001e5e <HAL_GPIO_WritePin>
   	    		    HAL_GPIO_WritePin(GPIOB, SEG_0_Pin | SEG_3_Pin | SEG_4_Pin | SEG_5_Pin | SEG_6_Pin, SET);
 800041a:	2201      	movs	r2, #1
 800041c:	2179      	movs	r1, #121	@ 0x79
 800041e:	481d      	ldr	r0, [pc, #116]	@ (8000494 <display7SEG+0x348>)
 8000420:	f001 fd1d 	bl	8001e5e <HAL_GPIO_WritePin>
   	    		    HAL_GPIO_WritePin(GPIOB, SEG_1_Pin | SEG_2_Pin, RESET);
 8000424:	2200      	movs	r2, #0
 8000426:	2106      	movs	r1, #6
 8000428:	481a      	ldr	r0, [pc, #104]	@ (8000494 <display7SEG+0x348>)
 800042a:	f001 fd18 	bl	8001e5e <HAL_GPIO_WritePin>
   	    		    break;
 800042e:	e0b9      	b.n	80005a4 <display7SEG+0x458>
   	    		case 2:
   					HAL_GPIO_WritePin(GPIOB, EN1_Pin, RESET);
 8000430:	2200      	movs	r2, #0
 8000432:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000436:	4817      	ldr	r0, [pc, #92]	@ (8000494 <display7SEG+0x348>)
 8000438:	f001 fd11 	bl	8001e5e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, EN0_Pin | EN2_Pin | EN3_Pin, SET);
 800043c:	2201      	movs	r2, #1
 800043e:	f44f 61d0 	mov.w	r1, #1664	@ 0x680
 8000442:	4814      	ldr	r0, [pc, #80]	@ (8000494 <display7SEG+0x348>)
 8000444:	f001 fd0b 	bl	8001e5e <HAL_GPIO_WritePin>
   	    		    HAL_GPIO_WritePin(GPIOB, SEG_2_Pin | SEG_5_Pin , SET);
 8000448:	2201      	movs	r2, #1
 800044a:	2124      	movs	r1, #36	@ 0x24
 800044c:	4811      	ldr	r0, [pc, #68]	@ (8000494 <display7SEG+0x348>)
 800044e:	f001 fd06 	bl	8001e5e <HAL_GPIO_WritePin>
   	    		    HAL_GPIO_WritePin(GPIOB, SEG_0_Pin | SEG_1_Pin |SEG_3_Pin | SEG_4_Pin | SEG_6_Pin, RESET);
 8000452:	2200      	movs	r2, #0
 8000454:	215b      	movs	r1, #91	@ 0x5b
 8000456:	480f      	ldr	r0, [pc, #60]	@ (8000494 <display7SEG+0x348>)
 8000458:	f001 fd01 	bl	8001e5e <HAL_GPIO_WritePin>
   	    		    break;
 800045c:	e0a2      	b.n	80005a4 <display7SEG+0x458>
   	    		case 3:
   	    			HAL_GPIO_WritePin(GPIOB, EN1_Pin, RESET);
 800045e:	2200      	movs	r2, #0
 8000460:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000464:	480b      	ldr	r0, [pc, #44]	@ (8000494 <display7SEG+0x348>)
 8000466:	f001 fcfa 	bl	8001e5e <HAL_GPIO_WritePin>
   				    HAL_GPIO_WritePin(GPIOB, EN0_Pin | EN2_Pin | EN3_Pin, SET);
 800046a:	2201      	movs	r2, #1
 800046c:	f44f 61d0 	mov.w	r1, #1664	@ 0x680
 8000470:	4808      	ldr	r0, [pc, #32]	@ (8000494 <display7SEG+0x348>)
 8000472:	f001 fcf4 	bl	8001e5e <HAL_GPIO_WritePin>
   	    		    HAL_GPIO_WritePin(GPIOB, SEG_4_Pin | SEG_5_Pin , SET);
 8000476:	2201      	movs	r2, #1
 8000478:	2130      	movs	r1, #48	@ 0x30
 800047a:	4806      	ldr	r0, [pc, #24]	@ (8000494 <display7SEG+0x348>)
 800047c:	f001 fcef 	bl	8001e5e <HAL_GPIO_WritePin>
   	    		    HAL_GPIO_WritePin(GPIOB, SEG_0_Pin | SEG_1_Pin |SEG_2_Pin | SEG_3_Pin | SEG_6_Pin, RESET);
 8000480:	2200      	movs	r2, #0
 8000482:	214f      	movs	r1, #79	@ 0x4f
 8000484:	4803      	ldr	r0, [pc, #12]	@ (8000494 <display7SEG+0x348>)
 8000486:	f001 fcea 	bl	8001e5e <HAL_GPIO_WritePin>
   	    		    break;
 800048a:	e08b      	b.n	80005a4 <display7SEG+0x458>
 800048c:	20000094 	.word	0x20000094
 8000490:	20000084 	.word	0x20000084
 8000494:	40010c00 	.word	0x40010c00
   	    		case 4:
   	    			HAL_GPIO_WritePin(GPIOB, EN1_Pin, RESET);
 8000498:	2200      	movs	r2, #0
 800049a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800049e:	48cb      	ldr	r0, [pc, #812]	@ (80007cc <display7SEG+0x680>)
 80004a0:	f001 fcdd 	bl	8001e5e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, EN0_Pin | EN2_Pin | EN3_Pin, SET);
 80004a4:	2201      	movs	r2, #1
 80004a6:	f44f 61d0 	mov.w	r1, #1664	@ 0x680
 80004aa:	48c8      	ldr	r0, [pc, #800]	@ (80007cc <display7SEG+0x680>)
 80004ac:	f001 fcd7 	bl	8001e5e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_0_Pin | SEG_3_Pin | SEG_4_Pin , SET);
 80004b0:	2201      	movs	r2, #1
 80004b2:	2119      	movs	r1, #25
 80004b4:	48c5      	ldr	r0, [pc, #788]	@ (80007cc <display7SEG+0x680>)
 80004b6:	f001 fcd2 	bl	8001e5e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_1_Pin |SEG_2_Pin | SEG_5_Pin | SEG_6_Pin, RESET);
 80004ba:	2200      	movs	r2, #0
 80004bc:	2166      	movs	r1, #102	@ 0x66
 80004be:	48c3      	ldr	r0, [pc, #780]	@ (80007cc <display7SEG+0x680>)
 80004c0:	f001 fccd 	bl	8001e5e <HAL_GPIO_WritePin>
   	    		    break;
 80004c4:	e06e      	b.n	80005a4 <display7SEG+0x458>
   	    		case 5:
   	    			HAL_GPIO_WritePin(GPIOB, EN1_Pin, RESET);
 80004c6:	2200      	movs	r2, #0
 80004c8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80004cc:	48bf      	ldr	r0, [pc, #764]	@ (80007cc <display7SEG+0x680>)
 80004ce:	f001 fcc6 	bl	8001e5e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, EN0_Pin | EN2_Pin | EN3_Pin, SET);
 80004d2:	2201      	movs	r2, #1
 80004d4:	f44f 61d0 	mov.w	r1, #1664	@ 0x680
 80004d8:	48bc      	ldr	r0, [pc, #752]	@ (80007cc <display7SEG+0x680>)
 80004da:	f001 fcc0 	bl	8001e5e <HAL_GPIO_WritePin>
   	    		    HAL_GPIO_WritePin(GPIOB, SEG_1_Pin | SEG_4_Pin , SET);
 80004de:	2201      	movs	r2, #1
 80004e0:	2112      	movs	r1, #18
 80004e2:	48ba      	ldr	r0, [pc, #744]	@ (80007cc <display7SEG+0x680>)
 80004e4:	f001 fcbb 	bl	8001e5e <HAL_GPIO_WritePin>
   	    		    HAL_GPIO_WritePin(GPIOB, SEG_0_Pin |SEG_2_Pin | SEG_3_Pin | SEG_5_Pin | SEG_6_Pin, RESET);
 80004e8:	2200      	movs	r2, #0
 80004ea:	216d      	movs	r1, #109	@ 0x6d
 80004ec:	48b7      	ldr	r0, [pc, #732]	@ (80007cc <display7SEG+0x680>)
 80004ee:	f001 fcb6 	bl	8001e5e <HAL_GPIO_WritePin>
   	    		    break;
 80004f2:	e057      	b.n	80005a4 <display7SEG+0x458>
   				case 6:
   					HAL_GPIO_WritePin(GPIOB, EN1_Pin, RESET);
 80004f4:	2200      	movs	r2, #0
 80004f6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80004fa:	48b4      	ldr	r0, [pc, #720]	@ (80007cc <display7SEG+0x680>)
 80004fc:	f001 fcaf 	bl	8001e5e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, EN0_Pin | EN2_Pin | EN3_Pin, SET);
 8000500:	2201      	movs	r2, #1
 8000502:	f44f 61d0 	mov.w	r1, #1664	@ 0x680
 8000506:	48b1      	ldr	r0, [pc, #708]	@ (80007cc <display7SEG+0x680>)
 8000508:	f001 fca9 	bl	8001e5e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_1_Pin , SET);
 800050c:	2201      	movs	r2, #1
 800050e:	2102      	movs	r1, #2
 8000510:	48ae      	ldr	r0, [pc, #696]	@ (80007cc <display7SEG+0x680>)
 8000512:	f001 fca4 	bl	8001e5e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_0_Pin |SEG_2_Pin | SEG_3_Pin | SEG_4_Pin | SEG_5_Pin | SEG_6_Pin, RESET);
 8000516:	2200      	movs	r2, #0
 8000518:	217d      	movs	r1, #125	@ 0x7d
 800051a:	48ac      	ldr	r0, [pc, #688]	@ (80007cc <display7SEG+0x680>)
 800051c:	f001 fc9f 	bl	8001e5e <HAL_GPIO_WritePin>
   	    		    break;
 8000520:	e040      	b.n	80005a4 <display7SEG+0x458>
   				case 7:
   					HAL_GPIO_WritePin(GPIOB, EN1_Pin, RESET);
 8000522:	2200      	movs	r2, #0
 8000524:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000528:	48a8      	ldr	r0, [pc, #672]	@ (80007cc <display7SEG+0x680>)
 800052a:	f001 fc98 	bl	8001e5e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, EN0_Pin | EN2_Pin | EN3_Pin, SET);
 800052e:	2201      	movs	r2, #1
 8000530:	f44f 61d0 	mov.w	r1, #1664	@ 0x680
 8000534:	48a5      	ldr	r0, [pc, #660]	@ (80007cc <display7SEG+0x680>)
 8000536:	f001 fc92 	bl	8001e5e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_3_Pin | SEG_4_Pin | SEG_5_Pin | SEG_6_Pin, SET);
 800053a:	2201      	movs	r2, #1
 800053c:	2178      	movs	r1, #120	@ 0x78
 800053e:	48a3      	ldr	r0, [pc, #652]	@ (80007cc <display7SEG+0x680>)
 8000540:	f001 fc8d 	bl	8001e5e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_0_Pin | SEG_1_Pin | SEG_2_Pin, RESET);
 8000544:	2200      	movs	r2, #0
 8000546:	2107      	movs	r1, #7
 8000548:	48a0      	ldr	r0, [pc, #640]	@ (80007cc <display7SEG+0x680>)
 800054a:	f001 fc88 	bl	8001e5e <HAL_GPIO_WritePin>
   					break;
 800054e:	e029      	b.n	80005a4 <display7SEG+0x458>
   				case 8:
   					HAL_GPIO_WritePin(GPIOB, EN1_Pin, RESET);
 8000550:	2200      	movs	r2, #0
 8000552:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000556:	489d      	ldr	r0, [pc, #628]	@ (80007cc <display7SEG+0x680>)
 8000558:	f001 fc81 	bl	8001e5e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, EN0_Pin | EN2_Pin | EN3_Pin, SET);
 800055c:	2201      	movs	r2, #1
 800055e:	f44f 61d0 	mov.w	r1, #1664	@ 0x680
 8000562:	489a      	ldr	r0, [pc, #616]	@ (80007cc <display7SEG+0x680>)
 8000564:	f001 fc7b 	bl	8001e5e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_0_Pin | SEG_1_Pin | SEG_2_Pin | SEG_3_Pin | SEG_4_Pin | SEG_5_Pin | SEG_6_Pin , RESET);
 8000568:	2200      	movs	r2, #0
 800056a:	217f      	movs	r1, #127	@ 0x7f
 800056c:	4897      	ldr	r0, [pc, #604]	@ (80007cc <display7SEG+0x680>)
 800056e:	f001 fc76 	bl	8001e5e <HAL_GPIO_WritePin>
   					break;
 8000572:	e017      	b.n	80005a4 <display7SEG+0x458>
   				case 9:
   					HAL_GPIO_WritePin(GPIOB, EN1_Pin, RESET);
 8000574:	2200      	movs	r2, #0
 8000576:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800057a:	4894      	ldr	r0, [pc, #592]	@ (80007cc <display7SEG+0x680>)
 800057c:	f001 fc6f 	bl	8001e5e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, EN0_Pin | EN2_Pin | EN3_Pin, SET);
 8000580:	2201      	movs	r2, #1
 8000582:	f44f 61d0 	mov.w	r1, #1664	@ 0x680
 8000586:	4891      	ldr	r0, [pc, #580]	@ (80007cc <display7SEG+0x680>)
 8000588:	f001 fc69 	bl	8001e5e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_4_Pin, SET);
 800058c:	2201      	movs	r2, #1
 800058e:	2110      	movs	r1, #16
 8000590:	488e      	ldr	r0, [pc, #568]	@ (80007cc <display7SEG+0x680>)
 8000592:	f001 fc64 	bl	8001e5e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_0_Pin | SEG_1_Pin | SEG_2_Pin | SEG_3_Pin | SEG_5_Pin | SEG_6_Pin , RESET);
 8000596:	2200      	movs	r2, #0
 8000598:	216f      	movs	r1, #111	@ 0x6f
 800059a:	488c      	ldr	r0, [pc, #560]	@ (80007cc <display7SEG+0x680>)
 800059c:	f001 fc5f 	bl	8001e5e <HAL_GPIO_WritePin>
   					break;
 80005a0:	e000      	b.n	80005a4 <display7SEG+0x458>
   				default:
   					break;
 80005a2:	bf00      	nop
   			}
   	    	  index_led = 2;
 80005a4:	4b8a      	ldr	r3, [pc, #552]	@ (80007d0 <display7SEG+0x684>)
 80005a6:	2202      	movs	r2, #2
 80005a8:	601a      	str	r2, [r3, #0]
   		  }
   	       break;
 80005aa:	e228      	b.n	80009fe <display7SEG+0x8b2>
   	    case 2:
   		   if(index_led >= 0 && index_led <= 3)
 80005ac:	4b88      	ldr	r3, [pc, #544]	@ (80007d0 <display7SEG+0x684>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	f2c0 8226 	blt.w	8000a02 <display7SEG+0x8b6>
 80005b6:	4b86      	ldr	r3, [pc, #536]	@ (80007d0 <display7SEG+0x684>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	2b03      	cmp	r3, #3
 80005bc:	f300 8221 	bgt.w	8000a02 <display7SEG+0x8b6>
   		   {
   			  switch(led_buffer[index_led])
 80005c0:	4b83      	ldr	r3, [pc, #524]	@ (80007d0 <display7SEG+0x684>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a83      	ldr	r2, [pc, #524]	@ (80007d4 <display7SEG+0x688>)
 80005c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005ca:	2b09      	cmp	r3, #9
 80005cc:	f200 80f9 	bhi.w	80007c2 <display7SEG+0x676>
 80005d0:	a201      	add	r2, pc, #4	@ (adr r2, 80005d8 <display7SEG+0x48c>)
 80005d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005d6:	bf00      	nop
 80005d8:	08000601 	.word	0x08000601
 80005dc:	0800062f 	.word	0x0800062f
 80005e0:	0800065d 	.word	0x0800065d
 80005e4:	0800068b 	.word	0x0800068b
 80005e8:	080006b9 	.word	0x080006b9
 80005ec:	080006e7 	.word	0x080006e7
 80005f0:	08000715 	.word	0x08000715
 80005f4:	08000743 	.word	0x08000743
 80005f8:	08000771 	.word	0x08000771
 80005fc:	08000795 	.word	0x08000795
   			  {
   				case 0:
   					HAL_GPIO_WritePin(GPIOB, EN2_Pin, RESET);
 8000600:	2200      	movs	r2, #0
 8000602:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000606:	4871      	ldr	r0, [pc, #452]	@ (80007cc <display7SEG+0x680>)
 8000608:	f001 fc29 	bl	8001e5e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, EN0_Pin | EN1_Pin | EN3_Pin, SET);
 800060c:	2201      	movs	r2, #1
 800060e:	f44f 61b0 	mov.w	r1, #1408	@ 0x580
 8000612:	486e      	ldr	r0, [pc, #440]	@ (80007cc <display7SEG+0x680>)
 8000614:	f001 fc23 	bl	8001e5e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_6_Pin, SET);
 8000618:	2201      	movs	r2, #1
 800061a:	2140      	movs	r1, #64	@ 0x40
 800061c:	486b      	ldr	r0, [pc, #428]	@ (80007cc <display7SEG+0x680>)
 800061e:	f001 fc1e 	bl	8001e5e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_0_Pin | SEG_1_Pin | SEG_2_Pin | SEG_3_Pin | SEG_4_Pin | SEG_5_Pin , RESET);
 8000622:	2200      	movs	r2, #0
 8000624:	213f      	movs	r1, #63	@ 0x3f
 8000626:	4869      	ldr	r0, [pc, #420]	@ (80007cc <display7SEG+0x680>)
 8000628:	f001 fc19 	bl	8001e5e <HAL_GPIO_WritePin>
   					break;
 800062c:	e0ca      	b.n	80007c4 <display7SEG+0x678>
   				case 1:
   					HAL_GPIO_WritePin(GPIOB, EN2_Pin, RESET);
 800062e:	2200      	movs	r2, #0
 8000630:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000634:	4865      	ldr	r0, [pc, #404]	@ (80007cc <display7SEG+0x680>)
 8000636:	f001 fc12 	bl	8001e5e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, EN0_Pin | EN1_Pin | EN3_Pin, SET);
 800063a:	2201      	movs	r2, #1
 800063c:	f44f 61b0 	mov.w	r1, #1408	@ 0x580
 8000640:	4862      	ldr	r0, [pc, #392]	@ (80007cc <display7SEG+0x680>)
 8000642:	f001 fc0c 	bl	8001e5e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_0_Pin | SEG_3_Pin | SEG_4_Pin | SEG_5_Pin | SEG_6_Pin, SET);
 8000646:	2201      	movs	r2, #1
 8000648:	2179      	movs	r1, #121	@ 0x79
 800064a:	4860      	ldr	r0, [pc, #384]	@ (80007cc <display7SEG+0x680>)
 800064c:	f001 fc07 	bl	8001e5e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_1_Pin | SEG_2_Pin, RESET);
 8000650:	2200      	movs	r2, #0
 8000652:	2106      	movs	r1, #6
 8000654:	485d      	ldr	r0, [pc, #372]	@ (80007cc <display7SEG+0x680>)
 8000656:	f001 fc02 	bl	8001e5e <HAL_GPIO_WritePin>
   					break;
 800065a:	e0b3      	b.n	80007c4 <display7SEG+0x678>
   				case 2:
   					HAL_GPIO_WritePin(GPIOB, EN2_Pin, RESET);
 800065c:	2200      	movs	r2, #0
 800065e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000662:	485a      	ldr	r0, [pc, #360]	@ (80007cc <display7SEG+0x680>)
 8000664:	f001 fbfb 	bl	8001e5e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, EN0_Pin | EN1_Pin | EN3_Pin, SET);
 8000668:	2201      	movs	r2, #1
 800066a:	f44f 61b0 	mov.w	r1, #1408	@ 0x580
 800066e:	4857      	ldr	r0, [pc, #348]	@ (80007cc <display7SEG+0x680>)
 8000670:	f001 fbf5 	bl	8001e5e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_2_Pin | SEG_5_Pin , SET);
 8000674:	2201      	movs	r2, #1
 8000676:	2124      	movs	r1, #36	@ 0x24
 8000678:	4854      	ldr	r0, [pc, #336]	@ (80007cc <display7SEG+0x680>)
 800067a:	f001 fbf0 	bl	8001e5e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_0_Pin | SEG_1_Pin |SEG_3_Pin | SEG_4_Pin | SEG_6_Pin, RESET);
 800067e:	2200      	movs	r2, #0
 8000680:	215b      	movs	r1, #91	@ 0x5b
 8000682:	4852      	ldr	r0, [pc, #328]	@ (80007cc <display7SEG+0x680>)
 8000684:	f001 fbeb 	bl	8001e5e <HAL_GPIO_WritePin>
   					break;
 8000688:	e09c      	b.n	80007c4 <display7SEG+0x678>
   				case 3:
   					HAL_GPIO_WritePin(GPIOB, EN2_Pin, RESET);
 800068a:	2200      	movs	r2, #0
 800068c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000690:	484e      	ldr	r0, [pc, #312]	@ (80007cc <display7SEG+0x680>)
 8000692:	f001 fbe4 	bl	8001e5e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, EN0_Pin | EN1_Pin | EN3_Pin, SET);
 8000696:	2201      	movs	r2, #1
 8000698:	f44f 61b0 	mov.w	r1, #1408	@ 0x580
 800069c:	484b      	ldr	r0, [pc, #300]	@ (80007cc <display7SEG+0x680>)
 800069e:	f001 fbde 	bl	8001e5e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_4_Pin | SEG_5_Pin , SET);
 80006a2:	2201      	movs	r2, #1
 80006a4:	2130      	movs	r1, #48	@ 0x30
 80006a6:	4849      	ldr	r0, [pc, #292]	@ (80007cc <display7SEG+0x680>)
 80006a8:	f001 fbd9 	bl	8001e5e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_0_Pin | SEG_1_Pin |SEG_2_Pin | SEG_3_Pin | SEG_6_Pin, RESET);
 80006ac:	2200      	movs	r2, #0
 80006ae:	214f      	movs	r1, #79	@ 0x4f
 80006b0:	4846      	ldr	r0, [pc, #280]	@ (80007cc <display7SEG+0x680>)
 80006b2:	f001 fbd4 	bl	8001e5e <HAL_GPIO_WritePin>
   					break;
 80006b6:	e085      	b.n	80007c4 <display7SEG+0x678>
   				case 4:
   					HAL_GPIO_WritePin(GPIOB, EN2_Pin, RESET);
 80006b8:	2200      	movs	r2, #0
 80006ba:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006be:	4843      	ldr	r0, [pc, #268]	@ (80007cc <display7SEG+0x680>)
 80006c0:	f001 fbcd 	bl	8001e5e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, EN0_Pin | EN1_Pin | EN3_Pin, SET);
 80006c4:	2201      	movs	r2, #1
 80006c6:	f44f 61b0 	mov.w	r1, #1408	@ 0x580
 80006ca:	4840      	ldr	r0, [pc, #256]	@ (80007cc <display7SEG+0x680>)
 80006cc:	f001 fbc7 	bl	8001e5e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_0_Pin | SEG_3_Pin | SEG_4_Pin , SET);
 80006d0:	2201      	movs	r2, #1
 80006d2:	2119      	movs	r1, #25
 80006d4:	483d      	ldr	r0, [pc, #244]	@ (80007cc <display7SEG+0x680>)
 80006d6:	f001 fbc2 	bl	8001e5e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_1_Pin |SEG_2_Pin | SEG_5_Pin | SEG_6_Pin, RESET);
 80006da:	2200      	movs	r2, #0
 80006dc:	2166      	movs	r1, #102	@ 0x66
 80006de:	483b      	ldr	r0, [pc, #236]	@ (80007cc <display7SEG+0x680>)
 80006e0:	f001 fbbd 	bl	8001e5e <HAL_GPIO_WritePin>
   					break;
 80006e4:	e06e      	b.n	80007c4 <display7SEG+0x678>
   				case 5:
   					HAL_GPIO_WritePin(GPIOB, EN2_Pin, RESET);
 80006e6:	2200      	movs	r2, #0
 80006e8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006ec:	4837      	ldr	r0, [pc, #220]	@ (80007cc <display7SEG+0x680>)
 80006ee:	f001 fbb6 	bl	8001e5e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, EN0_Pin | EN1_Pin | EN3_Pin, SET);
 80006f2:	2201      	movs	r2, #1
 80006f4:	f44f 61b0 	mov.w	r1, #1408	@ 0x580
 80006f8:	4834      	ldr	r0, [pc, #208]	@ (80007cc <display7SEG+0x680>)
 80006fa:	f001 fbb0 	bl	8001e5e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_1_Pin | SEG_4_Pin , SET);
 80006fe:	2201      	movs	r2, #1
 8000700:	2112      	movs	r1, #18
 8000702:	4832      	ldr	r0, [pc, #200]	@ (80007cc <display7SEG+0x680>)
 8000704:	f001 fbab 	bl	8001e5e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_0_Pin |SEG_2_Pin | SEG_3_Pin | SEG_5_Pin | SEG_6_Pin, RESET);
 8000708:	2200      	movs	r2, #0
 800070a:	216d      	movs	r1, #109	@ 0x6d
 800070c:	482f      	ldr	r0, [pc, #188]	@ (80007cc <display7SEG+0x680>)
 800070e:	f001 fba6 	bl	8001e5e <HAL_GPIO_WritePin>
   					break;
 8000712:	e057      	b.n	80007c4 <display7SEG+0x678>
   				case 6:
   					HAL_GPIO_WritePin(GPIOB, EN2_Pin, RESET);
 8000714:	2200      	movs	r2, #0
 8000716:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800071a:	482c      	ldr	r0, [pc, #176]	@ (80007cc <display7SEG+0x680>)
 800071c:	f001 fb9f 	bl	8001e5e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, EN0_Pin | EN1_Pin | EN3_Pin, SET);
 8000720:	2201      	movs	r2, #1
 8000722:	f44f 61b0 	mov.w	r1, #1408	@ 0x580
 8000726:	4829      	ldr	r0, [pc, #164]	@ (80007cc <display7SEG+0x680>)
 8000728:	f001 fb99 	bl	8001e5e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_1_Pin , SET);
 800072c:	2201      	movs	r2, #1
 800072e:	2102      	movs	r1, #2
 8000730:	4826      	ldr	r0, [pc, #152]	@ (80007cc <display7SEG+0x680>)
 8000732:	f001 fb94 	bl	8001e5e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_0_Pin |SEG_2_Pin | SEG_3_Pin | SEG_4_Pin | SEG_5_Pin | SEG_6_Pin, RESET);
 8000736:	2200      	movs	r2, #0
 8000738:	217d      	movs	r1, #125	@ 0x7d
 800073a:	4824      	ldr	r0, [pc, #144]	@ (80007cc <display7SEG+0x680>)
 800073c:	f001 fb8f 	bl	8001e5e <HAL_GPIO_WritePin>
   					break;
 8000740:	e040      	b.n	80007c4 <display7SEG+0x678>
   				case 7:
   					HAL_GPIO_WritePin(GPIOB, EN2_Pin, RESET);
 8000742:	2200      	movs	r2, #0
 8000744:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000748:	4820      	ldr	r0, [pc, #128]	@ (80007cc <display7SEG+0x680>)
 800074a:	f001 fb88 	bl	8001e5e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, EN0_Pin | EN1_Pin | EN3_Pin, SET);
 800074e:	2201      	movs	r2, #1
 8000750:	f44f 61b0 	mov.w	r1, #1408	@ 0x580
 8000754:	481d      	ldr	r0, [pc, #116]	@ (80007cc <display7SEG+0x680>)
 8000756:	f001 fb82 	bl	8001e5e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_3_Pin | SEG_4_Pin | SEG_5_Pin | SEG_6_Pin, SET);
 800075a:	2201      	movs	r2, #1
 800075c:	2178      	movs	r1, #120	@ 0x78
 800075e:	481b      	ldr	r0, [pc, #108]	@ (80007cc <display7SEG+0x680>)
 8000760:	f001 fb7d 	bl	8001e5e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_0_Pin | SEG_1_Pin | SEG_2_Pin, RESET);
 8000764:	2200      	movs	r2, #0
 8000766:	2107      	movs	r1, #7
 8000768:	4818      	ldr	r0, [pc, #96]	@ (80007cc <display7SEG+0x680>)
 800076a:	f001 fb78 	bl	8001e5e <HAL_GPIO_WritePin>
   					break;
 800076e:	e029      	b.n	80007c4 <display7SEG+0x678>
   				case 8:
   					HAL_GPIO_WritePin(GPIOB, EN2_Pin, RESET);
 8000770:	2200      	movs	r2, #0
 8000772:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000776:	4815      	ldr	r0, [pc, #84]	@ (80007cc <display7SEG+0x680>)
 8000778:	f001 fb71 	bl	8001e5e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, EN0_Pin | EN1_Pin | EN3_Pin, SET);
 800077c:	2201      	movs	r2, #1
 800077e:	f44f 61b0 	mov.w	r1, #1408	@ 0x580
 8000782:	4812      	ldr	r0, [pc, #72]	@ (80007cc <display7SEG+0x680>)
 8000784:	f001 fb6b 	bl	8001e5e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_0_Pin | SEG_1_Pin | SEG_2_Pin | SEG_3_Pin | SEG_4_Pin | SEG_5_Pin | SEG_6_Pin , RESET);
 8000788:	2200      	movs	r2, #0
 800078a:	217f      	movs	r1, #127	@ 0x7f
 800078c:	480f      	ldr	r0, [pc, #60]	@ (80007cc <display7SEG+0x680>)
 800078e:	f001 fb66 	bl	8001e5e <HAL_GPIO_WritePin>
   					break;
 8000792:	e017      	b.n	80007c4 <display7SEG+0x678>
   				case 9:
   					HAL_GPIO_WritePin(GPIOB, EN2_Pin, RESET);
 8000794:	2200      	movs	r2, #0
 8000796:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800079a:	480c      	ldr	r0, [pc, #48]	@ (80007cc <display7SEG+0x680>)
 800079c:	f001 fb5f 	bl	8001e5e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, EN0_Pin | EN1_Pin | EN3_Pin, SET);
 80007a0:	2201      	movs	r2, #1
 80007a2:	f44f 61b0 	mov.w	r1, #1408	@ 0x580
 80007a6:	4809      	ldr	r0, [pc, #36]	@ (80007cc <display7SEG+0x680>)
 80007a8:	f001 fb59 	bl	8001e5e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_4_Pin, SET);
 80007ac:	2201      	movs	r2, #1
 80007ae:	2110      	movs	r1, #16
 80007b0:	4806      	ldr	r0, [pc, #24]	@ (80007cc <display7SEG+0x680>)
 80007b2:	f001 fb54 	bl	8001e5e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_0_Pin | SEG_1_Pin | SEG_2_Pin | SEG_3_Pin | SEG_5_Pin | SEG_6_Pin , RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	216f      	movs	r1, #111	@ 0x6f
 80007ba:	4804      	ldr	r0, [pc, #16]	@ (80007cc <display7SEG+0x680>)
 80007bc:	f001 fb4f 	bl	8001e5e <HAL_GPIO_WritePin>
   					break;
 80007c0:	e000      	b.n	80007c4 <display7SEG+0x678>
   				default:
   					break;
 80007c2:	bf00      	nop
   			}
   			  index_led = 3;
 80007c4:	4b02      	ldr	r3, [pc, #8]	@ (80007d0 <display7SEG+0x684>)
 80007c6:	2203      	movs	r2, #3
 80007c8:	601a      	str	r2, [r3, #0]
   		  }
   		   break;
 80007ca:	e11a      	b.n	8000a02 <display7SEG+0x8b6>
 80007cc:	40010c00 	.word	0x40010c00
 80007d0:	20000094 	.word	0x20000094
 80007d4:	20000084 	.word	0x20000084
   	    case 3:
   	    	if(index_led >= 0 && index_led <= 3)
 80007d8:	4b8c      	ldr	r3, [pc, #560]	@ (8000a0c <display7SEG+0x8c0>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	f2c0 810a 	blt.w	80009f6 <display7SEG+0x8aa>
 80007e2:	4b8a      	ldr	r3, [pc, #552]	@ (8000a0c <display7SEG+0x8c0>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	2b03      	cmp	r3, #3
 80007e8:	f300 8105 	bgt.w	80009f6 <display7SEG+0x8aa>
   		   {
   			  switch(led_buffer[index_led])
 80007ec:	4b87      	ldr	r3, [pc, #540]	@ (8000a0c <display7SEG+0x8c0>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a87      	ldr	r2, [pc, #540]	@ (8000a10 <display7SEG+0x8c4>)
 80007f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007f6:	2b09      	cmp	r3, #9
 80007f8:	f200 80f9 	bhi.w	80009ee <display7SEG+0x8a2>
 80007fc:	a201      	add	r2, pc, #4	@ (adr r2, 8000804 <display7SEG+0x6b8>)
 80007fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000802:	bf00      	nop
 8000804:	0800082d 	.word	0x0800082d
 8000808:	0800085b 	.word	0x0800085b
 800080c:	08000889 	.word	0x08000889
 8000810:	080008b7 	.word	0x080008b7
 8000814:	080008e5 	.word	0x080008e5
 8000818:	08000913 	.word	0x08000913
 800081c:	08000941 	.word	0x08000941
 8000820:	0800096f 	.word	0x0800096f
 8000824:	0800099d 	.word	0x0800099d
 8000828:	080009c1 	.word	0x080009c1
   			  {
   				case 0:
   					HAL_GPIO_WritePin(GPIOB, EN3_Pin, RESET);
 800082c:	2200      	movs	r2, #0
 800082e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000832:	4878      	ldr	r0, [pc, #480]	@ (8000a14 <display7SEG+0x8c8>)
 8000834:	f001 fb13 	bl	8001e5e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, EN0_Pin | EN1_Pin | EN2_Pin, SET);
 8000838:	2201      	movs	r2, #1
 800083a:	f44f 7160 	mov.w	r1, #896	@ 0x380
 800083e:	4875      	ldr	r0, [pc, #468]	@ (8000a14 <display7SEG+0x8c8>)
 8000840:	f001 fb0d 	bl	8001e5e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_6_Pin, SET);
 8000844:	2201      	movs	r2, #1
 8000846:	2140      	movs	r1, #64	@ 0x40
 8000848:	4872      	ldr	r0, [pc, #456]	@ (8000a14 <display7SEG+0x8c8>)
 800084a:	f001 fb08 	bl	8001e5e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_0_Pin | SEG_1_Pin | SEG_2_Pin | SEG_3_Pin | SEG_4_Pin | SEG_5_Pin , RESET);
 800084e:	2200      	movs	r2, #0
 8000850:	213f      	movs	r1, #63	@ 0x3f
 8000852:	4870      	ldr	r0, [pc, #448]	@ (8000a14 <display7SEG+0x8c8>)
 8000854:	f001 fb03 	bl	8001e5e <HAL_GPIO_WritePin>
   					break;
 8000858:	e0ca      	b.n	80009f0 <display7SEG+0x8a4>
   				case 1:
   					HAL_GPIO_WritePin(GPIOB, EN3_Pin, RESET);
 800085a:	2200      	movs	r2, #0
 800085c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000860:	486c      	ldr	r0, [pc, #432]	@ (8000a14 <display7SEG+0x8c8>)
 8000862:	f001 fafc 	bl	8001e5e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, EN0_Pin | EN1_Pin | EN2_Pin, SET);
 8000866:	2201      	movs	r2, #1
 8000868:	f44f 7160 	mov.w	r1, #896	@ 0x380
 800086c:	4869      	ldr	r0, [pc, #420]	@ (8000a14 <display7SEG+0x8c8>)
 800086e:	f001 faf6 	bl	8001e5e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_0_Pin | SEG_3_Pin | SEG_4_Pin | SEG_5_Pin | SEG_6_Pin, SET);
 8000872:	2201      	movs	r2, #1
 8000874:	2179      	movs	r1, #121	@ 0x79
 8000876:	4867      	ldr	r0, [pc, #412]	@ (8000a14 <display7SEG+0x8c8>)
 8000878:	f001 faf1 	bl	8001e5e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_1_Pin | SEG_2_Pin, RESET);
 800087c:	2200      	movs	r2, #0
 800087e:	2106      	movs	r1, #6
 8000880:	4864      	ldr	r0, [pc, #400]	@ (8000a14 <display7SEG+0x8c8>)
 8000882:	f001 faec 	bl	8001e5e <HAL_GPIO_WritePin>
   					break;
 8000886:	e0b3      	b.n	80009f0 <display7SEG+0x8a4>
   				case 2:
   					HAL_GPIO_WritePin(GPIOB, EN3_Pin, RESET);
 8000888:	2200      	movs	r2, #0
 800088a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800088e:	4861      	ldr	r0, [pc, #388]	@ (8000a14 <display7SEG+0x8c8>)
 8000890:	f001 fae5 	bl	8001e5e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, EN0_Pin | EN1_Pin | EN2_Pin, SET);
 8000894:	2201      	movs	r2, #1
 8000896:	f44f 7160 	mov.w	r1, #896	@ 0x380
 800089a:	485e      	ldr	r0, [pc, #376]	@ (8000a14 <display7SEG+0x8c8>)
 800089c:	f001 fadf 	bl	8001e5e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_2_Pin | SEG_5_Pin , SET);
 80008a0:	2201      	movs	r2, #1
 80008a2:	2124      	movs	r1, #36	@ 0x24
 80008a4:	485b      	ldr	r0, [pc, #364]	@ (8000a14 <display7SEG+0x8c8>)
 80008a6:	f001 fada 	bl	8001e5e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_0_Pin | SEG_1_Pin |SEG_3_Pin | SEG_4_Pin | SEG_6_Pin, RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	215b      	movs	r1, #91	@ 0x5b
 80008ae:	4859      	ldr	r0, [pc, #356]	@ (8000a14 <display7SEG+0x8c8>)
 80008b0:	f001 fad5 	bl	8001e5e <HAL_GPIO_WritePin>
   					break;
 80008b4:	e09c      	b.n	80009f0 <display7SEG+0x8a4>
   				case 3:
   					HAL_GPIO_WritePin(GPIOB, EN3_Pin, RESET);
 80008b6:	2200      	movs	r2, #0
 80008b8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008bc:	4855      	ldr	r0, [pc, #340]	@ (8000a14 <display7SEG+0x8c8>)
 80008be:	f001 face 	bl	8001e5e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, EN0_Pin | EN1_Pin | EN2_Pin, SET);
 80008c2:	2201      	movs	r2, #1
 80008c4:	f44f 7160 	mov.w	r1, #896	@ 0x380
 80008c8:	4852      	ldr	r0, [pc, #328]	@ (8000a14 <display7SEG+0x8c8>)
 80008ca:	f001 fac8 	bl	8001e5e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_4_Pin | SEG_5_Pin , SET);
 80008ce:	2201      	movs	r2, #1
 80008d0:	2130      	movs	r1, #48	@ 0x30
 80008d2:	4850      	ldr	r0, [pc, #320]	@ (8000a14 <display7SEG+0x8c8>)
 80008d4:	f001 fac3 	bl	8001e5e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_0_Pin | SEG_1_Pin |SEG_2_Pin | SEG_3_Pin | SEG_6_Pin, RESET);
 80008d8:	2200      	movs	r2, #0
 80008da:	214f      	movs	r1, #79	@ 0x4f
 80008dc:	484d      	ldr	r0, [pc, #308]	@ (8000a14 <display7SEG+0x8c8>)
 80008de:	f001 fabe 	bl	8001e5e <HAL_GPIO_WritePin>
   					break;
 80008e2:	e085      	b.n	80009f0 <display7SEG+0x8a4>
   				case 4:
   					HAL_GPIO_WritePin(GPIOB, EN3_Pin, RESET);
 80008e4:	2200      	movs	r2, #0
 80008e6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008ea:	484a      	ldr	r0, [pc, #296]	@ (8000a14 <display7SEG+0x8c8>)
 80008ec:	f001 fab7 	bl	8001e5e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, EN0_Pin | EN1_Pin | EN2_Pin, SET);
 80008f0:	2201      	movs	r2, #1
 80008f2:	f44f 7160 	mov.w	r1, #896	@ 0x380
 80008f6:	4847      	ldr	r0, [pc, #284]	@ (8000a14 <display7SEG+0x8c8>)
 80008f8:	f001 fab1 	bl	8001e5e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_0_Pin | SEG_3_Pin | SEG_4_Pin , SET);
 80008fc:	2201      	movs	r2, #1
 80008fe:	2119      	movs	r1, #25
 8000900:	4844      	ldr	r0, [pc, #272]	@ (8000a14 <display7SEG+0x8c8>)
 8000902:	f001 faac 	bl	8001e5e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_1_Pin |SEG_2_Pin | SEG_5_Pin | SEG_6_Pin, RESET);
 8000906:	2200      	movs	r2, #0
 8000908:	2166      	movs	r1, #102	@ 0x66
 800090a:	4842      	ldr	r0, [pc, #264]	@ (8000a14 <display7SEG+0x8c8>)
 800090c:	f001 faa7 	bl	8001e5e <HAL_GPIO_WritePin>
   					break;
 8000910:	e06e      	b.n	80009f0 <display7SEG+0x8a4>
   				case 5:
   					HAL_GPIO_WritePin(GPIOB, EN3_Pin, RESET);
 8000912:	2200      	movs	r2, #0
 8000914:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000918:	483e      	ldr	r0, [pc, #248]	@ (8000a14 <display7SEG+0x8c8>)
 800091a:	f001 faa0 	bl	8001e5e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, EN0_Pin | EN1_Pin | EN2_Pin, SET);
 800091e:	2201      	movs	r2, #1
 8000920:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8000924:	483b      	ldr	r0, [pc, #236]	@ (8000a14 <display7SEG+0x8c8>)
 8000926:	f001 fa9a 	bl	8001e5e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_1_Pin | SEG_4_Pin , SET);
 800092a:	2201      	movs	r2, #1
 800092c:	2112      	movs	r1, #18
 800092e:	4839      	ldr	r0, [pc, #228]	@ (8000a14 <display7SEG+0x8c8>)
 8000930:	f001 fa95 	bl	8001e5e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_0_Pin |SEG_2_Pin | SEG_3_Pin | SEG_5_Pin | SEG_6_Pin, RESET);
 8000934:	2200      	movs	r2, #0
 8000936:	216d      	movs	r1, #109	@ 0x6d
 8000938:	4836      	ldr	r0, [pc, #216]	@ (8000a14 <display7SEG+0x8c8>)
 800093a:	f001 fa90 	bl	8001e5e <HAL_GPIO_WritePin>
   					break;
 800093e:	e057      	b.n	80009f0 <display7SEG+0x8a4>
   				case 6:
   					HAL_GPIO_WritePin(GPIOB, EN3_Pin, RESET);
 8000940:	2200      	movs	r2, #0
 8000942:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000946:	4833      	ldr	r0, [pc, #204]	@ (8000a14 <display7SEG+0x8c8>)
 8000948:	f001 fa89 	bl	8001e5e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, EN0_Pin | EN1_Pin | EN2_Pin, SET);
 800094c:	2201      	movs	r2, #1
 800094e:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8000952:	4830      	ldr	r0, [pc, #192]	@ (8000a14 <display7SEG+0x8c8>)
 8000954:	f001 fa83 	bl	8001e5e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_1_Pin , SET);
 8000958:	2201      	movs	r2, #1
 800095a:	2102      	movs	r1, #2
 800095c:	482d      	ldr	r0, [pc, #180]	@ (8000a14 <display7SEG+0x8c8>)
 800095e:	f001 fa7e 	bl	8001e5e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_0_Pin |SEG_2_Pin | SEG_3_Pin | SEG_4_Pin | SEG_5_Pin | SEG_6_Pin, RESET);
 8000962:	2200      	movs	r2, #0
 8000964:	217d      	movs	r1, #125	@ 0x7d
 8000966:	482b      	ldr	r0, [pc, #172]	@ (8000a14 <display7SEG+0x8c8>)
 8000968:	f001 fa79 	bl	8001e5e <HAL_GPIO_WritePin>
   					break;
 800096c:	e040      	b.n	80009f0 <display7SEG+0x8a4>
   				case 7:
   					HAL_GPIO_WritePin(GPIOB, EN3_Pin, RESET);
 800096e:	2200      	movs	r2, #0
 8000970:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000974:	4827      	ldr	r0, [pc, #156]	@ (8000a14 <display7SEG+0x8c8>)
 8000976:	f001 fa72 	bl	8001e5e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, EN0_Pin | EN1_Pin | EN2_Pin, SET);
 800097a:	2201      	movs	r2, #1
 800097c:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8000980:	4824      	ldr	r0, [pc, #144]	@ (8000a14 <display7SEG+0x8c8>)
 8000982:	f001 fa6c 	bl	8001e5e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_3_Pin | SEG_4_Pin | SEG_5_Pin | SEG_6_Pin, SET);
 8000986:	2201      	movs	r2, #1
 8000988:	2178      	movs	r1, #120	@ 0x78
 800098a:	4822      	ldr	r0, [pc, #136]	@ (8000a14 <display7SEG+0x8c8>)
 800098c:	f001 fa67 	bl	8001e5e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_0_Pin | SEG_1_Pin | SEG_2_Pin, RESET);
 8000990:	2200      	movs	r2, #0
 8000992:	2107      	movs	r1, #7
 8000994:	481f      	ldr	r0, [pc, #124]	@ (8000a14 <display7SEG+0x8c8>)
 8000996:	f001 fa62 	bl	8001e5e <HAL_GPIO_WritePin>
   					break;
 800099a:	e029      	b.n	80009f0 <display7SEG+0x8a4>
   				case 8:
   					HAL_GPIO_WritePin(GPIOB, EN3_Pin, RESET);
 800099c:	2200      	movs	r2, #0
 800099e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009a2:	481c      	ldr	r0, [pc, #112]	@ (8000a14 <display7SEG+0x8c8>)
 80009a4:	f001 fa5b 	bl	8001e5e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, EN0_Pin | EN1_Pin | EN2_Pin, SET);
 80009a8:	2201      	movs	r2, #1
 80009aa:	f44f 7160 	mov.w	r1, #896	@ 0x380
 80009ae:	4819      	ldr	r0, [pc, #100]	@ (8000a14 <display7SEG+0x8c8>)
 80009b0:	f001 fa55 	bl	8001e5e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_0_Pin | SEG_1_Pin | SEG_2_Pin | SEG_3_Pin | SEG_4_Pin | SEG_5_Pin | SEG_6_Pin , RESET);
 80009b4:	2200      	movs	r2, #0
 80009b6:	217f      	movs	r1, #127	@ 0x7f
 80009b8:	4816      	ldr	r0, [pc, #88]	@ (8000a14 <display7SEG+0x8c8>)
 80009ba:	f001 fa50 	bl	8001e5e <HAL_GPIO_WritePin>
   					break;
 80009be:	e017      	b.n	80009f0 <display7SEG+0x8a4>
   				case 9:
   					HAL_GPIO_WritePin(GPIOB, EN3_Pin, RESET);
 80009c0:	2200      	movs	r2, #0
 80009c2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009c6:	4813      	ldr	r0, [pc, #76]	@ (8000a14 <display7SEG+0x8c8>)
 80009c8:	f001 fa49 	bl	8001e5e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, EN0_Pin | EN1_Pin | EN2_Pin, SET);
 80009cc:	2201      	movs	r2, #1
 80009ce:	f44f 7160 	mov.w	r1, #896	@ 0x380
 80009d2:	4810      	ldr	r0, [pc, #64]	@ (8000a14 <display7SEG+0x8c8>)
 80009d4:	f001 fa43 	bl	8001e5e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_4_Pin, SET);
 80009d8:	2201      	movs	r2, #1
 80009da:	2110      	movs	r1, #16
 80009dc:	480d      	ldr	r0, [pc, #52]	@ (8000a14 <display7SEG+0x8c8>)
 80009de:	f001 fa3e 	bl	8001e5e <HAL_GPIO_WritePin>
   					HAL_GPIO_WritePin(GPIOB, SEG_0_Pin | SEG_1_Pin | SEG_2_Pin | SEG_3_Pin | SEG_5_Pin | SEG_6_Pin , RESET);
 80009e2:	2200      	movs	r2, #0
 80009e4:	216f      	movs	r1, #111	@ 0x6f
 80009e6:	480b      	ldr	r0, [pc, #44]	@ (8000a14 <display7SEG+0x8c8>)
 80009e8:	f001 fa39 	bl	8001e5e <HAL_GPIO_WritePin>
   					break;
 80009ec:	e000      	b.n	80009f0 <display7SEG+0x8a4>
   				default:
   					break;
 80009ee:	bf00      	nop
   			}
   			  index_led = 0;
 80009f0:	4b06      	ldr	r3, [pc, #24]	@ (8000a0c <display7SEG+0x8c0>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]
   		  }
   	    default:
   			break;
 80009f6:	bf00      	nop
 80009f8:	e004      	b.n	8000a04 <display7SEG+0x8b8>
   	      break;
 80009fa:	bf00      	nop
 80009fc:	e002      	b.n	8000a04 <display7SEG+0x8b8>
   	       break;
 80009fe:	bf00      	nop
 8000a00:	e000      	b.n	8000a04 <display7SEG+0x8b8>
   		   break;
 8000a02:	bf00      	nop
          }

}
 8000a04:	bf00      	nop
 8000a06:	3708      	adds	r7, #8
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	20000094 	.word	0x20000094
 8000a10:	20000084 	.word	0x20000084
 8000a14:	40010c00 	.word	0x40010c00

08000a18 <update_LED7_buffer_mode>:


void update_LED7_buffer_mode(int num)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
	led_buffer[0] = num / 10;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	4a0d      	ldr	r2, [pc, #52]	@ (8000a58 <update_LED7_buffer_mode+0x40>)
 8000a24:	fb82 1203 	smull	r1, r2, r2, r3
 8000a28:	1092      	asrs	r2, r2, #2
 8000a2a:	17db      	asrs	r3, r3, #31
 8000a2c:	1ad3      	subs	r3, r2, r3
 8000a2e:	4a0b      	ldr	r2, [pc, #44]	@ (8000a5c <update_LED7_buffer_mode+0x44>)
 8000a30:	6013      	str	r3, [r2, #0]
	led_buffer[1] = num % 10;
 8000a32:	6879      	ldr	r1, [r7, #4]
 8000a34:	4b08      	ldr	r3, [pc, #32]	@ (8000a58 <update_LED7_buffer_mode+0x40>)
 8000a36:	fb83 2301 	smull	r2, r3, r3, r1
 8000a3a:	109a      	asrs	r2, r3, #2
 8000a3c:	17cb      	asrs	r3, r1, #31
 8000a3e:	1ad2      	subs	r2, r2, r3
 8000a40:	4613      	mov	r3, r2
 8000a42:	009b      	lsls	r3, r3, #2
 8000a44:	4413      	add	r3, r2
 8000a46:	005b      	lsls	r3, r3, #1
 8000a48:	1aca      	subs	r2, r1, r3
 8000a4a:	4b04      	ldr	r3, [pc, #16]	@ (8000a5c <update_LED7_buffer_mode+0x44>)
 8000a4c:	605a      	str	r2, [r3, #4]
}
 8000a4e:	bf00      	nop
 8000a50:	370c      	adds	r7, #12
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bc80      	pop	{r7}
 8000a56:	4770      	bx	lr
 8000a58:	66666667 	.word	0x66666667
 8000a5c:	20000084 	.word	0x20000084

08000a60 <update_LED7_buffer_counter>:
void update_LED7_buffer_counter(int num)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
	led_buffer[2] = num / 10;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	4a0d      	ldr	r2, [pc, #52]	@ (8000aa0 <update_LED7_buffer_counter+0x40>)
 8000a6c:	fb82 1203 	smull	r1, r2, r2, r3
 8000a70:	1092      	asrs	r2, r2, #2
 8000a72:	17db      	asrs	r3, r3, #31
 8000a74:	1ad3      	subs	r3, r2, r3
 8000a76:	4a0b      	ldr	r2, [pc, #44]	@ (8000aa4 <update_LED7_buffer_counter+0x44>)
 8000a78:	6093      	str	r3, [r2, #8]
	led_buffer[3] = num % 10;
 8000a7a:	6879      	ldr	r1, [r7, #4]
 8000a7c:	4b08      	ldr	r3, [pc, #32]	@ (8000aa0 <update_LED7_buffer_counter+0x40>)
 8000a7e:	fb83 2301 	smull	r2, r3, r3, r1
 8000a82:	109a      	asrs	r2, r3, #2
 8000a84:	17cb      	asrs	r3, r1, #31
 8000a86:	1ad2      	subs	r2, r2, r3
 8000a88:	4613      	mov	r3, r2
 8000a8a:	009b      	lsls	r3, r3, #2
 8000a8c:	4413      	add	r3, r2
 8000a8e:	005b      	lsls	r3, r3, #1
 8000a90:	1aca      	subs	r2, r1, r3
 8000a92:	4b04      	ldr	r3, [pc, #16]	@ (8000aa4 <update_LED7_buffer_counter+0x44>)
 8000a94:	60da      	str	r2, [r3, #12]
}
 8000a96:	bf00      	nop
 8000a98:	370c      	adds	r7, #12
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bc80      	pop	{r7}
 8000a9e:	4770      	bx	lr
 8000aa0:	66666667 	.word	0x66666667
 8000aa4:	20000084 	.word	0x20000084

08000aa8 <update_7seg_led>:

void update_7seg_led()
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
	if (timerLED7_flag)
 8000aac:	4b12      	ldr	r3, [pc, #72]	@ (8000af8 <update_7seg_led+0x50>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d01e      	beq.n	8000af2 <update_7seg_led+0x4a>
	{

		HAL_GPIO_WritePin(GPIOB, EN0_Pin, SET);
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	2180      	movs	r1, #128	@ 0x80
 8000ab8:	4810      	ldr	r0, [pc, #64]	@ (8000afc <update_7seg_led+0x54>)
 8000aba:	f001 f9d0 	bl	8001e5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, EN1_Pin, SET);
 8000abe:	2201      	movs	r2, #1
 8000ac0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ac4:	480d      	ldr	r0, [pc, #52]	@ (8000afc <update_7seg_led+0x54>)
 8000ac6:	f001 f9ca 	bl	8001e5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, EN2_Pin, SET);
 8000aca:	2201      	movs	r2, #1
 8000acc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ad0:	480a      	ldr	r0, [pc, #40]	@ (8000afc <update_7seg_led+0x54>)
 8000ad2:	f001 f9c4 	bl	8001e5e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, EN3_Pin, SET);
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000adc:	4807      	ldr	r0, [pc, #28]	@ (8000afc <update_7seg_led+0x54>)
 8000ade:	f001 f9be 	bl	8001e5e <HAL_GPIO_WritePin>

		display7SEG(index_led);
 8000ae2:	4b07      	ldr	r3, [pc, #28]	@ (8000b00 <update_7seg_led+0x58>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f7ff fb30 	bl	800014c <display7SEG>
		setTimerLED7(FREQUENCY_OF_4_LED7 );
 8000aec:	2064      	movs	r0, #100	@ 0x64
 8000aee:	f000 fe09 	bl	8001704 <setTimerLED7>
	}

}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	2000005c 	.word	0x2000005c
 8000afc:	40010c00 	.word	0x40010c00
 8000b00:	20000094 	.word	0x20000094

08000b04 <blink_1s>:
 */

#include "blink.h"

void blink_1s()
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
	if(timer_pure_flag == 1)
 8000b08:	4b08      	ldr	r3, [pc, #32]	@ (8000b2c <blink_1s+0x28>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d10b      	bne.n	8000b28 <blink_1s+0x24>
	{
		setTimerpure(500);
 8000b10:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000b14:	f000 fd8e 	bl	8001634 <setTimerpure>
		timer_pure_flag = 0;
 8000b18:	4b04      	ldr	r3, [pc, #16]	@ (8000b2c <blink_1s+0x28>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	601a      	str	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOB,Led_Red_Blink_Pin);
 8000b1e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b22:	4803      	ldr	r0, [pc, #12]	@ (8000b30 <blink_1s+0x2c>)
 8000b24:	f001 f9b3 	bl	8001e8e <HAL_GPIO_TogglePin>
	}
}
 8000b28:	bf00      	nop
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	2000004c 	.word	0x2000004c
 8000b30:	40010c00 	.word	0x40010c00

08000b34 <Reset_Display_new_stats>:
enum lightState lightStateHorizontal = Red;
enum lightState lightStateVertical = Green;


void Reset_Display_new_stats()
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0

	lightStateHorizontal = Red;
 8000b38:	4b13      	ldr	r3, [pc, #76]	@ (8000b88 <Reset_Display_new_stats+0x54>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	701a      	strb	r2, [r3, #0]
	Red_counter_horizontal = lightPeriod[Red];
 8000b3e:	4b13      	ldr	r3, [pc, #76]	@ (8000b8c <Reset_Display_new_stats+0x58>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a13      	ldr	r2, [pc, #76]	@ (8000b90 <Reset_Display_new_stats+0x5c>)
 8000b44:	6013      	str	r3, [r2, #0]
	Yellow_counter_horizontal = lightPeriod[Yellow];
 8000b46:	4b11      	ldr	r3, [pc, #68]	@ (8000b8c <Reset_Display_new_stats+0x58>)
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	4a12      	ldr	r2, [pc, #72]	@ (8000b94 <Reset_Display_new_stats+0x60>)
 8000b4c:	6013      	str	r3, [r2, #0]
	Green_counter_horizontal = lightPeriod[Green];
 8000b4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000b8c <Reset_Display_new_stats+0x58>)
 8000b50:	689b      	ldr	r3, [r3, #8]
 8000b52:	4a11      	ldr	r2, [pc, #68]	@ (8000b98 <Reset_Display_new_stats+0x64>)
 8000b54:	6013      	str	r3, [r2, #0]

	lightStateVertical = Green;
 8000b56:	4b11      	ldr	r3, [pc, #68]	@ (8000b9c <Reset_Display_new_stats+0x68>)
 8000b58:	2202      	movs	r2, #2
 8000b5a:	701a      	strb	r2, [r3, #0]
	Red_counter_vertical = lightPeriod[Red];
 8000b5c:	4b0b      	ldr	r3, [pc, #44]	@ (8000b8c <Reset_Display_new_stats+0x58>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a0f      	ldr	r2, [pc, #60]	@ (8000ba0 <Reset_Display_new_stats+0x6c>)
 8000b62:	6013      	str	r3, [r2, #0]
	Yellow_counter_vertical = lightPeriod[Yellow];
 8000b64:	4b09      	ldr	r3, [pc, #36]	@ (8000b8c <Reset_Display_new_stats+0x58>)
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	4a0e      	ldr	r2, [pc, #56]	@ (8000ba4 <Reset_Display_new_stats+0x70>)
 8000b6a:	6013      	str	r3, [r2, #0]
	Green_counter_vertical = lightPeriod[Green];
 8000b6c:	4b07      	ldr	r3, [pc, #28]	@ (8000b8c <Reset_Display_new_stats+0x58>)
 8000b6e:	689b      	ldr	r3, [r3, #8]
 8000b70:	4a0d      	ldr	r2, [pc, #52]	@ (8000ba8 <Reset_Display_new_stats+0x74>)
 8000b72:	6013      	str	r3, [r2, #0]

	clear_all_light();
 8000b74:	f000 f91e 	bl	8000db4 <clear_all_light>


	timerTrafficHorizontal_flag = 1;
 8000b78:	4b0c      	ldr	r3, [pc, #48]	@ (8000bac <Reset_Display_new_stats+0x78>)
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	601a      	str	r2, [r3, #0]
	timerTrafficVertical_flag = 1;
 8000b7e:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb0 <Reset_Display_new_stats+0x7c>)
 8000b80:	2201      	movs	r2, #1
 8000b82:	601a      	str	r2, [r3, #0]

}
 8000b84:	bf00      	nop
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	20000098 	.word	0x20000098
 8000b8c:	20000010 	.word	0x20000010
 8000b90:	2000001c 	.word	0x2000001c
 8000b94:	20000020 	.word	0x20000020
 8000b98:	20000024 	.word	0x20000024
 8000b9c:	20000000 	.word	0x20000000
 8000ba0:	20000028 	.word	0x20000028
 8000ba4:	2000002c 	.word	0x2000002c
 8000ba8:	20000030 	.word	0x20000030
 8000bac:	20000050 	.word	0x20000050
 8000bb0:	20000054 	.word	0x20000054

08000bb4 <displayTrafficLight>:

void displayTrafficLight()
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
	switch (lightStateHorizontal)
 8000bb8:	4b73      	ldr	r3, [pc, #460]	@ (8000d88 <displayTrafficLight+0x1d4>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	2b02      	cmp	r3, #2
 8000bbe:	d027      	beq.n	8000c10 <displayTrafficLight+0x5c>
 8000bc0:	2b02      	cmp	r3, #2
 8000bc2:	dc6c      	bgt.n	8000c9e <displayTrafficLight+0xea>
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d002      	beq.n	8000bce <displayTrafficLight+0x1a>
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	d042      	beq.n	8000c52 <displayTrafficLight+0x9e>
 8000bcc:	e067      	b.n	8000c9e <displayTrafficLight+0xea>
	{
	case Red:
		if (timerTrafficHorizontal_flag)
 8000bce:	4b6f      	ldr	r3, [pc, #444]	@ (8000d8c <displayTrafficLight+0x1d8>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d05e      	beq.n	8000c94 <displayTrafficLight+0xe0>
		{
			setRedH();
 8000bd6:	f000 fc17 	bl	8001408 <setRedH>

			update_LED7_buffer_counter(Red_counter_horizontal);
 8000bda:	4b6d      	ldr	r3, [pc, #436]	@ (8000d90 <displayTrafficLight+0x1dc>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4618      	mov	r0, r3
 8000be0:	f7ff ff3e 	bl	8000a60 <update_LED7_buffer_counter>
			Red_counter_horizontal--;
 8000be4:	4b6a      	ldr	r3, [pc, #424]	@ (8000d90 <displayTrafficLight+0x1dc>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	3b01      	subs	r3, #1
 8000bea:	4a69      	ldr	r2, [pc, #420]	@ (8000d90 <displayTrafficLight+0x1dc>)
 8000bec:	6013      	str	r3, [r2, #0]

			if (Red_counter_horizontal < 0)
 8000bee:	4b68      	ldr	r3, [pc, #416]	@ (8000d90 <displayTrafficLight+0x1dc>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	da07      	bge.n	8000c06 <displayTrafficLight+0x52>
			{
				lightStateHorizontal = Green;
 8000bf6:	4b64      	ldr	r3, [pc, #400]	@ (8000d88 <displayTrafficLight+0x1d4>)
 8000bf8:	2202      	movs	r2, #2
 8000bfa:	701a      	strb	r2, [r3, #0]
				Red_counter_horizontal = lightPeriod[Red];
 8000bfc:	4b65      	ldr	r3, [pc, #404]	@ (8000d94 <displayTrafficLight+0x1e0>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a63      	ldr	r2, [pc, #396]	@ (8000d90 <displayTrafficLight+0x1dc>)
 8000c02:	6013      	str	r3, [r2, #0]
			{
				setTimerTrafficHorizontal(LIGHT_DURATION);
			}
		}

		break;
 8000c04:	e046      	b.n	8000c94 <displayTrafficLight+0xe0>
				setTimerTrafficHorizontal(LIGHT_DURATION);
 8000c06:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c0a:	f000 fd2d 	bl	8001668 <setTimerTrafficHorizontal>
		break;
 8000c0e:	e041      	b.n	8000c94 <displayTrafficLight+0xe0>

	case Green:
		if (timerTrafficHorizontal_flag)
 8000c10:	4b5e      	ldr	r3, [pc, #376]	@ (8000d8c <displayTrafficLight+0x1d8>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d03f      	beq.n	8000c98 <displayTrafficLight+0xe4>
		{
			setGreenH();
 8000c18:	f000 fc22 	bl	8001460 <setGreenH>

			update_LED7_buffer_counter(Green_counter_horizontal);
 8000c1c:	4b5e      	ldr	r3, [pc, #376]	@ (8000d98 <displayTrafficLight+0x1e4>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff ff1d 	bl	8000a60 <update_LED7_buffer_counter>
			Green_counter_horizontal--;
 8000c26:	4b5c      	ldr	r3, [pc, #368]	@ (8000d98 <displayTrafficLight+0x1e4>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	3b01      	subs	r3, #1
 8000c2c:	4a5a      	ldr	r2, [pc, #360]	@ (8000d98 <displayTrafficLight+0x1e4>)
 8000c2e:	6013      	str	r3, [r2, #0]

			if (Green_counter_horizontal < 0)
 8000c30:	4b59      	ldr	r3, [pc, #356]	@ (8000d98 <displayTrafficLight+0x1e4>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	da07      	bge.n	8000c48 <displayTrafficLight+0x94>
			{
				lightStateHorizontal = Yellow;
 8000c38:	4b53      	ldr	r3, [pc, #332]	@ (8000d88 <displayTrafficLight+0x1d4>)
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	701a      	strb	r2, [r3, #0]
				Green_counter_horizontal = lightPeriod[Green];
 8000c3e:	4b55      	ldr	r3, [pc, #340]	@ (8000d94 <displayTrafficLight+0x1e0>)
 8000c40:	689b      	ldr	r3, [r3, #8]
 8000c42:	4a55      	ldr	r2, [pc, #340]	@ (8000d98 <displayTrafficLight+0x1e4>)
 8000c44:	6013      	str	r3, [r2, #0]
			{
				setTimerTrafficHorizontal(LIGHT_DURATION);
			}
		}

		break;
 8000c46:	e027      	b.n	8000c98 <displayTrafficLight+0xe4>
				setTimerTrafficHorizontal(LIGHT_DURATION);
 8000c48:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c4c:	f000 fd0c 	bl	8001668 <setTimerTrafficHorizontal>
		break;
 8000c50:	e022      	b.n	8000c98 <displayTrafficLight+0xe4>

	case Yellow:
		if (timerTrafficHorizontal_flag)
 8000c52:	4b4e      	ldr	r3, [pc, #312]	@ (8000d8c <displayTrafficLight+0x1d8>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d020      	beq.n	8000c9c <displayTrafficLight+0xe8>
		{
			setYellowH();
 8000c5a:	f000 fbeb 	bl	8001434 <setYellowH>

			update_LED7_buffer_counter(Yellow_counter_horizontal);
 8000c5e:	4b4f      	ldr	r3, [pc, #316]	@ (8000d9c <displayTrafficLight+0x1e8>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4618      	mov	r0, r3
 8000c64:	f7ff fefc 	bl	8000a60 <update_LED7_buffer_counter>
			Yellow_counter_horizontal--;
 8000c68:	4b4c      	ldr	r3, [pc, #304]	@ (8000d9c <displayTrafficLight+0x1e8>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	3b01      	subs	r3, #1
 8000c6e:	4a4b      	ldr	r2, [pc, #300]	@ (8000d9c <displayTrafficLight+0x1e8>)
 8000c70:	6013      	str	r3, [r2, #0]

			if (Yellow_counter_horizontal < 0)
 8000c72:	4b4a      	ldr	r3, [pc, #296]	@ (8000d9c <displayTrafficLight+0x1e8>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	da07      	bge.n	8000c8a <displayTrafficLight+0xd6>
			{
				lightStateHorizontal = Red;
 8000c7a:	4b43      	ldr	r3, [pc, #268]	@ (8000d88 <displayTrafficLight+0x1d4>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	701a      	strb	r2, [r3, #0]
				Yellow_counter_horizontal = lightPeriod[Yellow];
 8000c80:	4b44      	ldr	r3, [pc, #272]	@ (8000d94 <displayTrafficLight+0x1e0>)
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	4a45      	ldr	r2, [pc, #276]	@ (8000d9c <displayTrafficLight+0x1e8>)
 8000c86:	6013      	str	r3, [r2, #0]
			else
			{
				setTimerTrafficHorizontal(LIGHT_DURATION);
			}
		}
		break;
 8000c88:	e008      	b.n	8000c9c <displayTrafficLight+0xe8>
				setTimerTrafficHorizontal(LIGHT_DURATION);
 8000c8a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c8e:	f000 fceb 	bl	8001668 <setTimerTrafficHorizontal>
		break;
 8000c92:	e003      	b.n	8000c9c <displayTrafficLight+0xe8>
		break;
 8000c94:	bf00      	nop
 8000c96:	e002      	b.n	8000c9e <displayTrafficLight+0xea>
		break;
 8000c98:	bf00      	nop
 8000c9a:	e000      	b.n	8000c9e <displayTrafficLight+0xea>
		break;
 8000c9c:	bf00      	nop
	}

	switch (lightStateVertical)
 8000c9e:	4b40      	ldr	r3, [pc, #256]	@ (8000da0 <displayTrafficLight+0x1ec>)
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	2b02      	cmp	r3, #2
 8000ca4:	d027      	beq.n	8000cf6 <displayTrafficLight+0x142>
 8000ca6:	2b02      	cmp	r3, #2
 8000ca8:	dc6c      	bgt.n	8000d84 <displayTrafficLight+0x1d0>
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d002      	beq.n	8000cb4 <displayTrafficLight+0x100>
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	d042      	beq.n	8000d38 <displayTrafficLight+0x184>
				setTimerTrafficVertical(LIGHT_DURATION);
			}
		}
		break;
	}
}
 8000cb2:	e067      	b.n	8000d84 <displayTrafficLight+0x1d0>
		if (timerTrafficVertical_flag)
 8000cb4:	4b3b      	ldr	r3, [pc, #236]	@ (8000da4 <displayTrafficLight+0x1f0>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d05e      	beq.n	8000d7a <displayTrafficLight+0x1c6>
			setRedV();
 8000cbc:	f000 fbe6 	bl	800148c <setRedV>
			update_LED7_buffer_mode(Red_counter_vertical);
 8000cc0:	4b39      	ldr	r3, [pc, #228]	@ (8000da8 <displayTrafficLight+0x1f4>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff fea7 	bl	8000a18 <update_LED7_buffer_mode>
			Red_counter_vertical--;
 8000cca:	4b37      	ldr	r3, [pc, #220]	@ (8000da8 <displayTrafficLight+0x1f4>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	3b01      	subs	r3, #1
 8000cd0:	4a35      	ldr	r2, [pc, #212]	@ (8000da8 <displayTrafficLight+0x1f4>)
 8000cd2:	6013      	str	r3, [r2, #0]
			if (Red_counter_vertical < 0)
 8000cd4:	4b34      	ldr	r3, [pc, #208]	@ (8000da8 <displayTrafficLight+0x1f4>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	da07      	bge.n	8000cec <displayTrafficLight+0x138>
				lightStateVertical = Green;
 8000cdc:	4b30      	ldr	r3, [pc, #192]	@ (8000da0 <displayTrafficLight+0x1ec>)
 8000cde:	2202      	movs	r2, #2
 8000ce0:	701a      	strb	r2, [r3, #0]
				Red_counter_vertical = lightPeriod[Red];
 8000ce2:	4b2c      	ldr	r3, [pc, #176]	@ (8000d94 <displayTrafficLight+0x1e0>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a30      	ldr	r2, [pc, #192]	@ (8000da8 <displayTrafficLight+0x1f4>)
 8000ce8:	6013      	str	r3, [r2, #0]
		break;
 8000cea:	e046      	b.n	8000d7a <displayTrafficLight+0x1c6>
				setTimerTrafficVertical(LIGHT_DURATION);
 8000cec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000cf0:	f000 fcd4 	bl	800169c <setTimerTrafficVertical>
		break;
 8000cf4:	e041      	b.n	8000d7a <displayTrafficLight+0x1c6>
		if (timerTrafficVertical_flag)
 8000cf6:	4b2b      	ldr	r3, [pc, #172]	@ (8000da4 <displayTrafficLight+0x1f0>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d03f      	beq.n	8000d7e <displayTrafficLight+0x1ca>
			setGreenV();
 8000cfe:	f000 fbf1 	bl	80014e4 <setGreenV>
			update_LED7_buffer_mode(Green_counter_vertical);
 8000d02:	4b2a      	ldr	r3, [pc, #168]	@ (8000dac <displayTrafficLight+0x1f8>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4618      	mov	r0, r3
 8000d08:	f7ff fe86 	bl	8000a18 <update_LED7_buffer_mode>
			Green_counter_vertical--;
 8000d0c:	4b27      	ldr	r3, [pc, #156]	@ (8000dac <displayTrafficLight+0x1f8>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	3b01      	subs	r3, #1
 8000d12:	4a26      	ldr	r2, [pc, #152]	@ (8000dac <displayTrafficLight+0x1f8>)
 8000d14:	6013      	str	r3, [r2, #0]
			if (Green_counter_vertical < 0)
 8000d16:	4b25      	ldr	r3, [pc, #148]	@ (8000dac <displayTrafficLight+0x1f8>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	da07      	bge.n	8000d2e <displayTrafficLight+0x17a>
				lightStateVertical = Yellow;
 8000d1e:	4b20      	ldr	r3, [pc, #128]	@ (8000da0 <displayTrafficLight+0x1ec>)
 8000d20:	2201      	movs	r2, #1
 8000d22:	701a      	strb	r2, [r3, #0]
				Green_counter_vertical = lightPeriod[Green];
 8000d24:	4b1b      	ldr	r3, [pc, #108]	@ (8000d94 <displayTrafficLight+0x1e0>)
 8000d26:	689b      	ldr	r3, [r3, #8]
 8000d28:	4a20      	ldr	r2, [pc, #128]	@ (8000dac <displayTrafficLight+0x1f8>)
 8000d2a:	6013      	str	r3, [r2, #0]
		break;
 8000d2c:	e027      	b.n	8000d7e <displayTrafficLight+0x1ca>
				setTimerTrafficVertical(LIGHT_DURATION);
 8000d2e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d32:	f000 fcb3 	bl	800169c <setTimerTrafficVertical>
		break;
 8000d36:	e022      	b.n	8000d7e <displayTrafficLight+0x1ca>
		if (timerTrafficVertical_flag)
 8000d38:	4b1a      	ldr	r3, [pc, #104]	@ (8000da4 <displayTrafficLight+0x1f0>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d020      	beq.n	8000d82 <displayTrafficLight+0x1ce>
			setYellowV();
 8000d40:	f000 fbba 	bl	80014b8 <setYellowV>
			update_LED7_buffer_mode(Yellow_counter_vertical);
 8000d44:	4b1a      	ldr	r3, [pc, #104]	@ (8000db0 <displayTrafficLight+0x1fc>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff fe65 	bl	8000a18 <update_LED7_buffer_mode>
			Yellow_counter_vertical--;
 8000d4e:	4b18      	ldr	r3, [pc, #96]	@ (8000db0 <displayTrafficLight+0x1fc>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	3b01      	subs	r3, #1
 8000d54:	4a16      	ldr	r2, [pc, #88]	@ (8000db0 <displayTrafficLight+0x1fc>)
 8000d56:	6013      	str	r3, [r2, #0]
			if (Yellow_counter_vertical < 0)
 8000d58:	4b15      	ldr	r3, [pc, #84]	@ (8000db0 <displayTrafficLight+0x1fc>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	da07      	bge.n	8000d70 <displayTrafficLight+0x1bc>
				lightStateVertical = Red;
 8000d60:	4b0f      	ldr	r3, [pc, #60]	@ (8000da0 <displayTrafficLight+0x1ec>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	701a      	strb	r2, [r3, #0]
				Yellow_counter_vertical = lightPeriod[Yellow];
 8000d66:	4b0b      	ldr	r3, [pc, #44]	@ (8000d94 <displayTrafficLight+0x1e0>)
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	4a11      	ldr	r2, [pc, #68]	@ (8000db0 <displayTrafficLight+0x1fc>)
 8000d6c:	6013      	str	r3, [r2, #0]
		break;
 8000d6e:	e008      	b.n	8000d82 <displayTrafficLight+0x1ce>
				setTimerTrafficVertical(LIGHT_DURATION);
 8000d70:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d74:	f000 fc92 	bl	800169c <setTimerTrafficVertical>
		break;
 8000d78:	e003      	b.n	8000d82 <displayTrafficLight+0x1ce>
		break;
 8000d7a:	bf00      	nop
 8000d7c:	e002      	b.n	8000d84 <displayTrafficLight+0x1d0>
		break;
 8000d7e:	bf00      	nop
 8000d80:	e000      	b.n	8000d84 <displayTrafficLight+0x1d0>
		break;
 8000d82:	bf00      	nop
}
 8000d84:	bf00      	nop
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	20000098 	.word	0x20000098
 8000d8c:	20000050 	.word	0x20000050
 8000d90:	2000001c 	.word	0x2000001c
 8000d94:	20000010 	.word	0x20000010
 8000d98:	20000024 	.word	0x20000024
 8000d9c:	20000020 	.word	0x20000020
 8000da0:	20000000 	.word	0x20000000
 8000da4:	20000054 	.word	0x20000054
 8000da8:	20000028 	.word	0x20000028
 8000dac:	20000030 	.word	0x20000030
 8000db0:	2000002c 	.word	0x2000002c

08000db4 <clear_all_light>:

enum Mode mode = DISPLAY;


void clear_all_light(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, Red_H_Pin, SET);
 8000db8:	2201      	movs	r2, #1
 8000dba:	2102      	movs	r1, #2
 8000dbc:	480e      	ldr	r0, [pc, #56]	@ (8000df8 <clear_all_light+0x44>)
 8000dbe:	f001 f84e 	bl	8001e5e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, Yellow_H_Pin, SET);
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	2104      	movs	r1, #4
 8000dc6:	480c      	ldr	r0, [pc, #48]	@ (8000df8 <clear_all_light+0x44>)
 8000dc8:	f001 f849 	bl	8001e5e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, Green_H_Pin, SET);
 8000dcc:	2201      	movs	r2, #1
 8000dce:	2108      	movs	r1, #8
 8000dd0:	4809      	ldr	r0, [pc, #36]	@ (8000df8 <clear_all_light+0x44>)
 8000dd2:	f001 f844 	bl	8001e5e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, Red_V_Pin, SET);
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	2110      	movs	r1, #16
 8000dda:	4807      	ldr	r0, [pc, #28]	@ (8000df8 <clear_all_light+0x44>)
 8000ddc:	f001 f83f 	bl	8001e5e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, Green_V_Pin, SET);
 8000de0:	2201      	movs	r2, #1
 8000de2:	2140      	movs	r1, #64	@ 0x40
 8000de4:	4804      	ldr	r0, [pc, #16]	@ (8000df8 <clear_all_light+0x44>)
 8000de6:	f001 f83a 	bl	8001e5e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, Yellow_V_Pin, SET);
 8000dea:	2201      	movs	r2, #1
 8000dec:	2120      	movs	r1, #32
 8000dee:	4802      	ldr	r0, [pc, #8]	@ (8000df8 <clear_all_light+0x44>)
 8000df0:	f001 f835 	bl	8001e5e <HAL_GPIO_WritePin>
}
 8000df4:	bf00      	nop
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	40010800 	.word	0x40010800

08000dfc <blinkingLight>:

void blinkingLight(uint8_t light)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	71fb      	strb	r3, [r7, #7]
	if (timerBlink_flag == 1)
 8000e06:	4b1d      	ldr	r3, [pc, #116]	@ (8000e7c <blinkingLight+0x80>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d131      	bne.n	8000e72 <blinkingLight+0x76>
	{
		switch (light)
 8000e0e:	79fb      	ldrb	r3, [r7, #7]
 8000e10:	2b02      	cmp	r3, #2
 8000e12:	d013      	beq.n	8000e3c <blinkingLight+0x40>
 8000e14:	2b02      	cmp	r3, #2
 8000e16:	dc2b      	bgt.n	8000e70 <blinkingLight+0x74>
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d002      	beq.n	8000e22 <blinkingLight+0x26>
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d01a      	beq.n	8000e56 <blinkingLight+0x5a>
			HAL_GPIO_TogglePin(GPIOA, Yellow_V_Pin);
			setTimerBlink(500);
			break;

		default:
			break;
 8000e20:	e026      	b.n	8000e70 <blinkingLight+0x74>
			HAL_GPIO_TogglePin(GPIOA, Red_H_Pin);
 8000e22:	2102      	movs	r1, #2
 8000e24:	4816      	ldr	r0, [pc, #88]	@ (8000e80 <blinkingLight+0x84>)
 8000e26:	f001 f832 	bl	8001e8e <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOA, Red_V_Pin);
 8000e2a:	2110      	movs	r1, #16
 8000e2c:	4814      	ldr	r0, [pc, #80]	@ (8000e80 <blinkingLight+0x84>)
 8000e2e:	f001 f82e 	bl	8001e8e <HAL_GPIO_TogglePin>
			setTimerBlink(500);
 8000e32:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e36:	f000 fc4b 	bl	80016d0 <setTimerBlink>
			break;
 8000e3a:	e01a      	b.n	8000e72 <blinkingLight+0x76>
			HAL_GPIO_TogglePin(GPIOA, Green_H_Pin);
 8000e3c:	2108      	movs	r1, #8
 8000e3e:	4810      	ldr	r0, [pc, #64]	@ (8000e80 <blinkingLight+0x84>)
 8000e40:	f001 f825 	bl	8001e8e <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOA, Green_V_Pin);
 8000e44:	2140      	movs	r1, #64	@ 0x40
 8000e46:	480e      	ldr	r0, [pc, #56]	@ (8000e80 <blinkingLight+0x84>)
 8000e48:	f001 f821 	bl	8001e8e <HAL_GPIO_TogglePin>
			setTimerBlink(500);
 8000e4c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e50:	f000 fc3e 	bl	80016d0 <setTimerBlink>
			break;
 8000e54:	e00d      	b.n	8000e72 <blinkingLight+0x76>
			HAL_GPIO_TogglePin(GPIOA, Yellow_H_Pin);
 8000e56:	2104      	movs	r1, #4
 8000e58:	4809      	ldr	r0, [pc, #36]	@ (8000e80 <blinkingLight+0x84>)
 8000e5a:	f001 f818 	bl	8001e8e <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOA, Yellow_V_Pin);
 8000e5e:	2120      	movs	r1, #32
 8000e60:	4807      	ldr	r0, [pc, #28]	@ (8000e80 <blinkingLight+0x84>)
 8000e62:	f001 f814 	bl	8001e8e <HAL_GPIO_TogglePin>
			setTimerBlink(500);
 8000e66:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e6a:	f000 fc31 	bl	80016d0 <setTimerBlink>
			break;
 8000e6e:	e000      	b.n	8000e72 <blinkingLight+0x76>
			break;
 8000e70:	bf00      	nop
		}
	}
}
 8000e72:	bf00      	nop
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	20000058 	.word	0x20000058
 8000e80:	40010800 	.word	0x40010800

08000e84 <prepare_for_change_mode>:

void prepare_for_change_mode(int index)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
	clear_all_light();
 8000e8c:	f7ff ff92 	bl	8000db4 <clear_all_light>
	for (int i = 0; i < No_OF_BUTTON; i++)
 8000e90:	2300      	movs	r3, #0
 8000e92:	60fb      	str	r3, [r7, #12]
 8000e94:	e007      	b.n	8000ea6 <prepare_for_change_mode+0x22>
	{
		buttonIsPressedAndReleased[i] = 0;
 8000e96:	4a11      	ldr	r2, [pc, #68]	@ (8000edc <prepare_for_change_mode+0x58>)
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < No_OF_BUTTON; i++)
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	60fb      	str	r3, [r7, #12]
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	2b02      	cmp	r3, #2
 8000eaa:	ddf4      	ble.n	8000e96 <prepare_for_change_mode+0x12>
	}
	light_period_modify_buffer[index] = lightPeriod[index];
 8000eac:	4a0c      	ldr	r2, [pc, #48]	@ (8000ee0 <prepare_for_change_mode+0x5c>)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000eb4:	490b      	ldr	r1, [pc, #44]	@ (8000ee4 <prepare_for_change_mode+0x60>)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	update_LED7_buffer_mode(index + 2); // display the mode
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	3302      	adds	r3, #2
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff fda9 	bl	8000a18 <update_LED7_buffer_mode>
	update_LED7_buffer_counter(light_period_modify_buffer[index]);
 8000ec6:	4a07      	ldr	r2, [pc, #28]	@ (8000ee4 <prepare_for_change_mode+0x60>)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff fdc6 	bl	8000a60 <update_LED7_buffer_counter>
}
 8000ed4:	bf00      	nop
 8000ed6:	3710      	adds	r7, #16
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	2000009c 	.word	0x2000009c
 8000ee0:	20000010 	.word	0x20000010
 8000ee4:	20000004 	.word	0x20000004

08000ee8 <fsm_change_mode>:


void fsm_change_mode(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
	update_7seg_led();
 8000eec:	f7ff fddc 	bl	8000aa8 <update_7seg_led>
	  blink_1s();
 8000ef0:	f7ff fe08 	bl	8000b04 <blink_1s>


	switch (mode)
 8000ef4:	4b2e      	ldr	r3, [pc, #184]	@ (8000fb0 <fsm_change_mode+0xc8>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	2b03      	cmp	r3, #3
 8000efa:	d856      	bhi.n	8000faa <fsm_change_mode+0xc2>
 8000efc:	a201      	add	r2, pc, #4	@ (adr r2, 8000f04 <fsm_change_mode+0x1c>)
 8000efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f02:	bf00      	nop
 8000f04:	08000f15 	.word	0x08000f15
 8000f08:	08000f35 	.word	0x08000f35
 8000f0c:	08000f5d 	.word	0x08000f5d
 8000f10:	08000f85 	.word	0x08000f85
	{
	case DISPLAY:
		if (is_button_pressed_and_released(0))
 8000f14:	2000      	movs	r0, #0
 8000f16:	f000 f8d9 	bl	80010cc <is_button_pressed_and_released>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d006      	beq.n	8000f2e <fsm_change_mode+0x46>
		{

			mode = Change_Red_counter;
 8000f20:	4b23      	ldr	r3, [pc, #140]	@ (8000fb0 <fsm_change_mode+0xc8>)
 8000f22:	2201      	movs	r2, #1
 8000f24:	701a      	strb	r2, [r3, #0]
			prepare_for_change_mode(Red);
 8000f26:	2000      	movs	r0, #0
 8000f28:	f7ff ffac 	bl	8000e84 <prepare_for_change_mode>
		else
		{
			displayTrafficLight();

		}
		break;
 8000f2c:	e03d      	b.n	8000faa <fsm_change_mode+0xc2>
			displayTrafficLight();
 8000f2e:	f7ff fe41 	bl	8000bb4 <displayTrafficLight>
		break;
 8000f32:	e03a      	b.n	8000faa <fsm_change_mode+0xc2>

	case Change_Red_counter:
		if (is_button_pressed_and_released(0))
 8000f34:	2000      	movs	r0, #0
 8000f36:	f000 f8c9 	bl	80010cc <is_button_pressed_and_released>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d006      	beq.n	8000f4e <fsm_change_mode+0x66>
		{
			mode = Change_Yellow_counter;
 8000f40:	4b1b      	ldr	r3, [pc, #108]	@ (8000fb0 <fsm_change_mode+0xc8>)
 8000f42:	2202      	movs	r2, #2
 8000f44:	701a      	strb	r2, [r3, #0]
			prepare_for_change_mode(Yellow);
 8000f46:	2001      	movs	r0, #1
 8000f48:	f7ff ff9c 	bl	8000e84 <prepare_for_change_mode>
		{
			blinkingLight(Red);
			change_set_counter(Red);
		}

		break;
 8000f4c:	e02d      	b.n	8000faa <fsm_change_mode+0xc2>
			blinkingLight(Red);
 8000f4e:	2000      	movs	r0, #0
 8000f50:	f7ff ff54 	bl	8000dfc <blinkingLight>
			change_set_counter(Red);
 8000f54:	2000      	movs	r0, #0
 8000f56:	f000 f82d 	bl	8000fb4 <change_set_counter>
		break;
 8000f5a:	e026      	b.n	8000faa <fsm_change_mode+0xc2>

	case Change_Yellow_counter:
		if (is_button_pressed_and_released(0))
 8000f5c:	2000      	movs	r0, #0
 8000f5e:	f000 f8b5 	bl	80010cc <is_button_pressed_and_released>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d006      	beq.n	8000f76 <fsm_change_mode+0x8e>
		{
			mode = Change_Green_counter;
 8000f68:	4b11      	ldr	r3, [pc, #68]	@ (8000fb0 <fsm_change_mode+0xc8>)
 8000f6a:	2203      	movs	r2, #3
 8000f6c:	701a      	strb	r2, [r3, #0]
			prepare_for_change_mode(Green);
 8000f6e:	2002      	movs	r0, #2
 8000f70:	f7ff ff88 	bl	8000e84 <prepare_for_change_mode>
		{
			blinkingLight(Yellow);
			change_set_counter(Yellow);
		}

		break;
 8000f74:	e019      	b.n	8000faa <fsm_change_mode+0xc2>
			blinkingLight(Yellow);
 8000f76:	2001      	movs	r0, #1
 8000f78:	f7ff ff40 	bl	8000dfc <blinkingLight>
			change_set_counter(Yellow);
 8000f7c:	2001      	movs	r0, #1
 8000f7e:	f000 f819 	bl	8000fb4 <change_set_counter>
		break;
 8000f82:	e012      	b.n	8000faa <fsm_change_mode+0xc2>

	case Change_Green_counter:
		if (is_button_pressed_and_released(0))
 8000f84:	2000      	movs	r0, #0
 8000f86:	f000 f8a1 	bl	80010cc <is_button_pressed_and_released>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d005      	beq.n	8000f9c <fsm_change_mode+0xb4>
		{
			mode = DISPLAY;
 8000f90:	4b07      	ldr	r3, [pc, #28]	@ (8000fb0 <fsm_change_mode+0xc8>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	701a      	strb	r2, [r3, #0]
			Reset_Display_new_stats();
 8000f96:	f7ff fdcd 	bl	8000b34 <Reset_Display_new_stats>
		{
			blinkingLight(Green);
			change_set_counter(Green);
		}

		break;
 8000f9a:	e005      	b.n	8000fa8 <fsm_change_mode+0xc0>
			blinkingLight(Green);
 8000f9c:	2002      	movs	r0, #2
 8000f9e:	f7ff ff2d 	bl	8000dfc <blinkingLight>
			change_set_counter(Green);
 8000fa2:	2002      	movs	r0, #2
 8000fa4:	f000 f806 	bl	8000fb4 <change_set_counter>
		break;
 8000fa8:	bf00      	nop
	}
}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	20000099 	.word	0x20000099

08000fb4 <change_set_counter>:
 *      Author: kanza
 */

#include "fsm_setting.h"

void change_set_counter(uint8_t light) {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	71fb      	strb	r3, [r7, #7]
	if (is_button_pressed_and_released(1))
 8000fbe:	2001      	movs	r0, #1
 8000fc0:	f000 f884 	bl	80010cc <is_button_pressed_and_released>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d01a      	beq.n	8001000 <change_set_counter+0x4c>
	{

		if (light_period_modify_buffer[light] == 99)
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	4a15      	ldr	r2, [pc, #84]	@ (8001024 <change_set_counter+0x70>)
 8000fce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fd2:	2b63      	cmp	r3, #99	@ 0x63
 8000fd4:	d105      	bne.n	8000fe2 <change_set_counter+0x2e>
			light_period_modify_buffer[light] = 1;
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	4a12      	ldr	r2, [pc, #72]	@ (8001024 <change_set_counter+0x70>)
 8000fda:	2101      	movs	r1, #1
 8000fdc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000fe0:	e007      	b.n	8000ff2 <change_set_counter+0x3e>
		else
			light_period_modify_buffer[light]++;
 8000fe2:	79fb      	ldrb	r3, [r7, #7]
 8000fe4:	4a0f      	ldr	r2, [pc, #60]	@ (8001024 <change_set_counter+0x70>)
 8000fe6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000fea:	3201      	adds	r2, #1
 8000fec:	490d      	ldr	r1, [pc, #52]	@ (8001024 <change_set_counter+0x70>)
 8000fee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		update_LED7_buffer_counter(light_period_modify_buffer[light]);
 8000ff2:	79fb      	ldrb	r3, [r7, #7]
 8000ff4:	4a0b      	ldr	r2, [pc, #44]	@ (8001024 <change_set_counter+0x70>)
 8000ff6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff fd30 	bl	8000a60 <update_LED7_buffer_counter>
	}



	if (is_button_pressed_and_released(2))
 8001000:	2002      	movs	r0, #2
 8001002:	f000 f863 	bl	80010cc <is_button_pressed_and_released>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d007      	beq.n	800101c <change_set_counter+0x68>
	{
		lightPeriod[light] = light_period_modify_buffer[light];
 800100c:	79fa      	ldrb	r2, [r7, #7]
 800100e:	79fb      	ldrb	r3, [r7, #7]
 8001010:	4904      	ldr	r1, [pc, #16]	@ (8001024 <change_set_counter+0x70>)
 8001012:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001016:	4904      	ldr	r1, [pc, #16]	@ (8001028 <change_set_counter+0x74>)
 8001018:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}
}
 800101c:	bf00      	nop
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20000004 	.word	0x20000004
 8001028:	20000010 	.word	0x20000010

0800102c <fsm_for_button_processing>:




void fsm_for_button_processing(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0

	for (int index = 0; index < No_OF_BUTTON; index++)
 8001032:	2300      	movs	r3, #0
 8001034:	607b      	str	r3, [r7, #4]
 8001036:	e03a      	b.n	80010ae <fsm_for_button_processing+0x82>
	{
		switch (buttonState[index])
 8001038:	4a21      	ldr	r2, [pc, #132]	@ (80010c0 <fsm_for_button_processing+0x94>)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4413      	add	r3, r2
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d015      	beq.n	8001070 <fsm_for_button_processing+0x44>
 8001044:	2b01      	cmp	r3, #1
 8001046:	d12f      	bne.n	80010a8 <fsm_for_button_processing+0x7c>
		{
		case RELEASED:

			if (is_button_pressed(index))
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	b2db      	uxtb	r3, r3
 800104c:	4618      	mov	r0, r3
 800104e:	f000 f89d 	bl	800118c <is_button_pressed>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d024      	beq.n	80010a2 <fsm_for_button_processing+0x76>
			{
				HAL_GPIO_WritePin(GPIOB, Button_Pressed_Pin, RESET);
 8001058:	2200      	movs	r2, #0
 800105a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800105e:	4819      	ldr	r0, [pc, #100]	@ (80010c4 <fsm_for_button_processing+0x98>)
 8001060:	f000 fefd 	bl	8001e5e <HAL_GPIO_WritePin>

				buttonState[index] = PRESSED;
 8001064:	4a16      	ldr	r2, [pc, #88]	@ (80010c0 <fsm_for_button_processing+0x94>)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4413      	add	r3, r2
 800106a:	2200      	movs	r2, #0
 800106c:	701a      	strb	r2, [r3, #0]
			}
			break;
 800106e:	e018      	b.n	80010a2 <fsm_for_button_processing+0x76>

		case PRESSED:

			if (!is_button_pressed(index))
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	b2db      	uxtb	r3, r3
 8001074:	4618      	mov	r0, r3
 8001076:	f000 f889 	bl	800118c <is_button_pressed>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d112      	bne.n	80010a6 <fsm_for_button_processing+0x7a>
			{
				HAL_GPIO_WritePin(GPIOB, Button_Pressed_Pin, SET);
 8001080:	2201      	movs	r2, #1
 8001082:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001086:	480f      	ldr	r0, [pc, #60]	@ (80010c4 <fsm_for_button_processing+0x98>)
 8001088:	f000 fee9 	bl	8001e5e <HAL_GPIO_WritePin>

				buttonState[index] = RELEASED;
 800108c:	4a0c      	ldr	r2, [pc, #48]	@ (80010c0 <fsm_for_button_processing+0x94>)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4413      	add	r3, r2
 8001092:	2201      	movs	r2, #1
 8001094:	701a      	strb	r2, [r3, #0]
				buttonIsPressedAndReleased[index] = 1;
 8001096:	4a0c      	ldr	r2, [pc, #48]	@ (80010c8 <fsm_for_button_processing+0x9c>)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2101      	movs	r1, #1
 800109c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			}
			break;
 80010a0:	e001      	b.n	80010a6 <fsm_for_button_processing+0x7a>
			break;
 80010a2:	bf00      	nop
 80010a4:	e000      	b.n	80010a8 <fsm_for_button_processing+0x7c>
			break;
 80010a6:	bf00      	nop
	for (int index = 0; index < No_OF_BUTTON; index++)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	3301      	adds	r3, #1
 80010ac:	607b      	str	r3, [r7, #4]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	ddc1      	ble.n	8001038 <fsm_for_button_processing+0xc>
		}

	}

}
 80010b4:	bf00      	nop
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20000034 	.word	0x20000034
 80010c4:	40010c00 	.word	0x40010c00
 80010c8:	2000009c 	.word	0x2000009c

080010cc <is_button_pressed_and_released>:

int is_button_pressed_and_released(int index)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]

	if (buttonIsPressedAndReleased[index])
 80010d4:	4a09      	ldr	r2, [pc, #36]	@ (80010fc <is_button_pressed_and_released+0x30>)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d006      	beq.n	80010ee <is_button_pressed_and_released+0x22>
	{
		buttonIsPressedAndReleased[index] = 0;
 80010e0:	4a06      	ldr	r2, [pc, #24]	@ (80010fc <is_button_pressed_and_released+0x30>)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2100      	movs	r1, #0
 80010e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e000      	b.n	80010f0 <is_button_pressed_and_released+0x24>
	}
	else
		return 0;
 80010ee:	2300      	movs	r3, #0
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bc80      	pop	{r7}
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	2000009c 	.word	0x2000009c

08001100 <getKeyInput>:

// we define two buffers for debouncing
static GPIO_PinState debounceButtonBuffer1[No_OF_BUTTON]= {1,1,1};
static GPIO_PinState debounceButtonBuffer2[No_OF_BUTTON]= {1,1,1};;

void getKeyInput(void) {
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
	for (int i = 0; i < No_OF_BUTTON; i++) {
 8001106:	2300      	movs	r3, #0
 8001108:	607b      	str	r3, [r7, #4]
 800110a:	e02f      	b.n	800116c <getKeyInput+0x6c>
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 800110c:	4a1b      	ldr	r2, [pc, #108]	@ (800117c <getKeyInput+0x7c>)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4413      	add	r3, r2
 8001112:	7819      	ldrb	r1, [r3, #0]
 8001114:	4a1a      	ldr	r2, [pc, #104]	@ (8001180 <getKeyInput+0x80>)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4413      	add	r3, r2
 800111a:	460a      	mov	r2, r1
 800111c:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8 << i);
 800111e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	b29b      	uxth	r3, r3
 800112a:	4619      	mov	r1, r3
 800112c:	4815      	ldr	r0, [pc, #84]	@ (8001184 <getKeyInput+0x84>)
 800112e:	f000 fe7f 	bl	8001e30 <HAL_GPIO_ReadPin>
 8001132:	4603      	mov	r3, r0
 8001134:	4619      	mov	r1, r3
 8001136:	4a11      	ldr	r2, [pc, #68]	@ (800117c <getKeyInput+0x7c>)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	4413      	add	r3, r2
 800113c:	460a      	mov	r2, r1
 800113e:	701a      	strb	r2, [r3, #0]
		if (debounceButtonBuffer1[i] == debounceButtonBuffer2[i]) {
 8001140:	4a0e      	ldr	r2, [pc, #56]	@ (800117c <getKeyInput+0x7c>)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4413      	add	r3, r2
 8001146:	781a      	ldrb	r2, [r3, #0]
 8001148:	490d      	ldr	r1, [pc, #52]	@ (8001180 <getKeyInput+0x80>)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	440b      	add	r3, r1
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	429a      	cmp	r2, r3
 8001152:	d108      	bne.n	8001166 <getKeyInput+0x66>
			buttonBuffer[i] = debounceButtonBuffer1[i];
 8001154:	4a09      	ldr	r2, [pc, #36]	@ (800117c <getKeyInput+0x7c>)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4413      	add	r3, r2
 800115a:	7819      	ldrb	r1, [r3, #0]
 800115c:	4a0a      	ldr	r2, [pc, #40]	@ (8001188 <getKeyInput+0x88>)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4413      	add	r3, r2
 8001162:	460a      	mov	r2, r1
 8001164:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < No_OF_BUTTON; i++) {
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	3301      	adds	r3, #1
 800116a:	607b      	str	r3, [r7, #4]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2b02      	cmp	r3, #2
 8001170:	ddcc      	ble.n	800110c <getKeyInput+0xc>
		}
	}
}
 8001172:	bf00      	nop
 8001174:	bf00      	nop
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	2000003c 	.word	0x2000003c
 8001180:	20000040 	.word	0x20000040
 8001184:	40010800 	.word	0x40010800
 8001188:	20000038 	.word	0x20000038

0800118c <is_button_pressed>:

//Checking a button is pressed or not
unsigned char is_button_pressed(uint8_t index) {
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	71fb      	strb	r3, [r7, #7]
	if (index >= No_OF_BUTTON)
 8001196:	79fb      	ldrb	r3, [r7, #7]
 8001198:	2b02      	cmp	r3, #2
 800119a:	d901      	bls.n	80011a0 <is_button_pressed+0x14>
		return 0;
 800119c:	2300      	movs	r3, #0
 800119e:	e007      	b.n	80011b0 <is_button_pressed+0x24>
	return ( buttonBuffer [ index ] == BUTTON_IS_PRESSED );
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	4a06      	ldr	r2, [pc, #24]	@ (80011bc <is_button_pressed+0x30>)
 80011a4:	5cd3      	ldrb	r3, [r2, r3]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	bf0c      	ite	eq
 80011aa:	2301      	moveq	r3, #1
 80011ac:	2300      	movne	r3, #0
 80011ae:	b2db      	uxtb	r3, r3
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bc80      	pop	{r7}
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	20000038 	.word	0x20000038

080011c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011c4:	f000 fb48 	bl	8001858 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011c8:	f000 f822 	bl	8001210 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011cc:	f000 f8a8 	bl	8001320 <MX_GPIO_Init>
  MX_TIM2_Init();
 80011d0:	f000 f85a 	bl	8001288 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80011d4:	480c      	ldr	r0, [pc, #48]	@ (8001208 <main+0x48>)
 80011d6:	f001 faa1 	bl	800271c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	HAL_GPIO_WritePin(GPIOB, Led_Red_Blink_Pin, SET);
 80011da:	2201      	movs	r2, #1
 80011dc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011e0:	480a      	ldr	r0, [pc, #40]	@ (800120c <main+0x4c>)
 80011e2:	f000 fe3c 	bl	8001e5e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, Button_Pressed_Pin, SET);
 80011e6:	2201      	movs	r2, #1
 80011e8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011ec:	4807      	ldr	r0, [pc, #28]	@ (800120c <main+0x4c>)
 80011ee:	f000 fe36 	bl	8001e5e <HAL_GPIO_WritePin>

	setTimerpure(1000);
 80011f2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80011f6:	f000 fa1d 	bl	8001634 <setTimerpure>

  while (1)
  {
	  fsm_for_button_processing();
 80011fa:	f7ff ff17 	bl	800102c <fsm_for_button_processing>
	  fsm_change_mode();
 80011fe:	f7ff fe73 	bl	8000ee8 <fsm_change_mode>
  {
 8001202:	bf00      	nop
 8001204:	e7f9      	b.n	80011fa <main+0x3a>
 8001206:	bf00      	nop
 8001208:	200000a8 	.word	0x200000a8
 800120c:	40010c00 	.word	0x40010c00

08001210 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b090      	sub	sp, #64	@ 0x40
 8001214:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001216:	f107 0318 	add.w	r3, r7, #24
 800121a:	2228      	movs	r2, #40	@ 0x28
 800121c:	2100      	movs	r1, #0
 800121e:	4618      	mov	r0, r3
 8001220:	f001 fe08 	bl	8002e34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001224:	1d3b      	adds	r3, r7, #4
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	605a      	str	r2, [r3, #4]
 800122c:	609a      	str	r2, [r3, #8]
 800122e:	60da      	str	r2, [r3, #12]
 8001230:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001232:	2302      	movs	r3, #2
 8001234:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001236:	2301      	movs	r3, #1
 8001238:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800123a:	2310      	movs	r3, #16
 800123c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800123e:	2300      	movs	r3, #0
 8001240:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001242:	f107 0318 	add.w	r3, r7, #24
 8001246:	4618      	mov	r0, r3
 8001248:	f000 fe3a 	bl	8001ec0 <HAL_RCC_OscConfig>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001252:	f000 f8d3 	bl	80013fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001256:	230f      	movs	r3, #15
 8001258:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800125a:	2300      	movs	r3, #0
 800125c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800125e:	2300      	movs	r3, #0
 8001260:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001262:	2300      	movs	r3, #0
 8001264:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001266:	2300      	movs	r3, #0
 8001268:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800126a:	1d3b      	adds	r3, r7, #4
 800126c:	2100      	movs	r1, #0
 800126e:	4618      	mov	r0, r3
 8001270:	f001 f8a8 	bl	80023c4 <HAL_RCC_ClockConfig>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800127a:	f000 f8bf 	bl	80013fc <Error_Handler>
  }
}
 800127e:	bf00      	nop
 8001280:	3740      	adds	r7, #64	@ 0x40
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
	...

08001288 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800128e:	f107 0308 	add.w	r3, r7, #8
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	605a      	str	r2, [r3, #4]
 8001298:	609a      	str	r2, [r3, #8]
 800129a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800129c:	463b      	mov	r3, r7
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012a4:	4b1d      	ldr	r3, [pc, #116]	@ (800131c <MX_TIM2_Init+0x94>)
 80012a6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012aa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80012ac:	4b1b      	ldr	r3, [pc, #108]	@ (800131c <MX_TIM2_Init+0x94>)
 80012ae:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80012b2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b4:	4b19      	ldr	r3, [pc, #100]	@ (800131c <MX_TIM2_Init+0x94>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80012ba:	4b18      	ldr	r3, [pc, #96]	@ (800131c <MX_TIM2_Init+0x94>)
 80012bc:	2209      	movs	r2, #9
 80012be:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012c0:	4b16      	ldr	r3, [pc, #88]	@ (800131c <MX_TIM2_Init+0x94>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012c6:	4b15      	ldr	r3, [pc, #84]	@ (800131c <MX_TIM2_Init+0x94>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012cc:	4813      	ldr	r0, [pc, #76]	@ (800131c <MX_TIM2_Init+0x94>)
 80012ce:	f001 f9d5 	bl	800267c <HAL_TIM_Base_Init>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80012d8:	f000 f890 	bl	80013fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012e2:	f107 0308 	add.w	r3, r7, #8
 80012e6:	4619      	mov	r1, r3
 80012e8:	480c      	ldr	r0, [pc, #48]	@ (800131c <MX_TIM2_Init+0x94>)
 80012ea:	f001 fb53 	bl	8002994 <HAL_TIM_ConfigClockSource>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80012f4:	f000 f882 	bl	80013fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012f8:	2300      	movs	r3, #0
 80012fa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012fc:	2300      	movs	r3, #0
 80012fe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001300:	463b      	mov	r3, r7
 8001302:	4619      	mov	r1, r3
 8001304:	4805      	ldr	r0, [pc, #20]	@ (800131c <MX_TIM2_Init+0x94>)
 8001306:	f001 fd2b 	bl	8002d60 <HAL_TIMEx_MasterConfigSynchronization>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001310:	f000 f874 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001314:	bf00      	nop
 8001316:	3718      	adds	r7, #24
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	200000a8 	.word	0x200000a8

08001320 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001326:	f107 0308 	add.w	r3, r7, #8
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	605a      	str	r2, [r3, #4]
 8001330:	609a      	str	r2, [r3, #8]
 8001332:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001334:	4b28      	ldr	r3, [pc, #160]	@ (80013d8 <MX_GPIO_Init+0xb8>)
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	4a27      	ldr	r2, [pc, #156]	@ (80013d8 <MX_GPIO_Init+0xb8>)
 800133a:	f043 0304 	orr.w	r3, r3, #4
 800133e:	6193      	str	r3, [r2, #24]
 8001340:	4b25      	ldr	r3, [pc, #148]	@ (80013d8 <MX_GPIO_Init+0xb8>)
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	f003 0304 	and.w	r3, r3, #4
 8001348:	607b      	str	r3, [r7, #4]
 800134a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800134c:	4b22      	ldr	r3, [pc, #136]	@ (80013d8 <MX_GPIO_Init+0xb8>)
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	4a21      	ldr	r2, [pc, #132]	@ (80013d8 <MX_GPIO_Init+0xb8>)
 8001352:	f043 0308 	orr.w	r3, r3, #8
 8001356:	6193      	str	r3, [r2, #24]
 8001358:	4b1f      	ldr	r3, [pc, #124]	@ (80013d8 <MX_GPIO_Init+0xb8>)
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	f003 0308 	and.w	r3, r3, #8
 8001360:	603b      	str	r3, [r7, #0]
 8001362:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Red_H_Pin|Yellow_H_Pin|Green_H_Pin|Red_V_Pin
 8001364:	2200      	movs	r2, #0
 8001366:	217e      	movs	r1, #126	@ 0x7e
 8001368:	481c      	ldr	r0, [pc, #112]	@ (80013dc <MX_GPIO_Init+0xbc>)
 800136a:	f000 fd78 	bl	8001e5e <HAL_GPIO_WritePin>
                          |Yellow_V_Pin|Green_V_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_0_Pin|SEG_1_Pin|SEG_2_Pin|EN3_Pin
 800136e:	2200      	movs	r2, #0
 8001370:	f243 71ff 	movw	r1, #14335	@ 0x37ff
 8001374:	481a      	ldr	r0, [pc, #104]	@ (80013e0 <MX_GPIO_Init+0xc0>)
 8001376:	f000 fd72 	bl	8001e5e <HAL_GPIO_WritePin>
                          |SEG_5_Pin|SEG_6_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Red_H_Pin Yellow_H_Pin Green_H_Pin Red_V_Pin
                           Yellow_V_Pin Green_V_Pin */
  GPIO_InitStruct.Pin = Red_H_Pin|Yellow_H_Pin|Green_H_Pin|Red_V_Pin
 800137a:	237e      	movs	r3, #126	@ 0x7e
 800137c:	60bb      	str	r3, [r7, #8]
                          |Yellow_V_Pin|Green_V_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800137e:	2301      	movs	r3, #1
 8001380:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001382:	2300      	movs	r3, #0
 8001384:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001386:	2302      	movs	r3, #2
 8001388:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138a:	f107 0308 	add.w	r3, r7, #8
 800138e:	4619      	mov	r1, r3
 8001390:	4812      	ldr	r0, [pc, #72]	@ (80013dc <MX_GPIO_Init+0xbc>)
 8001392:	f000 fbd1 	bl	8001b38 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_0_Pin SEG_1_Pin SEG_2_Pin EN3_Pin
                           Led_Red_Blink_Pin Button_Pressed_Pin SEG_3_Pin SEG_4_Pin
                           SEG_5_Pin SEG_6_Pin EN0_Pin EN1_Pin
                           EN2_Pin */
  GPIO_InitStruct.Pin = SEG_0_Pin|SEG_1_Pin|SEG_2_Pin|EN3_Pin
 8001396:	f243 73ff 	movw	r3, #14335	@ 0x37ff
 800139a:	60bb      	str	r3, [r7, #8]
                          |Led_Red_Blink_Pin|Button_Pressed_Pin|SEG_3_Pin|SEG_4_Pin
                          |SEG_5_Pin|SEG_6_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800139c:	2301      	movs	r3, #1
 800139e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	2300      	movs	r3, #0
 80013a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a4:	2302      	movs	r3, #2
 80013a6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a8:	f107 0308 	add.w	r3, r7, #8
 80013ac:	4619      	mov	r1, r3
 80013ae:	480c      	ldr	r0, [pc, #48]	@ (80013e0 <MX_GPIO_Init+0xc0>)
 80013b0:	f000 fbc2 	bl	8001b38 <HAL_GPIO_Init>

  /*Configure GPIO pins : MODE_Pin INCREASE_Pin SET_Pin */
  GPIO_InitStruct.Pin = MODE_Pin|INCREASE_Pin|SET_Pin;
 80013b4:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80013b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ba:	2300      	movs	r3, #0
 80013bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013be:	2301      	movs	r3, #1
 80013c0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c2:	f107 0308 	add.w	r3, r7, #8
 80013c6:	4619      	mov	r1, r3
 80013c8:	4804      	ldr	r0, [pc, #16]	@ (80013dc <MX_GPIO_Init+0xbc>)
 80013ca:	f000 fbb5 	bl	8001b38 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013ce:	bf00      	nop
 80013d0:	3718      	adds	r7, #24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40021000 	.word	0x40021000
 80013dc:	40010800 	.word	0x40010800
 80013e0:	40010c00 	.word	0x40010c00

080013e4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
		getKeyInput();
 80013ec:	f7ff fe88 	bl	8001100 <getKeyInput>
		timer_run();
 80013f0:	f000 f9a2 	bl	8001738 <timer_run>

}
 80013f4:	bf00      	nop
 80013f6:	3708      	adds	r7, #8
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001400:	b672      	cpsid	i
}
 8001402:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001404:	bf00      	nop
 8001406:	e7fd      	b.n	8001404 <Error_Handler+0x8>

08001408 <setRedH>:
 *      Author: kanza
 */
#include "setTrafficLight.h"

void setRedH()
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, Red_H_Pin, RESET);
 800140c:	2200      	movs	r2, #0
 800140e:	2102      	movs	r1, #2
 8001410:	4807      	ldr	r0, [pc, #28]	@ (8001430 <setRedH+0x28>)
 8001412:	f000 fd24 	bl	8001e5e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, Yellow_H_Pin, SET);
 8001416:	2201      	movs	r2, #1
 8001418:	2104      	movs	r1, #4
 800141a:	4805      	ldr	r0, [pc, #20]	@ (8001430 <setRedH+0x28>)
 800141c:	f000 fd1f 	bl	8001e5e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, Green_H_Pin, SET);
 8001420:	2201      	movs	r2, #1
 8001422:	2108      	movs	r1, #8
 8001424:	4802      	ldr	r0, [pc, #8]	@ (8001430 <setRedH+0x28>)
 8001426:	f000 fd1a 	bl	8001e5e <HAL_GPIO_WritePin>
}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	40010800 	.word	0x40010800

08001434 <setYellowH>:

void setYellowH()
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, Red_H_Pin, SET);
 8001438:	2201      	movs	r2, #1
 800143a:	2102      	movs	r1, #2
 800143c:	4807      	ldr	r0, [pc, #28]	@ (800145c <setYellowH+0x28>)
 800143e:	f000 fd0e 	bl	8001e5e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, Green_H_Pin, SET);
 8001442:	2201      	movs	r2, #1
 8001444:	2108      	movs	r1, #8
 8001446:	4805      	ldr	r0, [pc, #20]	@ (800145c <setYellowH+0x28>)
 8001448:	f000 fd09 	bl	8001e5e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, Yellow_H_Pin, RESET);
 800144c:	2200      	movs	r2, #0
 800144e:	2104      	movs	r1, #4
 8001450:	4802      	ldr	r0, [pc, #8]	@ (800145c <setYellowH+0x28>)
 8001452:	f000 fd04 	bl	8001e5e <HAL_GPIO_WritePin>
}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	40010800 	.word	0x40010800

08001460 <setGreenH>:


void setGreenH()
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, Red_H_Pin, SET);
 8001464:	2201      	movs	r2, #1
 8001466:	2102      	movs	r1, #2
 8001468:	4807      	ldr	r0, [pc, #28]	@ (8001488 <setGreenH+0x28>)
 800146a:	f000 fcf8 	bl	8001e5e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, Green_H_Pin, RESET);
 800146e:	2200      	movs	r2, #0
 8001470:	2108      	movs	r1, #8
 8001472:	4805      	ldr	r0, [pc, #20]	@ (8001488 <setGreenH+0x28>)
 8001474:	f000 fcf3 	bl	8001e5e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, Yellow_H_Pin, SET);
 8001478:	2201      	movs	r2, #1
 800147a:	2104      	movs	r1, #4
 800147c:	4802      	ldr	r0, [pc, #8]	@ (8001488 <setGreenH+0x28>)
 800147e:	f000 fcee 	bl	8001e5e <HAL_GPIO_WritePin>
}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	40010800 	.word	0x40010800

0800148c <setRedV>:

void setRedV()
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, Red_V_Pin, RESET);
 8001490:	2200      	movs	r2, #0
 8001492:	2110      	movs	r1, #16
 8001494:	4807      	ldr	r0, [pc, #28]	@ (80014b4 <setRedV+0x28>)
 8001496:	f000 fce2 	bl	8001e5e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, Yellow_V_Pin, SET);
 800149a:	2201      	movs	r2, #1
 800149c:	2120      	movs	r1, #32
 800149e:	4805      	ldr	r0, [pc, #20]	@ (80014b4 <setRedV+0x28>)
 80014a0:	f000 fcdd 	bl	8001e5e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, Green_V_Pin, SET);
 80014a4:	2201      	movs	r2, #1
 80014a6:	2140      	movs	r1, #64	@ 0x40
 80014a8:	4802      	ldr	r0, [pc, #8]	@ (80014b4 <setRedV+0x28>)
 80014aa:	f000 fcd8 	bl	8001e5e <HAL_GPIO_WritePin>
}
 80014ae:	bf00      	nop
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40010800 	.word	0x40010800

080014b8 <setYellowV>:

void setYellowV()
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, Red_V_Pin, SET);
 80014bc:	2201      	movs	r2, #1
 80014be:	2110      	movs	r1, #16
 80014c0:	4807      	ldr	r0, [pc, #28]	@ (80014e0 <setYellowV+0x28>)
 80014c2:	f000 fccc 	bl	8001e5e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, Green_V_Pin, SET);
 80014c6:	2201      	movs	r2, #1
 80014c8:	2140      	movs	r1, #64	@ 0x40
 80014ca:	4805      	ldr	r0, [pc, #20]	@ (80014e0 <setYellowV+0x28>)
 80014cc:	f000 fcc7 	bl	8001e5e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, Yellow_V_Pin, RESET);
 80014d0:	2200      	movs	r2, #0
 80014d2:	2120      	movs	r1, #32
 80014d4:	4802      	ldr	r0, [pc, #8]	@ (80014e0 <setYellowV+0x28>)
 80014d6:	f000 fcc2 	bl	8001e5e <HAL_GPIO_WritePin>
}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40010800 	.word	0x40010800

080014e4 <setGreenV>:


void setGreenV()
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, Red_V_Pin, SET);
 80014e8:	2201      	movs	r2, #1
 80014ea:	2110      	movs	r1, #16
 80014ec:	4807      	ldr	r0, [pc, #28]	@ (800150c <setGreenV+0x28>)
 80014ee:	f000 fcb6 	bl	8001e5e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, Green_V_Pin, RESET);
 80014f2:	2200      	movs	r2, #0
 80014f4:	2140      	movs	r1, #64	@ 0x40
 80014f6:	4805      	ldr	r0, [pc, #20]	@ (800150c <setGreenV+0x28>)
 80014f8:	f000 fcb1 	bl	8001e5e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, Yellow_V_Pin, SET);
 80014fc:	2201      	movs	r2, #1
 80014fe:	2120      	movs	r1, #32
 8001500:	4802      	ldr	r0, [pc, #8]	@ (800150c <setGreenV+0x28>)
 8001502:	f000 fcac 	bl	8001e5e <HAL_GPIO_WritePin>
}
 8001506:	bf00      	nop
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	40010800 	.word	0x40010800

08001510 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001516:	4b15      	ldr	r3, [pc, #84]	@ (800156c <HAL_MspInit+0x5c>)
 8001518:	699b      	ldr	r3, [r3, #24]
 800151a:	4a14      	ldr	r2, [pc, #80]	@ (800156c <HAL_MspInit+0x5c>)
 800151c:	f043 0301 	orr.w	r3, r3, #1
 8001520:	6193      	str	r3, [r2, #24]
 8001522:	4b12      	ldr	r3, [pc, #72]	@ (800156c <HAL_MspInit+0x5c>)
 8001524:	699b      	ldr	r3, [r3, #24]
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	60bb      	str	r3, [r7, #8]
 800152c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800152e:	4b0f      	ldr	r3, [pc, #60]	@ (800156c <HAL_MspInit+0x5c>)
 8001530:	69db      	ldr	r3, [r3, #28]
 8001532:	4a0e      	ldr	r2, [pc, #56]	@ (800156c <HAL_MspInit+0x5c>)
 8001534:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001538:	61d3      	str	r3, [r2, #28]
 800153a:	4b0c      	ldr	r3, [pc, #48]	@ (800156c <HAL_MspInit+0x5c>)
 800153c:	69db      	ldr	r3, [r3, #28]
 800153e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001542:	607b      	str	r3, [r7, #4]
 8001544:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001546:	4b0a      	ldr	r3, [pc, #40]	@ (8001570 <HAL_MspInit+0x60>)
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	4a04      	ldr	r2, [pc, #16]	@ (8001570 <HAL_MspInit+0x60>)
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001562:	bf00      	nop
 8001564:	3714      	adds	r7, #20
 8001566:	46bd      	mov	sp, r7
 8001568:	bc80      	pop	{r7}
 800156a:	4770      	bx	lr
 800156c:	40021000 	.word	0x40021000
 8001570:	40010000 	.word	0x40010000

08001574 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001584:	d113      	bne.n	80015ae <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001586:	4b0c      	ldr	r3, [pc, #48]	@ (80015b8 <HAL_TIM_Base_MspInit+0x44>)
 8001588:	69db      	ldr	r3, [r3, #28]
 800158a:	4a0b      	ldr	r2, [pc, #44]	@ (80015b8 <HAL_TIM_Base_MspInit+0x44>)
 800158c:	f043 0301 	orr.w	r3, r3, #1
 8001590:	61d3      	str	r3, [r2, #28]
 8001592:	4b09      	ldr	r3, [pc, #36]	@ (80015b8 <HAL_TIM_Base_MspInit+0x44>)
 8001594:	69db      	ldr	r3, [r3, #28]
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800159e:	2200      	movs	r2, #0
 80015a0:	2100      	movs	r1, #0
 80015a2:	201c      	movs	r0, #28
 80015a4:	f000 fa91 	bl	8001aca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80015a8:	201c      	movs	r0, #28
 80015aa:	f000 faaa 	bl	8001b02 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80015ae:	bf00      	nop
 80015b0:	3710      	adds	r7, #16
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	40021000 	.word	0x40021000

080015bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015c0:	bf00      	nop
 80015c2:	e7fd      	b.n	80015c0 <NMI_Handler+0x4>

080015c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015c8:	bf00      	nop
 80015ca:	e7fd      	b.n	80015c8 <HardFault_Handler+0x4>

080015cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015d0:	bf00      	nop
 80015d2:	e7fd      	b.n	80015d0 <MemManage_Handler+0x4>

080015d4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015d8:	bf00      	nop
 80015da:	e7fd      	b.n	80015d8 <BusFault_Handler+0x4>

080015dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015e0:	bf00      	nop
 80015e2:	e7fd      	b.n	80015e0 <UsageFault_Handler+0x4>

080015e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015e8:	bf00      	nop
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bc80      	pop	{r7}
 80015ee:	4770      	bx	lr

080015f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bc80      	pop	{r7}
 80015fa:	4770      	bx	lr

080015fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	bc80      	pop	{r7}
 8001606:	4770      	bx	lr

08001608 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800160c:	f000 f96a 	bl	80018e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001610:	bf00      	nop
 8001612:	bd80      	pop	{r7, pc}

08001614 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001618:	4802      	ldr	r0, [pc, #8]	@ (8001624 <TIM2_IRQHandler+0x10>)
 800161a:	f001 f8cb 	bl	80027b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	200000a8 	.word	0x200000a8

08001628 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800162c:	bf00      	nop
 800162e:	46bd      	mov	sp, r7
 8001630:	bc80      	pop	{r7}
 8001632:	4770      	bx	lr

08001634 <setTimerpure>:

int timerLED7_counter = 0;
int timerLED7_flag = 1;

void setTimerpure(int duration)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
	timer_pure_counter = duration / Tick;
 800163c:	4b07      	ldr	r3, [pc, #28]	@ (800165c <setTimerpure+0x28>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	fb92 f3f3 	sdiv	r3, r2, r3
 8001646:	4a06      	ldr	r2, [pc, #24]	@ (8001660 <setTimerpure+0x2c>)
 8001648:	6013      	str	r3, [r2, #0]
	timer_pure_flag = 0;
 800164a:	4b06      	ldr	r3, [pc, #24]	@ (8001664 <setTimerpure+0x30>)
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
}
 8001650:	bf00      	nop
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	bc80      	pop	{r7}
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	20000048 	.word	0x20000048
 8001660:	200000f0 	.word	0x200000f0
 8001664:	2000004c 	.word	0x2000004c

08001668 <setTimerTrafficHorizontal>:



void setTimerTrafficHorizontal(int duration)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
	timerTrafficHorizontal_counter = duration / Tick;
 8001670:	4b07      	ldr	r3, [pc, #28]	@ (8001690 <setTimerTrafficHorizontal+0x28>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	fb92 f3f3 	sdiv	r3, r2, r3
 800167a:	4a06      	ldr	r2, [pc, #24]	@ (8001694 <setTimerTrafficHorizontal+0x2c>)
 800167c:	6013      	str	r3, [r2, #0]
	timerTrafficHorizontal_flag = 0;
 800167e:	4b06      	ldr	r3, [pc, #24]	@ (8001698 <setTimerTrafficHorizontal+0x30>)
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
}
 8001684:	bf00      	nop
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	bc80      	pop	{r7}
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	20000048 	.word	0x20000048
 8001694:	200000f4 	.word	0x200000f4
 8001698:	20000050 	.word	0x20000050

0800169c <setTimerTrafficVertical>:

void setTimerTrafficVertical(int duration)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
	timerTrafficVertical_counter = duration / Tick;
 80016a4:	4b07      	ldr	r3, [pc, #28]	@ (80016c4 <setTimerTrafficVertical+0x28>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	fb92 f3f3 	sdiv	r3, r2, r3
 80016ae:	4a06      	ldr	r2, [pc, #24]	@ (80016c8 <setTimerTrafficVertical+0x2c>)
 80016b0:	6013      	str	r3, [r2, #0]
	timerTrafficVertical_flag = 0;
 80016b2:	4b06      	ldr	r3, [pc, #24]	@ (80016cc <setTimerTrafficVertical+0x30>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
}
 80016b8:	bf00      	nop
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	bc80      	pop	{r7}
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	20000048 	.word	0x20000048
 80016c8:	200000f8 	.word	0x200000f8
 80016cc:	20000054 	.word	0x20000054

080016d0 <setTimerBlink>:

void setTimerBlink(int duration) {
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
	timerBlink_counter = duration / Tick;
 80016d8:	4b07      	ldr	r3, [pc, #28]	@ (80016f8 <setTimerBlink+0x28>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	fb92 f3f3 	sdiv	r3, r2, r3
 80016e2:	4a06      	ldr	r2, [pc, #24]	@ (80016fc <setTimerBlink+0x2c>)
 80016e4:	6013      	str	r3, [r2, #0]
	timerBlink_flag = 0;
 80016e6:	4b06      	ldr	r3, [pc, #24]	@ (8001700 <setTimerBlink+0x30>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
}
 80016ec:	bf00      	nop
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bc80      	pop	{r7}
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	20000048 	.word	0x20000048
 80016fc:	200000fc 	.word	0x200000fc
 8001700:	20000058 	.word	0x20000058

08001704 <setTimerLED7>:

void setTimerLED7(int duration)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
	timerLED7_counter = duration / Tick;
 800170c:	4b07      	ldr	r3, [pc, #28]	@ (800172c <setTimerLED7+0x28>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	fb92 f3f3 	sdiv	r3, r2, r3
 8001716:	4a06      	ldr	r2, [pc, #24]	@ (8001730 <setTimerLED7+0x2c>)
 8001718:	6013      	str	r3, [r2, #0]
	timerLED7_flag = 0;
 800171a:	4b06      	ldr	r3, [pc, #24]	@ (8001734 <setTimerLED7+0x30>)
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
}
 8001720:	bf00      	nop
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	bc80      	pop	{r7}
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	20000048 	.word	0x20000048
 8001730:	20000100 	.word	0x20000100
 8001734:	2000005c 	.word	0x2000005c

08001738 <timer_run>:

void timer_run()
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0

	if(timer_pure_counter > 0)
 800173c:	4b29      	ldr	r3, [pc, #164]	@ (80017e4 <timer_run+0xac>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2b00      	cmp	r3, #0
 8001742:	dd0b      	ble.n	800175c <timer_run+0x24>
	{
		timer_pure_counter--;
 8001744:	4b27      	ldr	r3, [pc, #156]	@ (80017e4 <timer_run+0xac>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	3b01      	subs	r3, #1
 800174a:	4a26      	ldr	r2, [pc, #152]	@ (80017e4 <timer_run+0xac>)
 800174c:	6013      	str	r3, [r2, #0]
		if(timer_pure_counter == 0)
 800174e:	4b25      	ldr	r3, [pc, #148]	@ (80017e4 <timer_run+0xac>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d102      	bne.n	800175c <timer_run+0x24>
		{
			timer_pure_flag = 1;
 8001756:	4b24      	ldr	r3, [pc, #144]	@ (80017e8 <timer_run+0xb0>)
 8001758:	2201      	movs	r2, #1
 800175a:	601a      	str	r2, [r3, #0]
		}
	}

	if (timerTrafficHorizontal_counter > 0)
 800175c:	4b23      	ldr	r3, [pc, #140]	@ (80017ec <timer_run+0xb4>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2b00      	cmp	r3, #0
 8001762:	dd0b      	ble.n	800177c <timer_run+0x44>
	{
		timerTrafficHorizontal_counter--;
 8001764:	4b21      	ldr	r3, [pc, #132]	@ (80017ec <timer_run+0xb4>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	3b01      	subs	r3, #1
 800176a:	4a20      	ldr	r2, [pc, #128]	@ (80017ec <timer_run+0xb4>)
 800176c:	6013      	str	r3, [r2, #0]
		if (timerTrafficHorizontal_counter == 0)
 800176e:	4b1f      	ldr	r3, [pc, #124]	@ (80017ec <timer_run+0xb4>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d102      	bne.n	800177c <timer_run+0x44>
			timerTrafficHorizontal_flag = 1;
 8001776:	4b1e      	ldr	r3, [pc, #120]	@ (80017f0 <timer_run+0xb8>)
 8001778:	2201      	movs	r2, #1
 800177a:	601a      	str	r2, [r3, #0]
	}

	if (timerTrafficVertical_counter > 0)
 800177c:	4b1d      	ldr	r3, [pc, #116]	@ (80017f4 <timer_run+0xbc>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	dd0b      	ble.n	800179c <timer_run+0x64>
	{
		timerTrafficVertical_counter--;
 8001784:	4b1b      	ldr	r3, [pc, #108]	@ (80017f4 <timer_run+0xbc>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	3b01      	subs	r3, #1
 800178a:	4a1a      	ldr	r2, [pc, #104]	@ (80017f4 <timer_run+0xbc>)
 800178c:	6013      	str	r3, [r2, #0]
		if (timerTrafficVertical_counter == 0)
 800178e:	4b19      	ldr	r3, [pc, #100]	@ (80017f4 <timer_run+0xbc>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d102      	bne.n	800179c <timer_run+0x64>
			timerTrafficVertical_flag = 1;
 8001796:	4b18      	ldr	r3, [pc, #96]	@ (80017f8 <timer_run+0xc0>)
 8001798:	2201      	movs	r2, #1
 800179a:	601a      	str	r2, [r3, #0]
	}

	if (timerBlink_counter > 0)
 800179c:	4b17      	ldr	r3, [pc, #92]	@ (80017fc <timer_run+0xc4>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	dd0b      	ble.n	80017bc <timer_run+0x84>
	{
		timerBlink_counter--;
 80017a4:	4b15      	ldr	r3, [pc, #84]	@ (80017fc <timer_run+0xc4>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	3b01      	subs	r3, #1
 80017aa:	4a14      	ldr	r2, [pc, #80]	@ (80017fc <timer_run+0xc4>)
 80017ac:	6013      	str	r3, [r2, #0]
		if (timerBlink_counter == 0)
 80017ae:	4b13      	ldr	r3, [pc, #76]	@ (80017fc <timer_run+0xc4>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d102      	bne.n	80017bc <timer_run+0x84>
			timerBlink_flag = 1;
 80017b6:	4b12      	ldr	r3, [pc, #72]	@ (8001800 <timer_run+0xc8>)
 80017b8:	2201      	movs	r2, #1
 80017ba:	601a      	str	r2, [r3, #0]
	}

	if (timerLED7_counter > 0)
 80017bc:	4b11      	ldr	r3, [pc, #68]	@ (8001804 <timer_run+0xcc>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	dd0b      	ble.n	80017dc <timer_run+0xa4>
	{
		timerLED7_counter--;
 80017c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001804 <timer_run+0xcc>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	3b01      	subs	r3, #1
 80017ca:	4a0e      	ldr	r2, [pc, #56]	@ (8001804 <timer_run+0xcc>)
 80017cc:	6013      	str	r3, [r2, #0]
		if (timerLED7_counter == 0)
 80017ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001804 <timer_run+0xcc>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d102      	bne.n	80017dc <timer_run+0xa4>
			timerLED7_flag = 1;
 80017d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001808 <timer_run+0xd0>)
 80017d8:	2201      	movs	r2, #1
 80017da:	601a      	str	r2, [r3, #0]
	}


}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	bc80      	pop	{r7}
 80017e2:	4770      	bx	lr
 80017e4:	200000f0 	.word	0x200000f0
 80017e8:	2000004c 	.word	0x2000004c
 80017ec:	200000f4 	.word	0x200000f4
 80017f0:	20000050 	.word	0x20000050
 80017f4:	200000f8 	.word	0x200000f8
 80017f8:	20000054 	.word	0x20000054
 80017fc:	200000fc 	.word	0x200000fc
 8001800:	20000058 	.word	0x20000058
 8001804:	20000100 	.word	0x20000100
 8001808:	2000005c 	.word	0x2000005c

0800180c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800180c:	480c      	ldr	r0, [pc, #48]	@ (8001840 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800180e:	490d      	ldr	r1, [pc, #52]	@ (8001844 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001810:	4a0d      	ldr	r2, [pc, #52]	@ (8001848 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001812:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001814:	e002      	b.n	800181c <LoopCopyDataInit>

08001816 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001816:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001818:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800181a:	3304      	adds	r3, #4

0800181c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800181c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800181e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001820:	d3f9      	bcc.n	8001816 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001822:	4a0a      	ldr	r2, [pc, #40]	@ (800184c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001824:	4c0a      	ldr	r4, [pc, #40]	@ (8001850 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001826:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001828:	e001      	b.n	800182e <LoopFillZerobss>

0800182a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800182a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800182c:	3204      	adds	r2, #4

0800182e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800182e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001830:	d3fb      	bcc.n	800182a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001832:	f7ff fef9 	bl	8001628 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001836:	f001 fb05 	bl	8002e44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800183a:	f7ff fcc1 	bl	80011c0 <main>
  bx lr
 800183e:	4770      	bx	lr
  ldr r0, =_sdata
 8001840:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001844:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001848:	08002ed0 	.word	0x08002ed0
  ldr r2, =_sbss
 800184c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001850:	20000108 	.word	0x20000108

08001854 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001854:	e7fe      	b.n	8001854 <ADC1_2_IRQHandler>
	...

08001858 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800185c:	4b08      	ldr	r3, [pc, #32]	@ (8001880 <HAL_Init+0x28>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a07      	ldr	r2, [pc, #28]	@ (8001880 <HAL_Init+0x28>)
 8001862:	f043 0310 	orr.w	r3, r3, #16
 8001866:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001868:	2003      	movs	r0, #3
 800186a:	f000 f923 	bl	8001ab4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800186e:	200f      	movs	r0, #15
 8001870:	f000 f808 	bl	8001884 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001874:	f7ff fe4c 	bl	8001510 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001878:	2300      	movs	r3, #0
}
 800187a:	4618      	mov	r0, r3
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	40022000 	.word	0x40022000

08001884 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800188c:	4b12      	ldr	r3, [pc, #72]	@ (80018d8 <HAL_InitTick+0x54>)
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	4b12      	ldr	r3, [pc, #72]	@ (80018dc <HAL_InitTick+0x58>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	4619      	mov	r1, r3
 8001896:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800189a:	fbb3 f3f1 	udiv	r3, r3, r1
 800189e:	fbb2 f3f3 	udiv	r3, r2, r3
 80018a2:	4618      	mov	r0, r3
 80018a4:	f000 f93b 	bl	8001b1e <HAL_SYSTICK_Config>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e00e      	b.n	80018d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2b0f      	cmp	r3, #15
 80018b6:	d80a      	bhi.n	80018ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018b8:	2200      	movs	r2, #0
 80018ba:	6879      	ldr	r1, [r7, #4]
 80018bc:	f04f 30ff 	mov.w	r0, #4294967295
 80018c0:	f000 f903 	bl	8001aca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018c4:	4a06      	ldr	r2, [pc, #24]	@ (80018e0 <HAL_InitTick+0x5c>)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018ca:	2300      	movs	r3, #0
 80018cc:	e000      	b.n	80018d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3708      	adds	r7, #8
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	20000044 	.word	0x20000044
 80018dc:	20000064 	.word	0x20000064
 80018e0:	20000060 	.word	0x20000060

080018e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018e8:	4b05      	ldr	r3, [pc, #20]	@ (8001900 <HAL_IncTick+0x1c>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	461a      	mov	r2, r3
 80018ee:	4b05      	ldr	r3, [pc, #20]	@ (8001904 <HAL_IncTick+0x20>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4413      	add	r3, r2
 80018f4:	4a03      	ldr	r2, [pc, #12]	@ (8001904 <HAL_IncTick+0x20>)
 80018f6:	6013      	str	r3, [r2, #0]
}
 80018f8:	bf00      	nop
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bc80      	pop	{r7}
 80018fe:	4770      	bx	lr
 8001900:	20000064 	.word	0x20000064
 8001904:	20000104 	.word	0x20000104

08001908 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  return uwTick;
 800190c:	4b02      	ldr	r3, [pc, #8]	@ (8001918 <HAL_GetTick+0x10>)
 800190e:	681b      	ldr	r3, [r3, #0]
}
 8001910:	4618      	mov	r0, r3
 8001912:	46bd      	mov	sp, r7
 8001914:	bc80      	pop	{r7}
 8001916:	4770      	bx	lr
 8001918:	20000104 	.word	0x20000104

0800191c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800191c:	b480      	push	{r7}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	f003 0307 	and.w	r3, r3, #7
 800192a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800192c:	4b0c      	ldr	r3, [pc, #48]	@ (8001960 <__NVIC_SetPriorityGrouping+0x44>)
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001932:	68ba      	ldr	r2, [r7, #8]
 8001934:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001938:	4013      	ands	r3, r2
 800193a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001944:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001948:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800194c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800194e:	4a04      	ldr	r2, [pc, #16]	@ (8001960 <__NVIC_SetPriorityGrouping+0x44>)
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	60d3      	str	r3, [r2, #12]
}
 8001954:	bf00      	nop
 8001956:	3714      	adds	r7, #20
 8001958:	46bd      	mov	sp, r7
 800195a:	bc80      	pop	{r7}
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	e000ed00 	.word	0xe000ed00

08001964 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001968:	4b04      	ldr	r3, [pc, #16]	@ (800197c <__NVIC_GetPriorityGrouping+0x18>)
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	0a1b      	lsrs	r3, r3, #8
 800196e:	f003 0307 	and.w	r3, r3, #7
}
 8001972:	4618      	mov	r0, r3
 8001974:	46bd      	mov	sp, r7
 8001976:	bc80      	pop	{r7}
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	e000ed00 	.word	0xe000ed00

08001980 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800198a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198e:	2b00      	cmp	r3, #0
 8001990:	db0b      	blt.n	80019aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001992:	79fb      	ldrb	r3, [r7, #7]
 8001994:	f003 021f 	and.w	r2, r3, #31
 8001998:	4906      	ldr	r1, [pc, #24]	@ (80019b4 <__NVIC_EnableIRQ+0x34>)
 800199a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199e:	095b      	lsrs	r3, r3, #5
 80019a0:	2001      	movs	r0, #1
 80019a2:	fa00 f202 	lsl.w	r2, r0, r2
 80019a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019aa:	bf00      	nop
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bc80      	pop	{r7}
 80019b2:	4770      	bx	lr
 80019b4:	e000e100 	.word	0xe000e100

080019b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	4603      	mov	r3, r0
 80019c0:	6039      	str	r1, [r7, #0]
 80019c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	db0a      	blt.n	80019e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	b2da      	uxtb	r2, r3
 80019d0:	490c      	ldr	r1, [pc, #48]	@ (8001a04 <__NVIC_SetPriority+0x4c>)
 80019d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d6:	0112      	lsls	r2, r2, #4
 80019d8:	b2d2      	uxtb	r2, r2
 80019da:	440b      	add	r3, r1
 80019dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019e0:	e00a      	b.n	80019f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	b2da      	uxtb	r2, r3
 80019e6:	4908      	ldr	r1, [pc, #32]	@ (8001a08 <__NVIC_SetPriority+0x50>)
 80019e8:	79fb      	ldrb	r3, [r7, #7]
 80019ea:	f003 030f 	and.w	r3, r3, #15
 80019ee:	3b04      	subs	r3, #4
 80019f0:	0112      	lsls	r2, r2, #4
 80019f2:	b2d2      	uxtb	r2, r2
 80019f4:	440b      	add	r3, r1
 80019f6:	761a      	strb	r2, [r3, #24]
}
 80019f8:	bf00      	nop
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bc80      	pop	{r7}
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	e000e100 	.word	0xe000e100
 8001a08:	e000ed00 	.word	0xe000ed00

08001a0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b089      	sub	sp, #36	@ 0x24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f003 0307 	and.w	r3, r3, #7
 8001a1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	f1c3 0307 	rsb	r3, r3, #7
 8001a26:	2b04      	cmp	r3, #4
 8001a28:	bf28      	it	cs
 8001a2a:	2304      	movcs	r3, #4
 8001a2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	3304      	adds	r3, #4
 8001a32:	2b06      	cmp	r3, #6
 8001a34:	d902      	bls.n	8001a3c <NVIC_EncodePriority+0x30>
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	3b03      	subs	r3, #3
 8001a3a:	e000      	b.n	8001a3e <NVIC_EncodePriority+0x32>
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a40:	f04f 32ff 	mov.w	r2, #4294967295
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4a:	43da      	mvns	r2, r3
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	401a      	ands	r2, r3
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a54:	f04f 31ff 	mov.w	r1, #4294967295
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a5e:	43d9      	mvns	r1, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a64:	4313      	orrs	r3, r2
         );
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3724      	adds	r7, #36	@ 0x24
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bc80      	pop	{r7}
 8001a6e:	4770      	bx	lr

08001a70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a80:	d301      	bcc.n	8001a86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a82:	2301      	movs	r3, #1
 8001a84:	e00f      	b.n	8001aa6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a86:	4a0a      	ldr	r2, [pc, #40]	@ (8001ab0 <SysTick_Config+0x40>)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	3b01      	subs	r3, #1
 8001a8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a8e:	210f      	movs	r1, #15
 8001a90:	f04f 30ff 	mov.w	r0, #4294967295
 8001a94:	f7ff ff90 	bl	80019b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a98:	4b05      	ldr	r3, [pc, #20]	@ (8001ab0 <SysTick_Config+0x40>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a9e:	4b04      	ldr	r3, [pc, #16]	@ (8001ab0 <SysTick_Config+0x40>)
 8001aa0:	2207      	movs	r2, #7
 8001aa2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	e000e010 	.word	0xe000e010

08001ab4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f7ff ff2d 	bl	800191c <__NVIC_SetPriorityGrouping>
}
 8001ac2:	bf00      	nop
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b086      	sub	sp, #24
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	60b9      	str	r1, [r7, #8]
 8001ad4:	607a      	str	r2, [r7, #4]
 8001ad6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001adc:	f7ff ff42 	bl	8001964 <__NVIC_GetPriorityGrouping>
 8001ae0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	68b9      	ldr	r1, [r7, #8]
 8001ae6:	6978      	ldr	r0, [r7, #20]
 8001ae8:	f7ff ff90 	bl	8001a0c <NVIC_EncodePriority>
 8001aec:	4602      	mov	r2, r0
 8001aee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001af2:	4611      	mov	r1, r2
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff ff5f 	bl	80019b8 <__NVIC_SetPriority>
}
 8001afa:	bf00      	nop
 8001afc:	3718      	adds	r7, #24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b082      	sub	sp, #8
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	4603      	mov	r3, r0
 8001b0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff ff35 	bl	8001980 <__NVIC_EnableIRQ>
}
 8001b16:	bf00      	nop
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b082      	sub	sp, #8
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f7ff ffa2 	bl	8001a70 <SysTick_Config>
 8001b2c:	4603      	mov	r3, r0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
	...

08001b38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b08b      	sub	sp, #44	@ 0x2c
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b42:	2300      	movs	r3, #0
 8001b44:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b46:	2300      	movs	r3, #0
 8001b48:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b4a:	e161      	b.n	8001e10 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	69fa      	ldr	r2, [r7, #28]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	f040 8150 	bne.w	8001e0a <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	4a97      	ldr	r2, [pc, #604]	@ (8001dcc <HAL_GPIO_Init+0x294>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d05e      	beq.n	8001c32 <HAL_GPIO_Init+0xfa>
 8001b74:	4a95      	ldr	r2, [pc, #596]	@ (8001dcc <HAL_GPIO_Init+0x294>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d875      	bhi.n	8001c66 <HAL_GPIO_Init+0x12e>
 8001b7a:	4a95      	ldr	r2, [pc, #596]	@ (8001dd0 <HAL_GPIO_Init+0x298>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d058      	beq.n	8001c32 <HAL_GPIO_Init+0xfa>
 8001b80:	4a93      	ldr	r2, [pc, #588]	@ (8001dd0 <HAL_GPIO_Init+0x298>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d86f      	bhi.n	8001c66 <HAL_GPIO_Init+0x12e>
 8001b86:	4a93      	ldr	r2, [pc, #588]	@ (8001dd4 <HAL_GPIO_Init+0x29c>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d052      	beq.n	8001c32 <HAL_GPIO_Init+0xfa>
 8001b8c:	4a91      	ldr	r2, [pc, #580]	@ (8001dd4 <HAL_GPIO_Init+0x29c>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d869      	bhi.n	8001c66 <HAL_GPIO_Init+0x12e>
 8001b92:	4a91      	ldr	r2, [pc, #580]	@ (8001dd8 <HAL_GPIO_Init+0x2a0>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d04c      	beq.n	8001c32 <HAL_GPIO_Init+0xfa>
 8001b98:	4a8f      	ldr	r2, [pc, #572]	@ (8001dd8 <HAL_GPIO_Init+0x2a0>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d863      	bhi.n	8001c66 <HAL_GPIO_Init+0x12e>
 8001b9e:	4a8f      	ldr	r2, [pc, #572]	@ (8001ddc <HAL_GPIO_Init+0x2a4>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d046      	beq.n	8001c32 <HAL_GPIO_Init+0xfa>
 8001ba4:	4a8d      	ldr	r2, [pc, #564]	@ (8001ddc <HAL_GPIO_Init+0x2a4>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d85d      	bhi.n	8001c66 <HAL_GPIO_Init+0x12e>
 8001baa:	2b12      	cmp	r3, #18
 8001bac:	d82a      	bhi.n	8001c04 <HAL_GPIO_Init+0xcc>
 8001bae:	2b12      	cmp	r3, #18
 8001bb0:	d859      	bhi.n	8001c66 <HAL_GPIO_Init+0x12e>
 8001bb2:	a201      	add	r2, pc, #4	@ (adr r2, 8001bb8 <HAL_GPIO_Init+0x80>)
 8001bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bb8:	08001c33 	.word	0x08001c33
 8001bbc:	08001c0d 	.word	0x08001c0d
 8001bc0:	08001c1f 	.word	0x08001c1f
 8001bc4:	08001c61 	.word	0x08001c61
 8001bc8:	08001c67 	.word	0x08001c67
 8001bcc:	08001c67 	.word	0x08001c67
 8001bd0:	08001c67 	.word	0x08001c67
 8001bd4:	08001c67 	.word	0x08001c67
 8001bd8:	08001c67 	.word	0x08001c67
 8001bdc:	08001c67 	.word	0x08001c67
 8001be0:	08001c67 	.word	0x08001c67
 8001be4:	08001c67 	.word	0x08001c67
 8001be8:	08001c67 	.word	0x08001c67
 8001bec:	08001c67 	.word	0x08001c67
 8001bf0:	08001c67 	.word	0x08001c67
 8001bf4:	08001c67 	.word	0x08001c67
 8001bf8:	08001c67 	.word	0x08001c67
 8001bfc:	08001c15 	.word	0x08001c15
 8001c00:	08001c29 	.word	0x08001c29
 8001c04:	4a76      	ldr	r2, [pc, #472]	@ (8001de0 <HAL_GPIO_Init+0x2a8>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d013      	beq.n	8001c32 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c0a:	e02c      	b.n	8001c66 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	623b      	str	r3, [r7, #32]
          break;
 8001c12:	e029      	b.n	8001c68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	3304      	adds	r3, #4
 8001c1a:	623b      	str	r3, [r7, #32]
          break;
 8001c1c:	e024      	b.n	8001c68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	3308      	adds	r3, #8
 8001c24:	623b      	str	r3, [r7, #32]
          break;
 8001c26:	e01f      	b.n	8001c68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	330c      	adds	r3, #12
 8001c2e:	623b      	str	r3, [r7, #32]
          break;
 8001c30:	e01a      	b.n	8001c68 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d102      	bne.n	8001c40 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c3a:	2304      	movs	r3, #4
 8001c3c:	623b      	str	r3, [r7, #32]
          break;
 8001c3e:	e013      	b.n	8001c68 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d105      	bne.n	8001c54 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c48:	2308      	movs	r3, #8
 8001c4a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	69fa      	ldr	r2, [r7, #28]
 8001c50:	611a      	str	r2, [r3, #16]
          break;
 8001c52:	e009      	b.n	8001c68 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c54:	2308      	movs	r3, #8
 8001c56:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	69fa      	ldr	r2, [r7, #28]
 8001c5c:	615a      	str	r2, [r3, #20]
          break;
 8001c5e:	e003      	b.n	8001c68 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c60:	2300      	movs	r3, #0
 8001c62:	623b      	str	r3, [r7, #32]
          break;
 8001c64:	e000      	b.n	8001c68 <HAL_GPIO_Init+0x130>
          break;
 8001c66:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	2bff      	cmp	r3, #255	@ 0xff
 8001c6c:	d801      	bhi.n	8001c72 <HAL_GPIO_Init+0x13a>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	e001      	b.n	8001c76 <HAL_GPIO_Init+0x13e>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	3304      	adds	r3, #4
 8001c76:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	2bff      	cmp	r3, #255	@ 0xff
 8001c7c:	d802      	bhi.n	8001c84 <HAL_GPIO_Init+0x14c>
 8001c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	e002      	b.n	8001c8a <HAL_GPIO_Init+0x152>
 8001c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c86:	3b08      	subs	r3, #8
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	210f      	movs	r1, #15
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	fa01 f303 	lsl.w	r3, r1, r3
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	401a      	ands	r2, r3
 8001c9c:	6a39      	ldr	r1, [r7, #32]
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca4:	431a      	orrs	r2, r3
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f000 80a9 	beq.w	8001e0a <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001cb8:	4b4a      	ldr	r3, [pc, #296]	@ (8001de4 <HAL_GPIO_Init+0x2ac>)
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	4a49      	ldr	r2, [pc, #292]	@ (8001de4 <HAL_GPIO_Init+0x2ac>)
 8001cbe:	f043 0301 	orr.w	r3, r3, #1
 8001cc2:	6193      	str	r3, [r2, #24]
 8001cc4:	4b47      	ldr	r3, [pc, #284]	@ (8001de4 <HAL_GPIO_Init+0x2ac>)
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	f003 0301 	and.w	r3, r3, #1
 8001ccc:	60bb      	str	r3, [r7, #8]
 8001cce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001cd0:	4a45      	ldr	r2, [pc, #276]	@ (8001de8 <HAL_GPIO_Init+0x2b0>)
 8001cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cd4:	089b      	lsrs	r3, r3, #2
 8001cd6:	3302      	adds	r3, #2
 8001cd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cdc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce0:	f003 0303 	and.w	r3, r3, #3
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	220f      	movs	r2, #15
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	43db      	mvns	r3, r3
 8001cee:	68fa      	ldr	r2, [r7, #12]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	4a3d      	ldr	r2, [pc, #244]	@ (8001dec <HAL_GPIO_Init+0x2b4>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d00d      	beq.n	8001d18 <HAL_GPIO_Init+0x1e0>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	4a3c      	ldr	r2, [pc, #240]	@ (8001df0 <HAL_GPIO_Init+0x2b8>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d007      	beq.n	8001d14 <HAL_GPIO_Init+0x1dc>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	4a3b      	ldr	r2, [pc, #236]	@ (8001df4 <HAL_GPIO_Init+0x2bc>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d101      	bne.n	8001d10 <HAL_GPIO_Init+0x1d8>
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	e004      	b.n	8001d1a <HAL_GPIO_Init+0x1e2>
 8001d10:	2303      	movs	r3, #3
 8001d12:	e002      	b.n	8001d1a <HAL_GPIO_Init+0x1e2>
 8001d14:	2301      	movs	r3, #1
 8001d16:	e000      	b.n	8001d1a <HAL_GPIO_Init+0x1e2>
 8001d18:	2300      	movs	r3, #0
 8001d1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d1c:	f002 0203 	and.w	r2, r2, #3
 8001d20:	0092      	lsls	r2, r2, #2
 8001d22:	4093      	lsls	r3, r2
 8001d24:	68fa      	ldr	r2, [r7, #12]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d2a:	492f      	ldr	r1, [pc, #188]	@ (8001de8 <HAL_GPIO_Init+0x2b0>)
 8001d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d2e:	089b      	lsrs	r3, r3, #2
 8001d30:	3302      	adds	r3, #2
 8001d32:	68fa      	ldr	r2, [r7, #12]
 8001d34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d006      	beq.n	8001d52 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d44:	4b2c      	ldr	r3, [pc, #176]	@ (8001df8 <HAL_GPIO_Init+0x2c0>)
 8001d46:	689a      	ldr	r2, [r3, #8]
 8001d48:	492b      	ldr	r1, [pc, #172]	@ (8001df8 <HAL_GPIO_Init+0x2c0>)
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	608b      	str	r3, [r1, #8]
 8001d50:	e006      	b.n	8001d60 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d52:	4b29      	ldr	r3, [pc, #164]	@ (8001df8 <HAL_GPIO_Init+0x2c0>)
 8001d54:	689a      	ldr	r2, [r3, #8]
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	4927      	ldr	r1, [pc, #156]	@ (8001df8 <HAL_GPIO_Init+0x2c0>)
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d006      	beq.n	8001d7a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d6c:	4b22      	ldr	r3, [pc, #136]	@ (8001df8 <HAL_GPIO_Init+0x2c0>)
 8001d6e:	68da      	ldr	r2, [r3, #12]
 8001d70:	4921      	ldr	r1, [pc, #132]	@ (8001df8 <HAL_GPIO_Init+0x2c0>)
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	60cb      	str	r3, [r1, #12]
 8001d78:	e006      	b.n	8001d88 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d7a:	4b1f      	ldr	r3, [pc, #124]	@ (8001df8 <HAL_GPIO_Init+0x2c0>)
 8001d7c:	68da      	ldr	r2, [r3, #12]
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	43db      	mvns	r3, r3
 8001d82:	491d      	ldr	r1, [pc, #116]	@ (8001df8 <HAL_GPIO_Init+0x2c0>)
 8001d84:	4013      	ands	r3, r2
 8001d86:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d006      	beq.n	8001da2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d94:	4b18      	ldr	r3, [pc, #96]	@ (8001df8 <HAL_GPIO_Init+0x2c0>)
 8001d96:	685a      	ldr	r2, [r3, #4]
 8001d98:	4917      	ldr	r1, [pc, #92]	@ (8001df8 <HAL_GPIO_Init+0x2c0>)
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	604b      	str	r3, [r1, #4]
 8001da0:	e006      	b.n	8001db0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001da2:	4b15      	ldr	r3, [pc, #84]	@ (8001df8 <HAL_GPIO_Init+0x2c0>)
 8001da4:	685a      	ldr	r2, [r3, #4]
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	43db      	mvns	r3, r3
 8001daa:	4913      	ldr	r1, [pc, #76]	@ (8001df8 <HAL_GPIO_Init+0x2c0>)
 8001dac:	4013      	ands	r3, r2
 8001dae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d01f      	beq.n	8001dfc <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001dbc:	4b0e      	ldr	r3, [pc, #56]	@ (8001df8 <HAL_GPIO_Init+0x2c0>)
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	490d      	ldr	r1, [pc, #52]	@ (8001df8 <HAL_GPIO_Init+0x2c0>)
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	600b      	str	r3, [r1, #0]
 8001dc8:	e01f      	b.n	8001e0a <HAL_GPIO_Init+0x2d2>
 8001dca:	bf00      	nop
 8001dcc:	10320000 	.word	0x10320000
 8001dd0:	10310000 	.word	0x10310000
 8001dd4:	10220000 	.word	0x10220000
 8001dd8:	10210000 	.word	0x10210000
 8001ddc:	10120000 	.word	0x10120000
 8001de0:	10110000 	.word	0x10110000
 8001de4:	40021000 	.word	0x40021000
 8001de8:	40010000 	.word	0x40010000
 8001dec:	40010800 	.word	0x40010800
 8001df0:	40010c00 	.word	0x40010c00
 8001df4:	40011000 	.word	0x40011000
 8001df8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8001e2c <HAL_GPIO_Init+0x2f4>)
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	43db      	mvns	r3, r3
 8001e04:	4909      	ldr	r1, [pc, #36]	@ (8001e2c <HAL_GPIO_Init+0x2f4>)
 8001e06:	4013      	ands	r3, r2
 8001e08:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e16:	fa22 f303 	lsr.w	r3, r2, r3
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	f47f ae96 	bne.w	8001b4c <HAL_GPIO_Init+0x14>
  }
}
 8001e20:	bf00      	nop
 8001e22:	bf00      	nop
 8001e24:	372c      	adds	r7, #44	@ 0x2c
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bc80      	pop	{r7}
 8001e2a:	4770      	bx	lr
 8001e2c:	40010400 	.word	0x40010400

08001e30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b085      	sub	sp, #20
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	460b      	mov	r3, r1
 8001e3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689a      	ldr	r2, [r3, #8]
 8001e40:	887b      	ldrh	r3, [r7, #2]
 8001e42:	4013      	ands	r3, r2
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d002      	beq.n	8001e4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	73fb      	strb	r3, [r7, #15]
 8001e4c:	e001      	b.n	8001e52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3714      	adds	r7, #20
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bc80      	pop	{r7}
 8001e5c:	4770      	bx	lr

08001e5e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	b083      	sub	sp, #12
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
 8001e66:	460b      	mov	r3, r1
 8001e68:	807b      	strh	r3, [r7, #2]
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e6e:	787b      	ldrb	r3, [r7, #1]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d003      	beq.n	8001e7c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e74:	887a      	ldrh	r2, [r7, #2]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e7a:	e003      	b.n	8001e84 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e7c:	887b      	ldrh	r3, [r7, #2]
 8001e7e:	041a      	lsls	r2, r3, #16
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	611a      	str	r2, [r3, #16]
}
 8001e84:	bf00      	nop
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bc80      	pop	{r7}
 8001e8c:	4770      	bx	lr

08001e8e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	b085      	sub	sp, #20
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
 8001e96:	460b      	mov	r3, r1
 8001e98:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ea0:	887a      	ldrh	r2, [r7, #2]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	041a      	lsls	r2, r3, #16
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	43d9      	mvns	r1, r3
 8001eac:	887b      	ldrh	r3, [r7, #2]
 8001eae:	400b      	ands	r3, r1
 8001eb0:	431a      	orrs	r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	611a      	str	r2, [r3, #16]
}
 8001eb6:	bf00      	nop
 8001eb8:	3714      	adds	r7, #20
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bc80      	pop	{r7}
 8001ebe:	4770      	bx	lr

08001ec0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d101      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e272      	b.n	80023b8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	f000 8087 	beq.w	8001fee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ee0:	4b92      	ldr	r3, [pc, #584]	@ (800212c <HAL_RCC_OscConfig+0x26c>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f003 030c 	and.w	r3, r3, #12
 8001ee8:	2b04      	cmp	r3, #4
 8001eea:	d00c      	beq.n	8001f06 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001eec:	4b8f      	ldr	r3, [pc, #572]	@ (800212c <HAL_RCC_OscConfig+0x26c>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f003 030c 	and.w	r3, r3, #12
 8001ef4:	2b08      	cmp	r3, #8
 8001ef6:	d112      	bne.n	8001f1e <HAL_RCC_OscConfig+0x5e>
 8001ef8:	4b8c      	ldr	r3, [pc, #560]	@ (800212c <HAL_RCC_OscConfig+0x26c>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f04:	d10b      	bne.n	8001f1e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f06:	4b89      	ldr	r3, [pc, #548]	@ (800212c <HAL_RCC_OscConfig+0x26c>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d06c      	beq.n	8001fec <HAL_RCC_OscConfig+0x12c>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d168      	bne.n	8001fec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e24c      	b.n	80023b8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f26:	d106      	bne.n	8001f36 <HAL_RCC_OscConfig+0x76>
 8001f28:	4b80      	ldr	r3, [pc, #512]	@ (800212c <HAL_RCC_OscConfig+0x26c>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a7f      	ldr	r2, [pc, #508]	@ (800212c <HAL_RCC_OscConfig+0x26c>)
 8001f2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f32:	6013      	str	r3, [r2, #0]
 8001f34:	e02e      	b.n	8001f94 <HAL_RCC_OscConfig+0xd4>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d10c      	bne.n	8001f58 <HAL_RCC_OscConfig+0x98>
 8001f3e:	4b7b      	ldr	r3, [pc, #492]	@ (800212c <HAL_RCC_OscConfig+0x26c>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a7a      	ldr	r2, [pc, #488]	@ (800212c <HAL_RCC_OscConfig+0x26c>)
 8001f44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f48:	6013      	str	r3, [r2, #0]
 8001f4a:	4b78      	ldr	r3, [pc, #480]	@ (800212c <HAL_RCC_OscConfig+0x26c>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a77      	ldr	r2, [pc, #476]	@ (800212c <HAL_RCC_OscConfig+0x26c>)
 8001f50:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f54:	6013      	str	r3, [r2, #0]
 8001f56:	e01d      	b.n	8001f94 <HAL_RCC_OscConfig+0xd4>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f60:	d10c      	bne.n	8001f7c <HAL_RCC_OscConfig+0xbc>
 8001f62:	4b72      	ldr	r3, [pc, #456]	@ (800212c <HAL_RCC_OscConfig+0x26c>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a71      	ldr	r2, [pc, #452]	@ (800212c <HAL_RCC_OscConfig+0x26c>)
 8001f68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f6c:	6013      	str	r3, [r2, #0]
 8001f6e:	4b6f      	ldr	r3, [pc, #444]	@ (800212c <HAL_RCC_OscConfig+0x26c>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a6e      	ldr	r2, [pc, #440]	@ (800212c <HAL_RCC_OscConfig+0x26c>)
 8001f74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f78:	6013      	str	r3, [r2, #0]
 8001f7a:	e00b      	b.n	8001f94 <HAL_RCC_OscConfig+0xd4>
 8001f7c:	4b6b      	ldr	r3, [pc, #428]	@ (800212c <HAL_RCC_OscConfig+0x26c>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a6a      	ldr	r2, [pc, #424]	@ (800212c <HAL_RCC_OscConfig+0x26c>)
 8001f82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f86:	6013      	str	r3, [r2, #0]
 8001f88:	4b68      	ldr	r3, [pc, #416]	@ (800212c <HAL_RCC_OscConfig+0x26c>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a67      	ldr	r2, [pc, #412]	@ (800212c <HAL_RCC_OscConfig+0x26c>)
 8001f8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f92:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d013      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f9c:	f7ff fcb4 	bl	8001908 <HAL_GetTick>
 8001fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fa2:	e008      	b.n	8001fb6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fa4:	f7ff fcb0 	bl	8001908 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b64      	cmp	r3, #100	@ 0x64
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e200      	b.n	80023b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fb6:	4b5d      	ldr	r3, [pc, #372]	@ (800212c <HAL_RCC_OscConfig+0x26c>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d0f0      	beq.n	8001fa4 <HAL_RCC_OscConfig+0xe4>
 8001fc2:	e014      	b.n	8001fee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc4:	f7ff fca0 	bl	8001908 <HAL_GetTick>
 8001fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fca:	e008      	b.n	8001fde <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fcc:	f7ff fc9c 	bl	8001908 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b64      	cmp	r3, #100	@ 0x64
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e1ec      	b.n	80023b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fde:	4b53      	ldr	r3, [pc, #332]	@ (800212c <HAL_RCC_OscConfig+0x26c>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d1f0      	bne.n	8001fcc <HAL_RCC_OscConfig+0x10c>
 8001fea:	e000      	b.n	8001fee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d063      	beq.n	80020c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ffa:	4b4c      	ldr	r3, [pc, #304]	@ (800212c <HAL_RCC_OscConfig+0x26c>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f003 030c 	and.w	r3, r3, #12
 8002002:	2b00      	cmp	r3, #0
 8002004:	d00b      	beq.n	800201e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002006:	4b49      	ldr	r3, [pc, #292]	@ (800212c <HAL_RCC_OscConfig+0x26c>)
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f003 030c 	and.w	r3, r3, #12
 800200e:	2b08      	cmp	r3, #8
 8002010:	d11c      	bne.n	800204c <HAL_RCC_OscConfig+0x18c>
 8002012:	4b46      	ldr	r3, [pc, #280]	@ (800212c <HAL_RCC_OscConfig+0x26c>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d116      	bne.n	800204c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800201e:	4b43      	ldr	r3, [pc, #268]	@ (800212c <HAL_RCC_OscConfig+0x26c>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d005      	beq.n	8002036 <HAL_RCC_OscConfig+0x176>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	2b01      	cmp	r3, #1
 8002030:	d001      	beq.n	8002036 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e1c0      	b.n	80023b8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002036:	4b3d      	ldr	r3, [pc, #244]	@ (800212c <HAL_RCC_OscConfig+0x26c>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	695b      	ldr	r3, [r3, #20]
 8002042:	00db      	lsls	r3, r3, #3
 8002044:	4939      	ldr	r1, [pc, #228]	@ (800212c <HAL_RCC_OscConfig+0x26c>)
 8002046:	4313      	orrs	r3, r2
 8002048:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800204a:	e03a      	b.n	80020c2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	691b      	ldr	r3, [r3, #16]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d020      	beq.n	8002096 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002054:	4b36      	ldr	r3, [pc, #216]	@ (8002130 <HAL_RCC_OscConfig+0x270>)
 8002056:	2201      	movs	r2, #1
 8002058:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800205a:	f7ff fc55 	bl	8001908 <HAL_GetTick>
 800205e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002060:	e008      	b.n	8002074 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002062:	f7ff fc51 	bl	8001908 <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	2b02      	cmp	r3, #2
 800206e:	d901      	bls.n	8002074 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e1a1      	b.n	80023b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002074:	4b2d      	ldr	r3, [pc, #180]	@ (800212c <HAL_RCC_OscConfig+0x26c>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0302 	and.w	r3, r3, #2
 800207c:	2b00      	cmp	r3, #0
 800207e:	d0f0      	beq.n	8002062 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002080:	4b2a      	ldr	r3, [pc, #168]	@ (800212c <HAL_RCC_OscConfig+0x26c>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	695b      	ldr	r3, [r3, #20]
 800208c:	00db      	lsls	r3, r3, #3
 800208e:	4927      	ldr	r1, [pc, #156]	@ (800212c <HAL_RCC_OscConfig+0x26c>)
 8002090:	4313      	orrs	r3, r2
 8002092:	600b      	str	r3, [r1, #0]
 8002094:	e015      	b.n	80020c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002096:	4b26      	ldr	r3, [pc, #152]	@ (8002130 <HAL_RCC_OscConfig+0x270>)
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800209c:	f7ff fc34 	bl	8001908 <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020a2:	e008      	b.n	80020b6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020a4:	f7ff fc30 	bl	8001908 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e180      	b.n	80023b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020b6:	4b1d      	ldr	r3, [pc, #116]	@ (800212c <HAL_RCC_OscConfig+0x26c>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d1f0      	bne.n	80020a4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0308 	and.w	r3, r3, #8
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d03a      	beq.n	8002144 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	699b      	ldr	r3, [r3, #24]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d019      	beq.n	800210a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020d6:	4b17      	ldr	r3, [pc, #92]	@ (8002134 <HAL_RCC_OscConfig+0x274>)
 80020d8:	2201      	movs	r2, #1
 80020da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020dc:	f7ff fc14 	bl	8001908 <HAL_GetTick>
 80020e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020e2:	e008      	b.n	80020f6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020e4:	f7ff fc10 	bl	8001908 <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e160      	b.n	80023b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020f6:	4b0d      	ldr	r3, [pc, #52]	@ (800212c <HAL_RCC_OscConfig+0x26c>)
 80020f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d0f0      	beq.n	80020e4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002102:	2001      	movs	r0, #1
 8002104:	f000 fa9c 	bl	8002640 <RCC_Delay>
 8002108:	e01c      	b.n	8002144 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800210a:	4b0a      	ldr	r3, [pc, #40]	@ (8002134 <HAL_RCC_OscConfig+0x274>)
 800210c:	2200      	movs	r2, #0
 800210e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002110:	f7ff fbfa 	bl	8001908 <HAL_GetTick>
 8002114:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002116:	e00f      	b.n	8002138 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002118:	f7ff fbf6 	bl	8001908 <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b02      	cmp	r3, #2
 8002124:	d908      	bls.n	8002138 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e146      	b.n	80023b8 <HAL_RCC_OscConfig+0x4f8>
 800212a:	bf00      	nop
 800212c:	40021000 	.word	0x40021000
 8002130:	42420000 	.word	0x42420000
 8002134:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002138:	4b92      	ldr	r3, [pc, #584]	@ (8002384 <HAL_RCC_OscConfig+0x4c4>)
 800213a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800213c:	f003 0302 	and.w	r3, r3, #2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d1e9      	bne.n	8002118 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0304 	and.w	r3, r3, #4
 800214c:	2b00      	cmp	r3, #0
 800214e:	f000 80a6 	beq.w	800229e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002152:	2300      	movs	r3, #0
 8002154:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002156:	4b8b      	ldr	r3, [pc, #556]	@ (8002384 <HAL_RCC_OscConfig+0x4c4>)
 8002158:	69db      	ldr	r3, [r3, #28]
 800215a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d10d      	bne.n	800217e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002162:	4b88      	ldr	r3, [pc, #544]	@ (8002384 <HAL_RCC_OscConfig+0x4c4>)
 8002164:	69db      	ldr	r3, [r3, #28]
 8002166:	4a87      	ldr	r2, [pc, #540]	@ (8002384 <HAL_RCC_OscConfig+0x4c4>)
 8002168:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800216c:	61d3      	str	r3, [r2, #28]
 800216e:	4b85      	ldr	r3, [pc, #532]	@ (8002384 <HAL_RCC_OscConfig+0x4c4>)
 8002170:	69db      	ldr	r3, [r3, #28]
 8002172:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002176:	60bb      	str	r3, [r7, #8]
 8002178:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800217a:	2301      	movs	r3, #1
 800217c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800217e:	4b82      	ldr	r3, [pc, #520]	@ (8002388 <HAL_RCC_OscConfig+0x4c8>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002186:	2b00      	cmp	r3, #0
 8002188:	d118      	bne.n	80021bc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800218a:	4b7f      	ldr	r3, [pc, #508]	@ (8002388 <HAL_RCC_OscConfig+0x4c8>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a7e      	ldr	r2, [pc, #504]	@ (8002388 <HAL_RCC_OscConfig+0x4c8>)
 8002190:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002194:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002196:	f7ff fbb7 	bl	8001908 <HAL_GetTick>
 800219a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800219c:	e008      	b.n	80021b0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800219e:	f7ff fbb3 	bl	8001908 <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	2b64      	cmp	r3, #100	@ 0x64
 80021aa:	d901      	bls.n	80021b0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e103      	b.n	80023b8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021b0:	4b75      	ldr	r3, [pc, #468]	@ (8002388 <HAL_RCC_OscConfig+0x4c8>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d0f0      	beq.n	800219e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d106      	bne.n	80021d2 <HAL_RCC_OscConfig+0x312>
 80021c4:	4b6f      	ldr	r3, [pc, #444]	@ (8002384 <HAL_RCC_OscConfig+0x4c4>)
 80021c6:	6a1b      	ldr	r3, [r3, #32]
 80021c8:	4a6e      	ldr	r2, [pc, #440]	@ (8002384 <HAL_RCC_OscConfig+0x4c4>)
 80021ca:	f043 0301 	orr.w	r3, r3, #1
 80021ce:	6213      	str	r3, [r2, #32]
 80021d0:	e02d      	b.n	800222e <HAL_RCC_OscConfig+0x36e>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d10c      	bne.n	80021f4 <HAL_RCC_OscConfig+0x334>
 80021da:	4b6a      	ldr	r3, [pc, #424]	@ (8002384 <HAL_RCC_OscConfig+0x4c4>)
 80021dc:	6a1b      	ldr	r3, [r3, #32]
 80021de:	4a69      	ldr	r2, [pc, #420]	@ (8002384 <HAL_RCC_OscConfig+0x4c4>)
 80021e0:	f023 0301 	bic.w	r3, r3, #1
 80021e4:	6213      	str	r3, [r2, #32]
 80021e6:	4b67      	ldr	r3, [pc, #412]	@ (8002384 <HAL_RCC_OscConfig+0x4c4>)
 80021e8:	6a1b      	ldr	r3, [r3, #32]
 80021ea:	4a66      	ldr	r2, [pc, #408]	@ (8002384 <HAL_RCC_OscConfig+0x4c4>)
 80021ec:	f023 0304 	bic.w	r3, r3, #4
 80021f0:	6213      	str	r3, [r2, #32]
 80021f2:	e01c      	b.n	800222e <HAL_RCC_OscConfig+0x36e>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	2b05      	cmp	r3, #5
 80021fa:	d10c      	bne.n	8002216 <HAL_RCC_OscConfig+0x356>
 80021fc:	4b61      	ldr	r3, [pc, #388]	@ (8002384 <HAL_RCC_OscConfig+0x4c4>)
 80021fe:	6a1b      	ldr	r3, [r3, #32]
 8002200:	4a60      	ldr	r2, [pc, #384]	@ (8002384 <HAL_RCC_OscConfig+0x4c4>)
 8002202:	f043 0304 	orr.w	r3, r3, #4
 8002206:	6213      	str	r3, [r2, #32]
 8002208:	4b5e      	ldr	r3, [pc, #376]	@ (8002384 <HAL_RCC_OscConfig+0x4c4>)
 800220a:	6a1b      	ldr	r3, [r3, #32]
 800220c:	4a5d      	ldr	r2, [pc, #372]	@ (8002384 <HAL_RCC_OscConfig+0x4c4>)
 800220e:	f043 0301 	orr.w	r3, r3, #1
 8002212:	6213      	str	r3, [r2, #32]
 8002214:	e00b      	b.n	800222e <HAL_RCC_OscConfig+0x36e>
 8002216:	4b5b      	ldr	r3, [pc, #364]	@ (8002384 <HAL_RCC_OscConfig+0x4c4>)
 8002218:	6a1b      	ldr	r3, [r3, #32]
 800221a:	4a5a      	ldr	r2, [pc, #360]	@ (8002384 <HAL_RCC_OscConfig+0x4c4>)
 800221c:	f023 0301 	bic.w	r3, r3, #1
 8002220:	6213      	str	r3, [r2, #32]
 8002222:	4b58      	ldr	r3, [pc, #352]	@ (8002384 <HAL_RCC_OscConfig+0x4c4>)
 8002224:	6a1b      	ldr	r3, [r3, #32]
 8002226:	4a57      	ldr	r2, [pc, #348]	@ (8002384 <HAL_RCC_OscConfig+0x4c4>)
 8002228:	f023 0304 	bic.w	r3, r3, #4
 800222c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d015      	beq.n	8002262 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002236:	f7ff fb67 	bl	8001908 <HAL_GetTick>
 800223a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800223c:	e00a      	b.n	8002254 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800223e:	f7ff fb63 	bl	8001908 <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	f241 3288 	movw	r2, #5000	@ 0x1388
 800224c:	4293      	cmp	r3, r2
 800224e:	d901      	bls.n	8002254 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e0b1      	b.n	80023b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002254:	4b4b      	ldr	r3, [pc, #300]	@ (8002384 <HAL_RCC_OscConfig+0x4c4>)
 8002256:	6a1b      	ldr	r3, [r3, #32]
 8002258:	f003 0302 	and.w	r3, r3, #2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d0ee      	beq.n	800223e <HAL_RCC_OscConfig+0x37e>
 8002260:	e014      	b.n	800228c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002262:	f7ff fb51 	bl	8001908 <HAL_GetTick>
 8002266:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002268:	e00a      	b.n	8002280 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800226a:	f7ff fb4d 	bl	8001908 <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002278:	4293      	cmp	r3, r2
 800227a:	d901      	bls.n	8002280 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e09b      	b.n	80023b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002280:	4b40      	ldr	r3, [pc, #256]	@ (8002384 <HAL_RCC_OscConfig+0x4c4>)
 8002282:	6a1b      	ldr	r3, [r3, #32]
 8002284:	f003 0302 	and.w	r3, r3, #2
 8002288:	2b00      	cmp	r3, #0
 800228a:	d1ee      	bne.n	800226a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800228c:	7dfb      	ldrb	r3, [r7, #23]
 800228e:	2b01      	cmp	r3, #1
 8002290:	d105      	bne.n	800229e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002292:	4b3c      	ldr	r3, [pc, #240]	@ (8002384 <HAL_RCC_OscConfig+0x4c4>)
 8002294:	69db      	ldr	r3, [r3, #28]
 8002296:	4a3b      	ldr	r2, [pc, #236]	@ (8002384 <HAL_RCC_OscConfig+0x4c4>)
 8002298:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800229c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	69db      	ldr	r3, [r3, #28]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	f000 8087 	beq.w	80023b6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022a8:	4b36      	ldr	r3, [pc, #216]	@ (8002384 <HAL_RCC_OscConfig+0x4c4>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f003 030c 	and.w	r3, r3, #12
 80022b0:	2b08      	cmp	r3, #8
 80022b2:	d061      	beq.n	8002378 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	69db      	ldr	r3, [r3, #28]
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d146      	bne.n	800234a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022bc:	4b33      	ldr	r3, [pc, #204]	@ (800238c <HAL_RCC_OscConfig+0x4cc>)
 80022be:	2200      	movs	r2, #0
 80022c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c2:	f7ff fb21 	bl	8001908 <HAL_GetTick>
 80022c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022c8:	e008      	b.n	80022dc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ca:	f7ff fb1d 	bl	8001908 <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d901      	bls.n	80022dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e06d      	b.n	80023b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022dc:	4b29      	ldr	r3, [pc, #164]	@ (8002384 <HAL_RCC_OscConfig+0x4c4>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d1f0      	bne.n	80022ca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6a1b      	ldr	r3, [r3, #32]
 80022ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022f0:	d108      	bne.n	8002304 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80022f2:	4b24      	ldr	r3, [pc, #144]	@ (8002384 <HAL_RCC_OscConfig+0x4c4>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	4921      	ldr	r1, [pc, #132]	@ (8002384 <HAL_RCC_OscConfig+0x4c4>)
 8002300:	4313      	orrs	r3, r2
 8002302:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002304:	4b1f      	ldr	r3, [pc, #124]	@ (8002384 <HAL_RCC_OscConfig+0x4c4>)
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6a19      	ldr	r1, [r3, #32]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002314:	430b      	orrs	r3, r1
 8002316:	491b      	ldr	r1, [pc, #108]	@ (8002384 <HAL_RCC_OscConfig+0x4c4>)
 8002318:	4313      	orrs	r3, r2
 800231a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800231c:	4b1b      	ldr	r3, [pc, #108]	@ (800238c <HAL_RCC_OscConfig+0x4cc>)
 800231e:	2201      	movs	r2, #1
 8002320:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002322:	f7ff faf1 	bl	8001908 <HAL_GetTick>
 8002326:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002328:	e008      	b.n	800233c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800232a:	f7ff faed 	bl	8001908 <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	2b02      	cmp	r3, #2
 8002336:	d901      	bls.n	800233c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e03d      	b.n	80023b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800233c:	4b11      	ldr	r3, [pc, #68]	@ (8002384 <HAL_RCC_OscConfig+0x4c4>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d0f0      	beq.n	800232a <HAL_RCC_OscConfig+0x46a>
 8002348:	e035      	b.n	80023b6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800234a:	4b10      	ldr	r3, [pc, #64]	@ (800238c <HAL_RCC_OscConfig+0x4cc>)
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002350:	f7ff fada 	bl	8001908 <HAL_GetTick>
 8002354:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002356:	e008      	b.n	800236a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002358:	f7ff fad6 	bl	8001908 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b02      	cmp	r3, #2
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e026      	b.n	80023b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800236a:	4b06      	ldr	r3, [pc, #24]	@ (8002384 <HAL_RCC_OscConfig+0x4c4>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d1f0      	bne.n	8002358 <HAL_RCC_OscConfig+0x498>
 8002376:	e01e      	b.n	80023b6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	69db      	ldr	r3, [r3, #28]
 800237c:	2b01      	cmp	r3, #1
 800237e:	d107      	bne.n	8002390 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e019      	b.n	80023b8 <HAL_RCC_OscConfig+0x4f8>
 8002384:	40021000 	.word	0x40021000
 8002388:	40007000 	.word	0x40007000
 800238c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002390:	4b0b      	ldr	r3, [pc, #44]	@ (80023c0 <HAL_RCC_OscConfig+0x500>)
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6a1b      	ldr	r3, [r3, #32]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d106      	bne.n	80023b2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d001      	beq.n	80023b6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e000      	b.n	80023b8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3718      	adds	r7, #24
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	40021000 	.word	0x40021000

080023c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d101      	bne.n	80023d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e0d0      	b.n	800257a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023d8:	4b6a      	ldr	r3, [pc, #424]	@ (8002584 <HAL_RCC_ClockConfig+0x1c0>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0307 	and.w	r3, r3, #7
 80023e0:	683a      	ldr	r2, [r7, #0]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d910      	bls.n	8002408 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023e6:	4b67      	ldr	r3, [pc, #412]	@ (8002584 <HAL_RCC_ClockConfig+0x1c0>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f023 0207 	bic.w	r2, r3, #7
 80023ee:	4965      	ldr	r1, [pc, #404]	@ (8002584 <HAL_RCC_ClockConfig+0x1c0>)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023f6:	4b63      	ldr	r3, [pc, #396]	@ (8002584 <HAL_RCC_ClockConfig+0x1c0>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0307 	and.w	r3, r3, #7
 80023fe:	683a      	ldr	r2, [r7, #0]
 8002400:	429a      	cmp	r2, r3
 8002402:	d001      	beq.n	8002408 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e0b8      	b.n	800257a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0302 	and.w	r3, r3, #2
 8002410:	2b00      	cmp	r3, #0
 8002412:	d020      	beq.n	8002456 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0304 	and.w	r3, r3, #4
 800241c:	2b00      	cmp	r3, #0
 800241e:	d005      	beq.n	800242c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002420:	4b59      	ldr	r3, [pc, #356]	@ (8002588 <HAL_RCC_ClockConfig+0x1c4>)
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	4a58      	ldr	r2, [pc, #352]	@ (8002588 <HAL_RCC_ClockConfig+0x1c4>)
 8002426:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800242a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0308 	and.w	r3, r3, #8
 8002434:	2b00      	cmp	r3, #0
 8002436:	d005      	beq.n	8002444 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002438:	4b53      	ldr	r3, [pc, #332]	@ (8002588 <HAL_RCC_ClockConfig+0x1c4>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	4a52      	ldr	r2, [pc, #328]	@ (8002588 <HAL_RCC_ClockConfig+0x1c4>)
 800243e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002442:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002444:	4b50      	ldr	r3, [pc, #320]	@ (8002588 <HAL_RCC_ClockConfig+0x1c4>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	494d      	ldr	r1, [pc, #308]	@ (8002588 <HAL_RCC_ClockConfig+0x1c4>)
 8002452:	4313      	orrs	r3, r2
 8002454:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	2b00      	cmp	r3, #0
 8002460:	d040      	beq.n	80024e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	2b01      	cmp	r3, #1
 8002468:	d107      	bne.n	800247a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800246a:	4b47      	ldr	r3, [pc, #284]	@ (8002588 <HAL_RCC_ClockConfig+0x1c4>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d115      	bne.n	80024a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e07f      	b.n	800257a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	2b02      	cmp	r3, #2
 8002480:	d107      	bne.n	8002492 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002482:	4b41      	ldr	r3, [pc, #260]	@ (8002588 <HAL_RCC_ClockConfig+0x1c4>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d109      	bne.n	80024a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e073      	b.n	800257a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002492:	4b3d      	ldr	r3, [pc, #244]	@ (8002588 <HAL_RCC_ClockConfig+0x1c4>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	2b00      	cmp	r3, #0
 800249c:	d101      	bne.n	80024a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e06b      	b.n	800257a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024a2:	4b39      	ldr	r3, [pc, #228]	@ (8002588 <HAL_RCC_ClockConfig+0x1c4>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f023 0203 	bic.w	r2, r3, #3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	4936      	ldr	r1, [pc, #216]	@ (8002588 <HAL_RCC_ClockConfig+0x1c4>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024b4:	f7ff fa28 	bl	8001908 <HAL_GetTick>
 80024b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ba:	e00a      	b.n	80024d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024bc:	f7ff fa24 	bl	8001908 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d901      	bls.n	80024d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e053      	b.n	800257a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024d2:	4b2d      	ldr	r3, [pc, #180]	@ (8002588 <HAL_RCC_ClockConfig+0x1c4>)
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f003 020c 	and.w	r2, r3, #12
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d1eb      	bne.n	80024bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024e4:	4b27      	ldr	r3, [pc, #156]	@ (8002584 <HAL_RCC_ClockConfig+0x1c0>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0307 	and.w	r3, r3, #7
 80024ec:	683a      	ldr	r2, [r7, #0]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d210      	bcs.n	8002514 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024f2:	4b24      	ldr	r3, [pc, #144]	@ (8002584 <HAL_RCC_ClockConfig+0x1c0>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f023 0207 	bic.w	r2, r3, #7
 80024fa:	4922      	ldr	r1, [pc, #136]	@ (8002584 <HAL_RCC_ClockConfig+0x1c0>)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	4313      	orrs	r3, r2
 8002500:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002502:	4b20      	ldr	r3, [pc, #128]	@ (8002584 <HAL_RCC_ClockConfig+0x1c0>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0307 	and.w	r3, r3, #7
 800250a:	683a      	ldr	r2, [r7, #0]
 800250c:	429a      	cmp	r2, r3
 800250e:	d001      	beq.n	8002514 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e032      	b.n	800257a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0304 	and.w	r3, r3, #4
 800251c:	2b00      	cmp	r3, #0
 800251e:	d008      	beq.n	8002532 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002520:	4b19      	ldr	r3, [pc, #100]	@ (8002588 <HAL_RCC_ClockConfig+0x1c4>)
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	4916      	ldr	r1, [pc, #88]	@ (8002588 <HAL_RCC_ClockConfig+0x1c4>)
 800252e:	4313      	orrs	r3, r2
 8002530:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0308 	and.w	r3, r3, #8
 800253a:	2b00      	cmp	r3, #0
 800253c:	d009      	beq.n	8002552 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800253e:	4b12      	ldr	r3, [pc, #72]	@ (8002588 <HAL_RCC_ClockConfig+0x1c4>)
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	490e      	ldr	r1, [pc, #56]	@ (8002588 <HAL_RCC_ClockConfig+0x1c4>)
 800254e:	4313      	orrs	r3, r2
 8002550:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002552:	f000 f821 	bl	8002598 <HAL_RCC_GetSysClockFreq>
 8002556:	4602      	mov	r2, r0
 8002558:	4b0b      	ldr	r3, [pc, #44]	@ (8002588 <HAL_RCC_ClockConfig+0x1c4>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	091b      	lsrs	r3, r3, #4
 800255e:	f003 030f 	and.w	r3, r3, #15
 8002562:	490a      	ldr	r1, [pc, #40]	@ (800258c <HAL_RCC_ClockConfig+0x1c8>)
 8002564:	5ccb      	ldrb	r3, [r1, r3]
 8002566:	fa22 f303 	lsr.w	r3, r2, r3
 800256a:	4a09      	ldr	r2, [pc, #36]	@ (8002590 <HAL_RCC_ClockConfig+0x1cc>)
 800256c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800256e:	4b09      	ldr	r3, [pc, #36]	@ (8002594 <HAL_RCC_ClockConfig+0x1d0>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4618      	mov	r0, r3
 8002574:	f7ff f986 	bl	8001884 <HAL_InitTick>

  return HAL_OK;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3710      	adds	r7, #16
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	40022000 	.word	0x40022000
 8002588:	40021000 	.word	0x40021000
 800258c:	08002ea4 	.word	0x08002ea4
 8002590:	20000044 	.word	0x20000044
 8002594:	20000060 	.word	0x20000060

08002598 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002598:	b480      	push	{r7}
 800259a:	b087      	sub	sp, #28
 800259c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800259e:	2300      	movs	r3, #0
 80025a0:	60fb      	str	r3, [r7, #12]
 80025a2:	2300      	movs	r3, #0
 80025a4:	60bb      	str	r3, [r7, #8]
 80025a6:	2300      	movs	r3, #0
 80025a8:	617b      	str	r3, [r7, #20]
 80025aa:	2300      	movs	r3, #0
 80025ac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80025ae:	2300      	movs	r3, #0
 80025b0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80025b2:	4b1e      	ldr	r3, [pc, #120]	@ (800262c <HAL_RCC_GetSysClockFreq+0x94>)
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f003 030c 	and.w	r3, r3, #12
 80025be:	2b04      	cmp	r3, #4
 80025c0:	d002      	beq.n	80025c8 <HAL_RCC_GetSysClockFreq+0x30>
 80025c2:	2b08      	cmp	r3, #8
 80025c4:	d003      	beq.n	80025ce <HAL_RCC_GetSysClockFreq+0x36>
 80025c6:	e027      	b.n	8002618 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025c8:	4b19      	ldr	r3, [pc, #100]	@ (8002630 <HAL_RCC_GetSysClockFreq+0x98>)
 80025ca:	613b      	str	r3, [r7, #16]
      break;
 80025cc:	e027      	b.n	800261e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	0c9b      	lsrs	r3, r3, #18
 80025d2:	f003 030f 	and.w	r3, r3, #15
 80025d6:	4a17      	ldr	r2, [pc, #92]	@ (8002634 <HAL_RCC_GetSysClockFreq+0x9c>)
 80025d8:	5cd3      	ldrb	r3, [r2, r3]
 80025da:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d010      	beq.n	8002608 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80025e6:	4b11      	ldr	r3, [pc, #68]	@ (800262c <HAL_RCC_GetSysClockFreq+0x94>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	0c5b      	lsrs	r3, r3, #17
 80025ec:	f003 0301 	and.w	r3, r3, #1
 80025f0:	4a11      	ldr	r2, [pc, #68]	@ (8002638 <HAL_RCC_GetSysClockFreq+0xa0>)
 80025f2:	5cd3      	ldrb	r3, [r2, r3]
 80025f4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a0d      	ldr	r2, [pc, #52]	@ (8002630 <HAL_RCC_GetSysClockFreq+0x98>)
 80025fa:	fb03 f202 	mul.w	r2, r3, r2
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	fbb2 f3f3 	udiv	r3, r2, r3
 8002604:	617b      	str	r3, [r7, #20]
 8002606:	e004      	b.n	8002612 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	4a0c      	ldr	r2, [pc, #48]	@ (800263c <HAL_RCC_GetSysClockFreq+0xa4>)
 800260c:	fb02 f303 	mul.w	r3, r2, r3
 8002610:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	613b      	str	r3, [r7, #16]
      break;
 8002616:	e002      	b.n	800261e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002618:	4b05      	ldr	r3, [pc, #20]	@ (8002630 <HAL_RCC_GetSysClockFreq+0x98>)
 800261a:	613b      	str	r3, [r7, #16]
      break;
 800261c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800261e:	693b      	ldr	r3, [r7, #16]
}
 8002620:	4618      	mov	r0, r3
 8002622:	371c      	adds	r7, #28
 8002624:	46bd      	mov	sp, r7
 8002626:	bc80      	pop	{r7}
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	40021000 	.word	0x40021000
 8002630:	007a1200 	.word	0x007a1200
 8002634:	08002eb4 	.word	0x08002eb4
 8002638:	08002ec4 	.word	0x08002ec4
 800263c:	003d0900 	.word	0x003d0900

08002640 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002640:	b480      	push	{r7}
 8002642:	b085      	sub	sp, #20
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002648:	4b0a      	ldr	r3, [pc, #40]	@ (8002674 <RCC_Delay+0x34>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a0a      	ldr	r2, [pc, #40]	@ (8002678 <RCC_Delay+0x38>)
 800264e:	fba2 2303 	umull	r2, r3, r2, r3
 8002652:	0a5b      	lsrs	r3, r3, #9
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	fb02 f303 	mul.w	r3, r2, r3
 800265a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800265c:	bf00      	nop
  }
  while (Delay --);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	1e5a      	subs	r2, r3, #1
 8002662:	60fa      	str	r2, [r7, #12]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d1f9      	bne.n	800265c <RCC_Delay+0x1c>
}
 8002668:	bf00      	nop
 800266a:	bf00      	nop
 800266c:	3714      	adds	r7, #20
 800266e:	46bd      	mov	sp, r7
 8002670:	bc80      	pop	{r7}
 8002672:	4770      	bx	lr
 8002674:	20000044 	.word	0x20000044
 8002678:	10624dd3 	.word	0x10624dd3

0800267c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d101      	bne.n	800268e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e041      	b.n	8002712 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b00      	cmp	r3, #0
 8002698:	d106      	bne.n	80026a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f7fe ff66 	bl	8001574 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2202      	movs	r2, #2
 80026ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	3304      	adds	r3, #4
 80026b8:	4619      	mov	r1, r3
 80026ba:	4610      	mov	r0, r2
 80026bc:	f000 fa56 	bl	8002b6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2201      	movs	r2, #1
 80026ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2201      	movs	r2, #1
 80026f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2201      	movs	r2, #1
 8002704:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2201      	movs	r2, #1
 800270c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	3708      	adds	r7, #8
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
	...

0800271c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800271c:	b480      	push	{r7}
 800271e:	b085      	sub	sp, #20
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800272a:	b2db      	uxtb	r3, r3
 800272c:	2b01      	cmp	r3, #1
 800272e:	d001      	beq.n	8002734 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e035      	b.n	80027a0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2202      	movs	r2, #2
 8002738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	68da      	ldr	r2, [r3, #12]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f042 0201 	orr.w	r2, r2, #1
 800274a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a16      	ldr	r2, [pc, #88]	@ (80027ac <HAL_TIM_Base_Start_IT+0x90>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d009      	beq.n	800276a <HAL_TIM_Base_Start_IT+0x4e>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800275e:	d004      	beq.n	800276a <HAL_TIM_Base_Start_IT+0x4e>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a12      	ldr	r2, [pc, #72]	@ (80027b0 <HAL_TIM_Base_Start_IT+0x94>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d111      	bne.n	800278e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	f003 0307 	and.w	r3, r3, #7
 8002774:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2b06      	cmp	r3, #6
 800277a:	d010      	beq.n	800279e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f042 0201 	orr.w	r2, r2, #1
 800278a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800278c:	e007      	b.n	800279e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f042 0201 	orr.w	r2, r2, #1
 800279c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800279e:	2300      	movs	r3, #0
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3714      	adds	r7, #20
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bc80      	pop	{r7}
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	40012c00 	.word	0x40012c00
 80027b0:	40000400 	.word	0x40000400

080027b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d020      	beq.n	8002818 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	f003 0302 	and.w	r3, r3, #2
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d01b      	beq.n	8002818 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f06f 0202 	mvn.w	r2, #2
 80027e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2201      	movs	r2, #1
 80027ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	699b      	ldr	r3, [r3, #24]
 80027f6:	f003 0303 	and.w	r3, r3, #3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d003      	beq.n	8002806 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f000 f998 	bl	8002b34 <HAL_TIM_IC_CaptureCallback>
 8002804:	e005      	b.n	8002812 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f000 f98b 	bl	8002b22 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f000 f99a 	bl	8002b46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	f003 0304 	and.w	r3, r3, #4
 800281e:	2b00      	cmp	r3, #0
 8002820:	d020      	beq.n	8002864 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f003 0304 	and.w	r3, r3, #4
 8002828:	2b00      	cmp	r3, #0
 800282a:	d01b      	beq.n	8002864 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f06f 0204 	mvn.w	r2, #4
 8002834:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2202      	movs	r2, #2
 800283a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002846:	2b00      	cmp	r3, #0
 8002848:	d003      	beq.n	8002852 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 f972 	bl	8002b34 <HAL_TIM_IC_CaptureCallback>
 8002850:	e005      	b.n	800285e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f000 f965 	bl	8002b22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f000 f974 	bl	8002b46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	f003 0308 	and.w	r3, r3, #8
 800286a:	2b00      	cmp	r3, #0
 800286c:	d020      	beq.n	80028b0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f003 0308 	and.w	r3, r3, #8
 8002874:	2b00      	cmp	r3, #0
 8002876:	d01b      	beq.n	80028b0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f06f 0208 	mvn.w	r2, #8
 8002880:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2204      	movs	r2, #4
 8002886:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	69db      	ldr	r3, [r3, #28]
 800288e:	f003 0303 	and.w	r3, r3, #3
 8002892:	2b00      	cmp	r3, #0
 8002894:	d003      	beq.n	800289e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 f94c 	bl	8002b34 <HAL_TIM_IC_CaptureCallback>
 800289c:	e005      	b.n	80028aa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f000 f93f 	bl	8002b22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f000 f94e 	bl	8002b46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	f003 0310 	and.w	r3, r3, #16
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d020      	beq.n	80028fc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f003 0310 	and.w	r3, r3, #16
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d01b      	beq.n	80028fc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f06f 0210 	mvn.w	r2, #16
 80028cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2208      	movs	r2, #8
 80028d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	69db      	ldr	r3, [r3, #28]
 80028da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d003      	beq.n	80028ea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 f926 	bl	8002b34 <HAL_TIM_IC_CaptureCallback>
 80028e8:	e005      	b.n	80028f6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f000 f919 	bl	8002b22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f000 f928 	bl	8002b46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	f003 0301 	and.w	r3, r3, #1
 8002902:	2b00      	cmp	r3, #0
 8002904:	d00c      	beq.n	8002920 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f003 0301 	and.w	r3, r3, #1
 800290c:	2b00      	cmp	r3, #0
 800290e:	d007      	beq.n	8002920 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f06f 0201 	mvn.w	r2, #1
 8002918:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f7fe fd62 	bl	80013e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00c      	beq.n	8002944 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002930:	2b00      	cmp	r3, #0
 8002932:	d007      	beq.n	8002944 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800293c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f000 fa6f 	bl	8002e22 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800294a:	2b00      	cmp	r3, #0
 800294c:	d00c      	beq.n	8002968 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002954:	2b00      	cmp	r3, #0
 8002956:	d007      	beq.n	8002968 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002960:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f000 f8f8 	bl	8002b58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	f003 0320 	and.w	r3, r3, #32
 800296e:	2b00      	cmp	r3, #0
 8002970:	d00c      	beq.n	800298c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f003 0320 	and.w	r3, r3, #32
 8002978:	2b00      	cmp	r3, #0
 800297a:	d007      	beq.n	800298c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f06f 0220 	mvn.w	r2, #32
 8002984:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f000 fa42 	bl	8002e10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800298c:	bf00      	nop
 800298e:	3710      	adds	r7, #16
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800299e:	2300      	movs	r3, #0
 80029a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d101      	bne.n	80029b0 <HAL_TIM_ConfigClockSource+0x1c>
 80029ac:	2302      	movs	r3, #2
 80029ae:	e0b4      	b.n	8002b1a <HAL_TIM_ConfigClockSource+0x186>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2202      	movs	r2, #2
 80029bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80029ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80029d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68ba      	ldr	r2, [r7, #8]
 80029de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80029e8:	d03e      	beq.n	8002a68 <HAL_TIM_ConfigClockSource+0xd4>
 80029ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80029ee:	f200 8087 	bhi.w	8002b00 <HAL_TIM_ConfigClockSource+0x16c>
 80029f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029f6:	f000 8086 	beq.w	8002b06 <HAL_TIM_ConfigClockSource+0x172>
 80029fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029fe:	d87f      	bhi.n	8002b00 <HAL_TIM_ConfigClockSource+0x16c>
 8002a00:	2b70      	cmp	r3, #112	@ 0x70
 8002a02:	d01a      	beq.n	8002a3a <HAL_TIM_ConfigClockSource+0xa6>
 8002a04:	2b70      	cmp	r3, #112	@ 0x70
 8002a06:	d87b      	bhi.n	8002b00 <HAL_TIM_ConfigClockSource+0x16c>
 8002a08:	2b60      	cmp	r3, #96	@ 0x60
 8002a0a:	d050      	beq.n	8002aae <HAL_TIM_ConfigClockSource+0x11a>
 8002a0c:	2b60      	cmp	r3, #96	@ 0x60
 8002a0e:	d877      	bhi.n	8002b00 <HAL_TIM_ConfigClockSource+0x16c>
 8002a10:	2b50      	cmp	r3, #80	@ 0x50
 8002a12:	d03c      	beq.n	8002a8e <HAL_TIM_ConfigClockSource+0xfa>
 8002a14:	2b50      	cmp	r3, #80	@ 0x50
 8002a16:	d873      	bhi.n	8002b00 <HAL_TIM_ConfigClockSource+0x16c>
 8002a18:	2b40      	cmp	r3, #64	@ 0x40
 8002a1a:	d058      	beq.n	8002ace <HAL_TIM_ConfigClockSource+0x13a>
 8002a1c:	2b40      	cmp	r3, #64	@ 0x40
 8002a1e:	d86f      	bhi.n	8002b00 <HAL_TIM_ConfigClockSource+0x16c>
 8002a20:	2b30      	cmp	r3, #48	@ 0x30
 8002a22:	d064      	beq.n	8002aee <HAL_TIM_ConfigClockSource+0x15a>
 8002a24:	2b30      	cmp	r3, #48	@ 0x30
 8002a26:	d86b      	bhi.n	8002b00 <HAL_TIM_ConfigClockSource+0x16c>
 8002a28:	2b20      	cmp	r3, #32
 8002a2a:	d060      	beq.n	8002aee <HAL_TIM_ConfigClockSource+0x15a>
 8002a2c:	2b20      	cmp	r3, #32
 8002a2e:	d867      	bhi.n	8002b00 <HAL_TIM_ConfigClockSource+0x16c>
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d05c      	beq.n	8002aee <HAL_TIM_ConfigClockSource+0x15a>
 8002a34:	2b10      	cmp	r3, #16
 8002a36:	d05a      	beq.n	8002aee <HAL_TIM_ConfigClockSource+0x15a>
 8002a38:	e062      	b.n	8002b00 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a4a:	f000 f96a 	bl	8002d22 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002a5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	68ba      	ldr	r2, [r7, #8]
 8002a64:	609a      	str	r2, [r3, #8]
      break;
 8002a66:	e04f      	b.n	8002b08 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a78:	f000 f953 	bl	8002d22 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	689a      	ldr	r2, [r3, #8]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002a8a:	609a      	str	r2, [r3, #8]
      break;
 8002a8c:	e03c      	b.n	8002b08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	f000 f8ca 	bl	8002c34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2150      	movs	r1, #80	@ 0x50
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f000 f921 	bl	8002cee <TIM_ITRx_SetConfig>
      break;
 8002aac:	e02c      	b.n	8002b08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002aba:	461a      	mov	r2, r3
 8002abc:	f000 f8e8 	bl	8002c90 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2160      	movs	r1, #96	@ 0x60
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f000 f911 	bl	8002cee <TIM_ITRx_SetConfig>
      break;
 8002acc:	e01c      	b.n	8002b08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ada:	461a      	mov	r2, r3
 8002adc:	f000 f8aa 	bl	8002c34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2140      	movs	r1, #64	@ 0x40
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f000 f901 	bl	8002cee <TIM_ITRx_SetConfig>
      break;
 8002aec:	e00c      	b.n	8002b08 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4619      	mov	r1, r3
 8002af8:	4610      	mov	r0, r2
 8002afa:	f000 f8f8 	bl	8002cee <TIM_ITRx_SetConfig>
      break;
 8002afe:	e003      	b.n	8002b08 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	73fb      	strb	r3, [r7, #15]
      break;
 8002b04:	e000      	b.n	8002b08 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002b06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3710      	adds	r7, #16
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b22:	b480      	push	{r7}
 8002b24:	b083      	sub	sp, #12
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b2a:	bf00      	nop
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bc80      	pop	{r7}
 8002b32:	4770      	bx	lr

08002b34 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b3c:	bf00      	nop
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bc80      	pop	{r7}
 8002b44:	4770      	bx	lr

08002b46 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b46:	b480      	push	{r7}
 8002b48:	b083      	sub	sp, #12
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b4e:	bf00      	nop
 8002b50:	370c      	adds	r7, #12
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bc80      	pop	{r7}
 8002b56:	4770      	bx	lr

08002b58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b60:	bf00      	nop
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bc80      	pop	{r7}
 8002b68:	4770      	bx	lr
	...

08002b6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b085      	sub	sp, #20
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	4a2b      	ldr	r2, [pc, #172]	@ (8002c2c <TIM_Base_SetConfig+0xc0>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d007      	beq.n	8002b94 <TIM_Base_SetConfig+0x28>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b8a:	d003      	beq.n	8002b94 <TIM_Base_SetConfig+0x28>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	4a28      	ldr	r2, [pc, #160]	@ (8002c30 <TIM_Base_SetConfig+0xc4>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d108      	bne.n	8002ba6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	68fa      	ldr	r2, [r7, #12]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a20      	ldr	r2, [pc, #128]	@ (8002c2c <TIM_Base_SetConfig+0xc0>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d007      	beq.n	8002bbe <TIM_Base_SetConfig+0x52>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bb4:	d003      	beq.n	8002bbe <TIM_Base_SetConfig+0x52>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a1d      	ldr	r2, [pc, #116]	@ (8002c30 <TIM_Base_SetConfig+0xc4>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d108      	bne.n	8002bd0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	68fa      	ldr	r2, [r7, #12]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	695b      	ldr	r3, [r3, #20]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	68fa      	ldr	r2, [r7, #12]
 8002be2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	689a      	ldr	r2, [r3, #8]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	4a0d      	ldr	r2, [pc, #52]	@ (8002c2c <TIM_Base_SetConfig+0xc0>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d103      	bne.n	8002c04 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	691a      	ldr	r2, [r3, #16]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	f003 0301 	and.w	r3, r3, #1
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d005      	beq.n	8002c22 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	f023 0201 	bic.w	r2, r3, #1
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	611a      	str	r2, [r3, #16]
  }
}
 8002c22:	bf00      	nop
 8002c24:	3714      	adds	r7, #20
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bc80      	pop	{r7}
 8002c2a:	4770      	bx	lr
 8002c2c:	40012c00 	.word	0x40012c00
 8002c30:	40000400 	.word	0x40000400

08002c34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b087      	sub	sp, #28
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6a1b      	ldr	r3, [r3, #32]
 8002c44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6a1b      	ldr	r3, [r3, #32]
 8002c4a:	f023 0201 	bic.w	r2, r3, #1
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002c5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	011b      	lsls	r3, r3, #4
 8002c64:	693a      	ldr	r2, [r7, #16]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	f023 030a 	bic.w	r3, r3, #10
 8002c70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c72:	697a      	ldr	r2, [r7, #20]
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	693a      	ldr	r2, [r7, #16]
 8002c7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	697a      	ldr	r2, [r7, #20]
 8002c84:	621a      	str	r2, [r3, #32]
}
 8002c86:	bf00      	nop
 8002c88:	371c      	adds	r7, #28
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bc80      	pop	{r7}
 8002c8e:	4770      	bx	lr

08002c90 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b087      	sub	sp, #28
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6a1b      	ldr	r3, [r3, #32]
 8002ca0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6a1b      	ldr	r3, [r3, #32]
 8002ca6:	f023 0210 	bic.w	r2, r3, #16
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002cba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	031b      	lsls	r3, r3, #12
 8002cc0:	693a      	ldr	r2, [r7, #16]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002ccc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	011b      	lsls	r3, r3, #4
 8002cd2:	697a      	ldr	r2, [r7, #20]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	693a      	ldr	r2, [r7, #16]
 8002cdc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	697a      	ldr	r2, [r7, #20]
 8002ce2:	621a      	str	r2, [r3, #32]
}
 8002ce4:	bf00      	nop
 8002ce6:	371c      	adds	r7, #28
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bc80      	pop	{r7}
 8002cec:	4770      	bx	lr

08002cee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002cee:	b480      	push	{r7}
 8002cf0:	b085      	sub	sp, #20
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
 8002cf6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d06:	683a      	ldr	r2, [r7, #0]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	f043 0307 	orr.w	r3, r3, #7
 8002d10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	68fa      	ldr	r2, [r7, #12]
 8002d16:	609a      	str	r2, [r3, #8]
}
 8002d18:	bf00      	nop
 8002d1a:	3714      	adds	r7, #20
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bc80      	pop	{r7}
 8002d20:	4770      	bx	lr

08002d22 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d22:	b480      	push	{r7}
 8002d24:	b087      	sub	sp, #28
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	60f8      	str	r0, [r7, #12]
 8002d2a:	60b9      	str	r1, [r7, #8]
 8002d2c:	607a      	str	r2, [r7, #4]
 8002d2e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002d3c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	021a      	lsls	r2, r3, #8
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	431a      	orrs	r2, r3
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	697a      	ldr	r2, [r7, #20]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	697a      	ldr	r2, [r7, #20]
 8002d54:	609a      	str	r2, [r3, #8]
}
 8002d56:	bf00      	nop
 8002d58:	371c      	adds	r7, #28
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bc80      	pop	{r7}
 8002d5e:	4770      	bx	lr

08002d60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b085      	sub	sp, #20
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d101      	bne.n	8002d78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d74:	2302      	movs	r3, #2
 8002d76:	e041      	b.n	8002dfc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2202      	movs	r2, #2
 8002d84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	68fa      	ldr	r2, [r7, #12]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	68fa      	ldr	r2, [r7, #12]
 8002db0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a14      	ldr	r2, [pc, #80]	@ (8002e08 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d009      	beq.n	8002dd0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dc4:	d004      	beq.n	8002dd0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a10      	ldr	r2, [pc, #64]	@ (8002e0c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d10c      	bne.n	8002dea <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002dd6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	68ba      	ldr	r2, [r7, #8]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	68ba      	ldr	r2, [r7, #8]
 8002de8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2201      	movs	r2, #1
 8002dee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002dfa:	2300      	movs	r3, #0
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3714      	adds	r7, #20
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bc80      	pop	{r7}
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	40012c00 	.word	0x40012c00
 8002e0c:	40000400 	.word	0x40000400

08002e10 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e18:	bf00      	nop
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bc80      	pop	{r7}
 8002e20:	4770      	bx	lr

08002e22 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e22:	b480      	push	{r7}
 8002e24:	b083      	sub	sp, #12
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e2a:	bf00      	nop
 8002e2c:	370c      	adds	r7, #12
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bc80      	pop	{r7}
 8002e32:	4770      	bx	lr

08002e34 <memset>:
 8002e34:	4603      	mov	r3, r0
 8002e36:	4402      	add	r2, r0
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d100      	bne.n	8002e3e <memset+0xa>
 8002e3c:	4770      	bx	lr
 8002e3e:	f803 1b01 	strb.w	r1, [r3], #1
 8002e42:	e7f9      	b.n	8002e38 <memset+0x4>

08002e44 <__libc_init_array>:
 8002e44:	b570      	push	{r4, r5, r6, lr}
 8002e46:	2600      	movs	r6, #0
 8002e48:	4d0c      	ldr	r5, [pc, #48]	@ (8002e7c <__libc_init_array+0x38>)
 8002e4a:	4c0d      	ldr	r4, [pc, #52]	@ (8002e80 <__libc_init_array+0x3c>)
 8002e4c:	1b64      	subs	r4, r4, r5
 8002e4e:	10a4      	asrs	r4, r4, #2
 8002e50:	42a6      	cmp	r6, r4
 8002e52:	d109      	bne.n	8002e68 <__libc_init_array+0x24>
 8002e54:	f000 f81a 	bl	8002e8c <_init>
 8002e58:	2600      	movs	r6, #0
 8002e5a:	4d0a      	ldr	r5, [pc, #40]	@ (8002e84 <__libc_init_array+0x40>)
 8002e5c:	4c0a      	ldr	r4, [pc, #40]	@ (8002e88 <__libc_init_array+0x44>)
 8002e5e:	1b64      	subs	r4, r4, r5
 8002e60:	10a4      	asrs	r4, r4, #2
 8002e62:	42a6      	cmp	r6, r4
 8002e64:	d105      	bne.n	8002e72 <__libc_init_array+0x2e>
 8002e66:	bd70      	pop	{r4, r5, r6, pc}
 8002e68:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e6c:	4798      	blx	r3
 8002e6e:	3601      	adds	r6, #1
 8002e70:	e7ee      	b.n	8002e50 <__libc_init_array+0xc>
 8002e72:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e76:	4798      	blx	r3
 8002e78:	3601      	adds	r6, #1
 8002e7a:	e7f2      	b.n	8002e62 <__libc_init_array+0x1e>
 8002e7c:	08002ec8 	.word	0x08002ec8
 8002e80:	08002ec8 	.word	0x08002ec8
 8002e84:	08002ec8 	.word	0x08002ec8
 8002e88:	08002ecc 	.word	0x08002ecc

08002e8c <_init>:
 8002e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e8e:	bf00      	nop
 8002e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e92:	bc08      	pop	{r3}
 8002e94:	469e      	mov	lr, r3
 8002e96:	4770      	bx	lr

08002e98 <_fini>:
 8002e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e9a:	bf00      	nop
 8002e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e9e:	bc08      	pop	{r3}
 8002ea0:	469e      	mov	lr, r3
 8002ea2:	4770      	bx	lr
